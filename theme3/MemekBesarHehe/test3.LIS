

   1               	        .data
   2               	        .align 2
   3               	environ:
   4 0000 0000 0000 	        .long 0
   5               	 	.align	2
   6               	
   7               	.extern main
   8               	.extern exit
   9               	.extern monitor_begin
  10               	.extern hardware_init_hook
  11               	.extern software_init_hook
  12               	.extern atexit
  13               	.extern __do_global_dtors
  14               	.extern __bss_start
  15               	.extern _end
  16               	
  17               	.global start
  18               	
  19               	.text
  20               	.even
  21               		/* See if user supplied their own stack (__stack != 0).  If not, then
  22               		 * default to using the value of %sp as set by the ROM monitor.
  23               		 */
  24 0000 207C 0000 		movel	#__stack, %a0
  24      0000 
  25 0006 B1FC 0000 		cmpl	#0, %a0
  25      0000 
  26 000c 6702      		jbeq    1f
  27 000e 2E48      		movel	%a0, %sp
  28               	1:
  29               		/* set up initial stack frame */
  30 0010 4E56 FFF8 		link	%a6, #-8
  31               	
  32               		/* zero out the bss section */
  33 0014 223C 0000 		movel	#__bss_start, %d1
  33      0000 
  34 001a 203C 0000 		movel	#_end, %d0
  34      0000 
  35 0020 B280      		cmpl	%d0, %d1
  36 0022 6712      		jbeq	3f
  37 0024 2041      		movl	%d1, %a0
  38 0026 9081      		subl	%d1, %d0
  39 0028 5380      		subql	#1, %d0
  40               	2:
  41 002a 4218      		clrb	(%a0)+
  42 002c 51C8 FFFC 		dbra	%d0, 2b
  43 0030 4240      		clrw	%d0
  44 0032 5380      		subql	#1, %d0
  45 0034 64F4      		jbcc	2b
  46               	3:
  47               		/* jmp monitor initialize after making up  bss */
  48 0036 4EF9 0000 		jmp	monitor_begin
  48      0000 
  49               	start:
  50               		/* monitor returns here.
  51               		 * re-setup stack for C programs.
  52               	         * See if user supplied their own stack (__stack != 0).  If not, then


  53               		 * default to using the value of %sp as set by the ROM monitor.
  54               		 */
  55 003c 207C 0000 		movel	#__stack, %a0
  55      0000 
  56 0042 B1FC 0000 		cmpl	#0, %a0
  56      0000 
  57 0048 6702      		jbeq    skip
  58 004a 2E48      		movel	%a0, %sp
  59               	skip:
  60               		/* set up initial stack frame */
  61 004c 4E56 FFF8 		link	%a6, #-8
  62               	
  63               		/*
  64               		 * initialize target specific stuff. Only execute these
  65               		 * functions it they exist.
  66               		 */
  67 0050 41F9 0000 		lea	hardware_init_hook, %a0
  67      0000 
  68 0056 B1FC 0000 		cmpl	#0, %a0
  68      0000 
  69 005c 6702      		jbeq	4f
  70 005e 4E90      		jsr     (%a0)
  71               	4:
  72 0060 41F9 0000 		lea	software_init_hook, %a0
  72      0000 
  73 0066 B1FC 0000 		cmpl	#0, %a0
  73      0000 
  74 006c 6702      		jbeq	5f
  75 006e 4E90      		jsr     (%a0)
  76               	5:
  77               	
  78               		/*
  79               		 * call the main routine from the application to get it going.
  80               		 * main (argc, argv, environ)
  81               		 * we pass argv as a pointer to NULL.
  82               		 */
  83               	
  84               		/* put __do_global_dtors in the atexit list so 
  85               		 * the destructors get run */
  86               	/* 
  87               		movel	#__do_global_dtors,(%sp)
  88               		jsr	atexit
  89               		movel	#__FINI_SECTION__,(%sp)
  90               		jsr	atexit
  91               		jsr	__INIT_SECTION__
  92               	*/
  93               		
  94               		** setup argv, argc and jump into main
  95 0070 4878 0000 	        pea     0
  96 0074 4879 0000 	        pea     environ
  96      0000 
  97 007a 486F 0004 	        pea     %sp@(4)
  98 007e 4878 0000 	        pea     0
  99 0082 4EB9 0000 		jsr	main
  99      0000 
 100 0088 2F00      		movel	%d0, %sp@-
 101               	


 102 008a 4EB9 0000 	        jsr     exit
 102      0000 
 103               	.even




   1               	.extern     start
   2               	.global     monitor_begin
   3               	
   4               	********************
   5               	** System call numbers 
   6               	******************** 
   7               	    .equ    SYSCALL_NUM_GETSTRING, 1 
   8               	    .equ    SYSCALL_NUM_PUTSTRING, 2 
   9               	    .equ    SYSCALL_NUM_RESET_TIMER, 3 
  10               	    .equ    SYSCALL_NUM_SET_TIMER, 4 
  11               	
  12               	******************************
  13               	** Head of the Register Group
  14               	*******************************
  15               	    .equ    REGBASE, 0xFFF000 | DMAP is used.
  16               	    .equ    IOBASE, 0x00d00000
  17               	*******************************
  18               	** Registers Related to Interrupts
  19               	*******************************
  20               	    .equ    IVR, REGBASE+0x300 | Interrupt Vector Register
  21               	    .equ    IMR, REGBASE+0x304 | Interrupt Mask Register
  22               	    .equ    ISR, REGBASE+0x30c | Interrupt Status Register
  23               	    .equ    IPR, REGBASE+0x310 | Interrupt Pending Register
  24               	*******************************
  25               	** Registers Related to the Timer
  26               	*******************************
  27               	    .equ    TCTL1, REGBASE+0x600 	|Timer1 Control Register
  28               	    .equ    TPRER1, REGBASE+0x602 	|Timer1 Prescaler Register
  29               	    .equ    TCMP1, REGBASE+0x604 	|Timer1 Compare Register
  30               	    .equ    TCN1, REGBASE+0x608 	|Timer1 Counter Register
  31               	    .equ    TSTAT1, REGBASE+0x60a 	|Timer1 Status Register
  32               	*******************************
  33               	** Registers Related to UART1 (Transmitter and Receiver)
  34               	*******************************
  35               	    .equ    USTCNT1, REGBASE+0x900 	|UART1 Status / Control Register
  36               	    .equ    UBAUD1, REGBASE+0x902 	| UART 1 Baud Control Register
  37               	    .equ    URX1, REGBASE+0x904 	| UART 1 Receiver register
  38               	    .equ    UTX1, REGBASE+0x906 	| UART 1 Transmitter Register
  39               	*******************************
  40               	** LED
  41               	*******************************
  42               	    .equ    LED7, IOBASE+0x000002f 	| Register for LED mounted on the board
  43               	    .equ    LED6, IOBASE+0x000002d 	| Refer to Appendix A.4.3.1 for a way to use
  44               	    .equ    LED5, IOBASE+0x000002b
  45               	    .equ    LED4, IOBASE+0x0000029
  46               	    .equ    LED3, IOBASE+0x000003f
  47               	    .equ    LED2, IOBASE+0x000003d
  48               	    .equ    LED1, IOBASE+0x000003b
  49               	    .equ    LED0, IOBASE+0x0000039
  50               	    .equ    PUSHSW, 0xFFF419 		| Register for Push Switch mounted on the board
  51               	****************************************************************
  52               	** Reservation of the stack region
  53               	****************************************************************
  54               	.section .bss
  55               	.even
  56               	SYS_STK:
  57 0000 0000 0000 	    .ds.b   0x4000  | System stack region


  57      0000 0000 
  57      0000 0000 
  57      0000 0000 
  57      0000 0000 
  58               	    .even
  59               	SYS_STK_TOP:        | End of the system stack region
  60               	****************************************************************
  61               	** Initialization
  62               	** A specific value has been set to internal device registers.
  63               	** Refer to each register specification in Appendix B to know the above reason.
  64               	****************************************************************
  65               	.section .text
  66               	.even
  67               	monitor_begin:
  68               	* Prohibit an interrupt into the supervisor and during performing various settings.
  69 0000 46FC 2700 	    move.w  #0x2700, %SR	    | run at lv.0
  70 0004 4FF9 0000 	    lea.l   SYS_STK_TOP, %SP    | Set SSP
  70      0000 
  71               	******************************
  72               	**Initialization of the interrupt controller
  73               	******************************
  74 000a 13FC 0040 	    move.b  #0x40, IVR                  | Set the user interrupt vector number to 0x40+level.
  74      00FF F300 
  75 0012 23FC 00FF 	    move.l  #0x00ff3ff9, IMR            | Allow UART1 and timer interrupts
  75      3FF9 00FF 
  75      F304 
  76 001c 21FC 0000 	    move.l  #SYSCALL, 0x080             | Set the interrupt for system call TRAP #0
  76      0000 0080 
  77 0024 21FC 0000 	    move.l  #UART1_INTERRUPT, 0x110     | Set the interrupt subroutine for level 4 interrupt
  77      0000 0110 
  78 002c 21FC 0000 	    move.l  #TIMER_INTERRUPT, 0x118     | Set the interrupt subroutine for level 6 interrupt
  78      0000 0118 
  79               	******************************
  80               	** Initialization related to the transmitter and the receiver (UART1)
  81               	** (The interrupt level has been fixed to 4.)
  82               	******************************
  83 0034 33FC 0000 	    move.w  #0x0000, USTCNT1 | Reset
  83      00FF F900 
  84 003c 33FC E10C 	    move.w  #0xe10c, USTCNT1 | Transmission and reception possible - no parity, 1 stop, 8 bit, allo
  84      00FF F900 
  85 0044 33FC 0038 	    move.w  #0x0038, UBAUD1  | baud rate = 230400 bps
  85      00FF F902 
  86               	*************************
  87               	** Initialization related to the timer (The interrupt level has been fixed to 6.)
  88               	*************************
  89 004c 33FC 0004 	    move.w  #0x0004, TCTL1  | Restart, an interrupt impossible
  89      00FF F600 
  90               	                            | Count the time with the 1/16 of the system clock
  91               	                            | as a unit
  92               	                            | Stop the timer use
  93 0054 4EBA 0294 	    jsr		INIT
  94 0058 46FC 2000 	    move.w	#0x2000, %SR		/*SUPERVISOR MODE, LEVEL 0*/
  95 005c 4EF9 0000 	    jmp start
  95      0000 
  96               	
  97               	****************************************************************
  98               	**    Program region


  99               	****************************************************************
 100               	MAIN:
 101               	    ** Set the running mode and the level (The process to move to 'the user mode')
 102 0062 46FC 0000 	    move.w	#0x0000, %SR		/*USER MODE, LEVEL 0*/
 103 0066 4FF9 0000 	    lea.l	USR_STK_TOP, %SP	/*set user stack*/
 103      0000 
 104               	    
 105               	    ** Start up RESET_TIMER by the system call
 106 006c 7003      	    move.l	#SYSCALL_NUM_RESET_TIMER, %d0
 107               	    
 108 006e 4E40      	    trap	#0
 109               	    ** Start up SET_TIMER by the system call
 110 0070 7004      	    move.l	#SYSCALL_NUM_SET_TIMER, %d0
 111 0072 323C C350 	    move.w	#50000, %d1
 112 0076 243C 0000 	    move.l	#TT, %d2
 112      0000 
 113 007c 4E40      	    trap	#0
 114               	
 115               	
 116               	************************************* 
 117               	*    Test of sys_GETSTRING and sys_PUTSTRING 
 118               	*    Echo-back the input from a terminal 
 119               	************************************* 
 120               	
 121               	LOOP:
 122 007e 7001      	    move.l	#SYSCALL_NUM_GETSTRING, %d0
 123 0080 7200      	    move.l	#0, %d1			/*ch = 0*/
 124 0082 243C 0000 	    move.l	#BUF, %d2		/*p = #BUF*/
 124      0000 
 125 0088 263C 0000 	    move.l	#256, %d3		/*size = 256*/
 125      0100 
 126 008e 4E40      	    trap	#0
 127 0090 2600      	    move.l	%d0, %d3		/*size = %d0 (The length of a given string)*/
 128 0092 7002      	    move.l	#SYSCALL_NUM_PUTSTRING, %d0
 129 0094 7200      	    move.l	#0, %d1			/*ch = 0*/
 130 0096 243C 0000 	    move.l	#BUF, %d2		/*p = #BUF*/
 130      0000 
 131 009c 4E40      	    trap	#0
 132 009e 6000 FFDE 	    bra		LOOP		
 133               	
 134               	**************************************       
 135               	*    Test of the timer       
 136               	*    Display ‘******’ and CRLF (Carriage Return, Line Feed) five times       
 137               	*    Do RESET_TIMER after five times of the execution       
 138               	**************************************   
 139               	
 140               	TT:
 141 00a2 48E7 FFFE 	    movem.l	%d0-%d7/%a0-%a6, -(%sp)
 142 00a6 0C79 0005 	    cmpi.w	#5, TTC			/*Count with the counter TTC whether five times of the execution have been per
 142      0000 0000 
 143 00ae 6700 001C 	    beq		TTKILL			/*Stop the timer after five times of the execution*/
 144 00b2 7002      	    move.l	#SYSCALL_NUM_PUTSTRING, %d0
 145 00b4 7200      	    move.l	#0, %d1			/*ch = 0*/
 146 00b6 243C 0000 	    move.l	#TMSG, %d2		/*p = #TMSG*/
 146      0000 
 147 00bc 7608      	    move.l	#8, %d3			/*size = 8*/
 148 00be 4E40      	    trap	#0


 149 00c0 0679 0001 	    addi.w	#1, TTC			/*Increment TTC counter by 1 and return*/
 149      0000 0000 
 150 00c8 6000 0006 	    bra		TTEND
 151               	    
 152               	TTKILL:
 153 00cc 7003      	    move.l	#SYSCALL_NUM_RESET_TIMER, %d0
 154 00ce 4E40      	    trap	#0
 155               	    
 156               	TTEND:
 157 00d0 4CDF 7FFF 	    movem.l	(%sp)+, %d0-%d7/%a0-%a6
 158 00d4 4E75      	    rts
 159               	
 160               	****************************************************************
 161               	**  System Call Interface:
 162               	**	Maker: Sihanern Thitisan
 163               	**  Reviewer: Loa Champ, Nimrawee Nattapat
 164               	****************************************************************
 165               	        
 166               	SYSCALL:
 167 00d6 0C80 0000 	    cmpi.l  #SYSCALL_NUM_GETSTRING,%d0      | if %d0 == 1
 167      0001 
 168 00dc 6700 0022 	    beq     JUMP_GETSTRING                  | Jump to the subroutine for GETSTRING
 169 00e0 0C80 0000 	    cmpi.l  #SYSCALL_NUM_PUTSTRING,%d0      | if %d0 == 2
 169      0002 
 170 00e6 6700 001E 	    beq     JUMP_PUTSTRING                  | Jump to the subroutine for PUTSTRING
 171 00ea 0C80 0000 	    cmpi.l  #SYSCALL_NUM_RESET_TIMER,%d0    | if %d0 == 3
 171      0003 
 172 00f0 6700 001A 	    beq     JUMP_RESET_TIMER                | Jump to the subroutine for RESET_TIMER
 173 00f4 0C80 0000 	    cmpi.l  #SYSCALL_NUM_SET_TIMER,%d0      | if %d0 == 4
 173      0004 
 174 00fa 6700 0016 	    beq     JUMP_SET_TIMER                  | Jump to the subroutine for SET_TIMER
 175 00fe 4E73      	    rte
 176               	
 177               	JUMP_GETSTRING:
 178 0100 4EBA 0182 	    jsr    GETSTRING                        
 179 0104 4E73      	    rte
 180               	JUMP_PUTSTRING:
 181 0106 4EBA 0106 	    jsr    PUTSTRING
 182 010a 4E73      	    rte
 183               	JUMP_RESET_TIMER:
 184 010c 4EBA 001E 	    jsr    RESET_TIMER
 185 0110 4E73      	    rte
 186               	JUMP_SET_TIMER:
 187 0112 4EBA 0022 	    jsr    SET_TIMER
 188 0116 4E73      	    rte
 189               	
 190               	
 191               	****************************************************************
 192               	**	Timer interrupt
 193               	**	Maker: Nimrawee Nattapat, Loa Champ
 194               	**  Reviewer: Sihanern Thitisan, Nam Non
 195               	****************************************************************
 196               	TIMER_INTERRUPT:                    
 197 0118 48E7 0080 	    movem.l %a0, -(%sp)         | Save the registers            
 198 011c 0C79 0001 	    cmp.w   #1,	TSTAT1          | Check 0th bit of TSTAT1 to see if the cycle count has reached com
 198      00FF F60A 
 199 0124 6700 0034 	    beq	    TSTAT1_reset        | If last bit = 1 and timeer interrupt is occuring, jump to TSTAT1_


 200 0128 4EFA 002A 	    jmp	    Go_back
 201               	
 202               	RESET_TIMER:
 203 012c 33FC 0004 	    move.w  #0x0004,    TCTL1   | Restart, an interrupt impossible |Count the time with the 1/16 of
 203      00FF F600 
 204 0134 4E75      	    rts
 205               	
 206               	SET_TIMER:
 207 0136 33FC 00CE 	    move.w	#0x0ce,	TPRER1      | Set TPRER1 to a value that allows one cycle to be 0.1 ms
 207      00FF F602 
 208 013e 33C1 00FF 	    move.w 	%d1, TCMP1          | Move compare value input in d1 to TCMP1 
 208      F604 
 209 0144 33FC 0015 	    move.w	#0x0015, TCTL1      | Enable timer
 209      00FF F600 
 210 014c 23C2 0000 	    move.l 	%d2, task_p         | move head address of interupt task to a variable called task_p
 210      0000 
 211 0152 4E75      	    rts
 212               	
 213               	Go_back:
 214 0154 4CDF 0100 	    movem.l	(%sp)+, %a0         | Restore the registers
 215 0158 4E73      	    rte
 216               	    
 217               	TSTAT1_reset:
 218 015a 33FC 0000 	    move.w	#0, TSTAT1          | Reset TSTAT1 back to 0 
 218      00FF F60A 
 219 0162 4EBA 0006 	    jsr		Call_rp             | Jump to Call_rp to perform task_p
 220 0166 4EFA FFEC 	    jmp		Go_back
 221               	
 222               	Call_rp:
 223 016a 2079 0000 	    move.l 	(task_p), %a0       
 223      0000 
 224 0170 4E90      	    jsr		(%a0)               | jump to the address in task_p
 225 0172 4E75      	    rts
 226               	    
 227               	****************************************************************
 228               	**	UART1 Interrupt
 229               	**	Maker: Sihanern Thitisan, Lee Jiseok
 230               	**  Reviewer: Loa Champ, Nimrawee Nattapat
 231               	****************************************************************
 232               	UART1_INTERRUPT:
 233 0174 48E7 7800 	    movem.l %d1-%d4, -(%sp)
 234 0178 3639 00FF 	    move.w	URX1, %d3
 234      F904 
 235 017e 0803 000D 	    btst.l	#13, %d3                | Check if the 13th bit of URX1 is 1
 236 0182 6600 001E 	    bne     RECEIVER_INTERRUPT      | If the 13th bit is 1, it is a receiver interrupt
 237 0186 3639 00FF 	    move.w  UTX1, %d3
 237      F906 
 238 018c 0803 000F 	    btst.l  #15, %d3                | Check if the 15th bit of UTX1 is 1
 239 0190 6600 0006 	    bne     TRANSMITTER_INTERRUPT
 240 0194 6000 0014 	    bra     UART1_INTERRUPT_END
 241               	
 242               	TRANSMITTER_INTERRUPT:
 243 0198 7200      	    move.l  #0, %d1                 | Move 0 to %d1
 244 019a 4EBA 0032 	    jsr     INTERPUT                | Jump to INTERPUT subroutine
 245 019e 6000 000A 	    bra     UART1_INTERRUPT_END
 246               	RECEIVER_INTERRUPT:
 247 01a2 7200      	    move.l  #0, %d1


 248 01a4 1403      	    move.b  %d3, %d2                | Prepare arguments for INTERGET
 249 01a6 4EBA 0008 	    jsr     INTERGET                | Jump to INTERGET subroutine
 250               	UART1_INTERRUPT_END:
 251 01aa 4CDF 001E 	    movem.l (%sp)+, %d1-%d4
 252 01ae 4E73      	    rte
 253               	
 254               	****************************************************************
 255               	**	INTERGET
 256               	**	Maker: Liu Yiluo, Nam Non
 257               	**  Reviewer: Lee Jiseok
 258               	****************************************************************	
 259               	INTERGET:
 260 01b0 0C81 0000 	    cmpi.l  #0, %d1                     | compare the ch, it should be 0
 260      0000 
 261 01b6 6700 0004 	    beq     INTERGET_INQ
 262 01ba 4E75      	    rts
 263               	
 264               	INTERGET_INQ:
 265 01bc 48E7 E000 	    movem.l	%d0-%d2, -(%sp)
 266 01c0 7000      	    move.l	#0, %d0                     | 0 means the first queue, the reception queue
 267 01c2 1202      	    move.b	%d2, %d1
 268 01c4 4EBA 0162 	    jsr		INPUT_QUEUE                 | jump to the INQ
 269 01c8 4CDF 0007 	    movem.l	(%sp)+, %d0-%d2
 270 01cc 4E75      	    rts
 271               	        
 272               	****************************************************************
 273               	**  INTERPUT
 274               	**	Maker: Lee Jiseok
 275               	**  Reviewer: Liu Yiluo
 276               	****************************************************************	
 277               	INTERPUT:
 278 01ce 48E7 C040 	    movem.l	%d0-%d1/%a1, -(%sp)
 279 01d2 40E7      	    move.w  %sr, -(%sp)
 280 01d4 46FC 2700 	    move.w  #0x2700, %sr	    /* runlevel->7 */
 281 01d8 0C41 0000 	    cmpi	#0, %d1
 282 01dc 6600 0028 	    bne	    INTERPUT_END	    /* ch!=0ならば，何もせずに復帰 */
 283               	INTERPUT_START:
 284 01e0 7001      	    moveq.l	#1, %d0		        /* to use Queue for transmission */
 285 01e2 4EBA 01F6 	    jsr	    OUTPUT_QUEUE	    /* d0:success of fail, d1:que's output */
 286               	
 287 01e6 0C40 0000 	    cmpi	#0, %d0
 288 01ea 6700 0012 	    beq	    INTERPUT_FAIL
 289               	
 290               	INTERPUT_SUCCESS:
 291 01ee 343C 0800 	    move.w	#0x0800, %d2
 292 01f2 1401      	    move.b 	%d1, %d2
 293 01f4 33C2 00FF 	    move.w	%d2, UTX1
 293      F906 
 294 01fa 6000 000A 	    bra     INTERPUT_END
 295               	INTERPUT_FAIL:
 296 01fe 0279 FFF8 	    andi	#0xfff8, USTCNT1	/* if outq failed */
 296      00FF F900 
 297               	INTERPUT_END:
 298 0206 46DF      	    move.w 	(%sp)+, %sr
 299 0208 4CDF 0203 	    movem.l	(%sp)+, %d0-%d1/%a1
 300 020c 4E75      	    rts
 301               	        


 302               	****************************************************************
 303               	**  PUTSTRING
 304               	**	Maker: Liu Yiluo, Champ Loa, Nimrawee Nattapat
 305               	**  Reviewer: Lee Jiseok
 306               	****************************************************************
 307               	PUTSTRING:
 308 020e 0C81 0000 	    cmpi.l	#0, %d1         /*ifch≠0,return without doing anything.*/
 308      0000 
 309 0214 6700 0004 	    beq	PUTSTRING_INIT
 310 0218 4E75      	    rts
 311               	
 312               	PUTSTRING_INIT:
 313 021a 48E7 417E 	    movem.l	%d1/%d7/%a1-%a6, -(%sp)
 314               	    /*sz->0,i->p*/
 315 021e 23FC 0000 	    move.l	#0, size_put        | init
 315      0000 0000 
 315      0000 
 316 0228 2E39 0000 	    move.l	size_put, %d7
 316      0000 
 317 022e 23C2 0000 	    move.l	%d2, ptr_put        | head address p
 317      0000 
 318 0234 0C43 0000 	    cmp		#0, %d3
 319 0238 6700 0002 	    beq		PUTSTRING_LOOP
 320               	    
 321               	PUTSTRING_LOOP:     
 322 023c BE43      	    cmp		%d3, %d7            | sz = size?
 323 023e 6700 002C 	    beq		PUTSTRING_UNMASK
 324               	
 325 0242 7001      	    moveq.l	#1, %d0         /*Execute INQ(1,p[i]) and write in data at the address i into the trans
 326 0244 2C79 0000 	    move.l	ptr_put, %a6
 326      0000 
 327 024a 1216      	    move.b	(%a6), %d1
 328 024c 4EBA 00DA 	    jsr		INPUT_QUEUE
 329 0250 0C40 0000 	    cmp		#0, %d0         /*if it failed or full go to unmask*/
 330 0254 6700 0016 	    beq		PUTSTRING_UNMASK
 331               	    
 332               	    /* sz++,i++ */
 333 0258 5287      	    addq.l	#1, %d7             | update
 334 025a 528E      	    addq.l	#1, %a6             | update
 335 025c 23C7 0000 	    move.l	%d7, size_put
 335      0000 
 336 0262 23CE 0000 	    move.l	%a6, ptr_put
 336      0000 
 337 0268 6000 FFD2 	    bra		PUTSTRING_LOOP
 338               	
 339               	PUTSTRING_UNMASK:
 340 026c 0079 E107 	    ori.w	#0xe107, USTCNT1    /*Permit the transmitter interrupt (unmask) manipulating USTCNT1.*/
 340      00FF F900 
 341 0274 6000 0002 	    bra		PUTSTRING_RETURN
 342               	
 343               	PUTSTRING_RETURN:
 344 0278 2039 0000 	    move.l	size_put, %d0       /*%D0 <-sz*/
 344      0000 
 345 027e 4CDF 7E82 	    movem.l	(%sp)+,	%d1/%d7/%a1-%a6
 346 0282 4E75      	    rts
 347               	
 348               	****************************************************************


 349               	**  GETSTRING
 350               	**	Maker: Liu Yiluo
 351               	**  Reviewer: Lee Jiseok
 352               	****************************************************************
 353               	GETSTRING:
 354 0284 0C81 0000 	    cmpi.l	#0, %d1                             | compare the ch with 0
 354      0000 
 355 028a 6700 0004 	    beq		GETSTRING_INIT
 356 028e 4E75      	    rts
 357               	
 358               	GETSTRING_INIT:
 359 0290 48E7 417E 	    movem.l	%d1/%d7/%a1-%a6, -(%sp)
 360 0294 23FC 0000 	    move.l	#0, size_get                        | init the sz
 360      0000 0000 
 360      0000 
 361 029e 2E39 0000 	    move.l	size_get, %d7
 361      0000 
 362 02a4 23C2 0000 	    move.l	%d2, ptr_get
 362      0000 
 363 02aa 2C79 0000 	    move.l	ptr_get, %a6                        | store the p at a6, the head address
 363      0000 
 364 02b0 6000 0002 	    bra		GETSTRING_LOOP
 365               	
 366               	GETSTRING_LOOP:
 367 02b4 BE43      	    cmp		%d3, %d7                            | compare whether the sz reaches the size
 368 02b6 6700 0026 	    beq		GETSTRING_RETURN
 369               	
 370 02ba 7000      	    moveq.l	#0, %d0                             | 0 is the first queue
 371 02bc 4EBA 011C 	    jsr		OUTPUT_QUEUE
 372 02c0 0C40 0000 	    cmp		#0, %d0                             | to check the output of OUTQ
 373 02c4 6700 0018 	    beq		GETSTRING_RETURN
 374               	    
 375 02c8 1C81      	    move.b	%d1, (%a6)                          | copy the data to the address
 376 02ca 5287      	    addq.l	#1, %d7
 377 02cc 528E      	    addq.l	#1, %a6
 378 02ce 23C7 0000 	    move.l	%d7, size_get                       | update
 378      0000 
 379 02d4 23CE 0000 	    move.l	%a6, ptr_get                        | update
 379      0000 
 380 02da 6000 FFD8 	    bra		GETSTRING_LOOP
 381               	
 382               	GETSTRING_RETURN:
 383 02de 2039 0000 	    move.l	size_get, %d0
 383      0000 
 384 02e4 4CDF 7E82 	    movem.l	(%sp)+,	%d1/%d7/%a1-%a6
 385 02e8 4E75      	    rts
 386               	
 387               	*****************************************************************
 388               	** Queues
 389               	**	Maker: Liu Yiluo, Lee Jiseok
 390               	**  Reviewer: Lee Jiseok, Liu Yiluo
 391               	*****************************************************************
 392               	INIT:
 393 02ea 48E7 0040 	    movem.l	%a1, -(%sp)
 394 02ee 43F9 0000 	    lea.l	top_0, %a1		/*top address is a1*/
 394      0000 
 395 02f4 23C9 0000 	    move.l	%a1, in_0


 395      0000 
 396 02fa 23C9 0000 	    move.l	%a1, out_0
 396      0000 
 397 0300 33FC 0000 	    move.w	#0, s_0
 397      0000 0000 
 398               	
 399 0308 43F9 0000 	    lea.l	top_1, %a1		/*tomove.w %sr, -(%sp)p address is a1*/
 399      0000 
 400 030e 23C9 0000 	    move.l	%a1, in_1
 400      0000 
 401 0314 23C9 0000 	    move.l	%a1, out_1
 401      0000 
 402 031a 33FC 0000 	    move.w	#0, s_1
 402      0000 0000 
 403 0322 4CDF 0200 	    movem.l	(%sp)+, %a1
 404 0326 4E75      	    rts
 405               	
 406               	INPUT_QUEUE:
 407 0328 48E7 1C7E 	    movem.l	%d3-%d5/%a1-%a6,-(%sp)
 408 032c 40C5      	    move.w	%SR, %d5
 409 032e 46FC 2700 	    move.w 	#0x2700, %SR	/*runlevel->7*/
 410               	    
 411               	    /*check the no of the que*/
 412 0332 0C00 0000 	    cmpi.b	#0, %d0
 413 0336 6600 003C 	    bne		INPUT_Q1
 414 033a 6000 0002 	    bra		INPUT_Q0
 415               	
 416               	INPUT_Q0:				/*routine for the Queue no.0*/
 417 033e 43F9 0000 	    lea.l	top_0, %a1		/*top address is a1*/
 417      0000 
 418 0344 45F9 0000 	    lea.l	bottom_0, %a2		/*bottom address is a2*/
 418      0000 
 419 034a 2679 0000 	    move.l 	in_0, %a3		/*pointer in->a3*/
 419      0000 
 420 0350 2879 0000 	    move.l	out_0, %a4		/*pointer out->a4*/
 420      0000 
 421 0356 3639 0000 	    move.w	s_0, %d3		/*s->d3*/
 421      0000 
 422 035c 4EBA 004C 	    jsr		INQ
 423               	
 424               	    /*after the subroutine update the varibles*/
 425 0360 33C3 0000 	    move.w	%d3, s_0
 425      0000 
 426 0366 23CB 0000 	    move.l	%a3, in_0
 426      0000 
 427 036c 46C5      	    move.w	%d5, %SR
 428 036e 4CDF 7E38 	    movem.l	(%sp)+,%d3-%d5/%a1-%a6
 429 0372 4E75      	    rts
 430               	    
 431               	INPUT_Q1:
 432 0374 43F9 0000 	    lea.l	top_1, %a1		/*top address is a1*/
 432      0000 
 433 037a 45F9 0000 	    lea.l	bottom_1, %a2		/*bottom address is a2*/
 433      0000 
 434 0380 2679 0000 	    move.l 	in_1, %a3		/*pointer in->a3*/
 434      0000 
 435 0386 2879 0000 	    move.l	out_1, %a4		/*pointer out->a4*/


 435      0000 
 436 038c 3639 0000 	    move.w	s_1, %d3		/*s->d3*/
 436      0000 
 437 0392 4EBA 0016 	    jsr		INQ
 438               	
 439               	    /*after the subroutine update the varibles*/
 440 0396 33C3 0000 	    move.w	%d3, s_1
 440      0000 
 441 039c 23CB 0000 	    move.l	%a3, in_1
 441      0000 
 442 03a2 46C5      	    move.w	%d5, %SR
 443 03a4 4CDF 7E38 	    movem.l	(%sp)+,%d3-%d5/%a1-%a6
 444 03a8 4E75      	    rts
 445               	
 446               	INQ:
 447 03aa 0C43 0100 	    cmp.w	#256, %d3
 448 03ae 6600 0006 	    bne		INQ_SUCC		/*if s not equals to 256*/
 449 03b2 6000 0022 	    bra		INQ_FAIL		/*if s==256*/
 450               	
 451               	INQ_SUCC:
 452 03b6 1681      	    move.b 	%d1, (%a3)
 453               	
 454 03b8 B6CA      	    cmp		%a2, %a3
 455 03ba 6700 0010 	    beq		INQ_BACK		/*reach the bottom*/
 456 03be 6000 0002 	    bra		INQ_NEXT
 457               	    
 458               	INQ_NEXT:                   | move to the next address
 459 03c2 524B      	    addq	#1, %a3
 460 03c4 0643 0001 	    addi.w	#1, %d3
 461 03c8 7001      	    move.l	#1, %d0
 462 03ca 4E75      	    rts
 463               	
 464               	INQ_BACK:                   | go back to the start of the queue
 465 03cc 0643 0001 	    addi.w	#1, %d3
 466 03d0 2649      	    move.l	%a1, %a3
 467 03d2 7001      	    move.l	#1, %d0
 468 03d4 4E75      	    rts	
 469               	
 470               	INQ_FAIL:
 471 03d6 7000      	    move.l	#0, %d0
 472 03d8 4E75      	    rts
 473               	    
 474               	
 475               	
 476               	
 477               	OUTPUT_QUEUE:
 478 03da 48E7 1C7E 	    movem.l	%d3-%d5/%a1-%a6,-(%sp)
 479 03de 40C5      	    move.w	%SR, %d5
 480 03e0 46FC 2700 	    move.w 	#0x2700, %SR	/*runlevel->7*/
 481 03e4 0C00 0000 	    cmpi.b	#0, %d0			/*check the no of the que*/
 482 03e8 6600 0036 	    bne		OUTPUT_Q1
 483 03ec 6000 0002 	    bra		OUTPUT_Q0
 484               	    
 485               	OUTPUT_Q0:
 486 03f0 43F9 0000 	    lea.l	top_0, %a1		/*top address is a1*/
 486      0000 
 487 03f6 45F9 0000 	    lea.l	bottom_0, %a2		/*bottom address is a2*/


 487      0000 
 488 03fc 2879 0000 	    move.l	out_0, %a4		/*pointer out<-a4*/
 488      0000 
 489 0402 3639 0000 	    move.w	s_0, %d3
 489      0000 
 490 0408 4EBA 0046 	    jsr		OUTQ
 491               	    
 492               	    /*after the subroutine update the varibles*/
 493 040c 33C3 0000 	    move.w	%d3, s_0
 493      0000 
 494 0412 23CC 0000 	    move.l	%a4, out_0
 494      0000 
 495               	    
 496 0418 46C5      	    move.w	%d5, %SR
 497 041a 4CDF 7E38 	    movem.l	(%sp)+,%d3-%d5/%a1-%a6
 498 041e 4E75      	    rts
 499               	
 500               	OUTPUT_Q1:
 501 0420 43F9 0000 	    lea.l	top_1, %a1		/*top address is a1*/
 501      0000 
 502 0426 45F9 0000 	    lea.l	bottom_1, %a2		/*bottom address is a2*/
 502      0000 
 503 042c 2879 0000 	    move.l	out_1, %a4		/*pointer out<-a4*/
 503      0000 
 504 0432 3639 0000 	    move.w	s_1, %d3
 504      0000 
 505 0438 4EBA 0016 	    jsr		OUTQ
 506               	
 507               	    /*after the subroutine update the varibles*/
 508 043c 33C3 0000 	    move.w	%d3, s_1
 508      0000 
 509 0442 23CC 0000 	    move.l	%a4, out_1
 509      0000 
 510               	    
 511 0448 46C5      	    move.w	%d5, %SR
 512 044a 4CDF 7E38 	    movem.l	(%sp)+,%d3-%d5/%a1-%a6
 513 044e 4E75      	    rts
 514               	
 515               	OUTQ:
 516 0450 0C43 0000 	    cmp.w 	#0, %d3
 517 0454 6600 0006 	    bne 	OUTQ_SUCC
 518 0458 6000 0022 	    bra		OUTQ_FAIL
 519               	
 520               	OUTQ_SUCC:
 521 045c 1214      	    move.b	(%a4), %d1
 522               	
 523 045e B8CA      	    cmp		%a2, %a4
 524 0460 6700 0010 	    beq		OUTQ_BACK		/*reach the bottom*/
 525 0464 6000 0002 	    bra		OUTQ_NEXT
 526               	
 527               	OUTQ_NEXT:              | move to the next address
 528 0468 524C      	    addq	#1, %a4
 529 046a 0443 0001 	    subi.w	#1, %d3	
 530 046e 7001      	    move.l	#1, %d0
 531 0470 4E75      	    rts
 532               	
 533               	OUTQ_BACK:              | back to the start address


 534 0472 2849      	    move.l	%a1, %a4
 535 0474 0443 0001 	    subi.w	#1, %d3
 536 0478 7001      	    move.l	#1, %d0
 537 047a 4E75      	    rts	
 538               	
 539               	OUTQ_FAIL:
 540 047c 7000      	    move.l	#0, %d0
 541 047e 4E75      	    rts
 542               	
 543               	.section .data
 544               	    .equ	SIZE_of_QUEUE,	256
 545               	
 546               	.section .bss
 547 4000 0000 0000 	top_0:		.ds.b	SIZE_of_QUEUE-1
 547      0000 0000 
 547      0000 0000 
 547      0000 0000 
 547      0000 0000 
 548 40ff 00        	bottom_0:	.ds.b	1
 549 4100 0000 0000 	in_0:		.ds.l	1
 550 4104 0000 0000 	out_0:		.ds.l	1
 551 4108 0000      	s_0:		.ds.w	1
 552               	
 553 410a 0000 0000 	top_1:		.ds.b	SIZE_of_QUEUE-1
 553      0000 0000 
 553      0000 0000 
 553      0000 0000 
 553      0000 0000 
 554 4209 00        	bottom_1:	.ds.b	1
 555 420a 0000      	s_1:		.ds.w	1
 556 420c 0000 0000 	in_1:		.ds.l	1
 557 4210 0000 0000 	out_1:		.ds.l	1
 558               	
 559 4214 0000 0000 	size_put:	.ds.l	1
 560 4218 0000 0000 	ptr_put:	.ds.l	1
 561 421c 0000 0000 	size_get:	.ds.l	1
 562 4220 0000 0000 	ptr_get:	.ds.l	1
 563               	
 564 4224 0000 0000 	task_p:		.ds.l 1
 565               	            .even
 566               	
 567               	****************************************************************
 568               	**	Data region with an initial value
 569               	****************************************************************
 570               	.section .data
 571 0000 2A2A 2A2A 	TMSG:		.ascii	"******\r\n"
 571      2A2A 0D0A 
 572               	            .even
 573 0008 0000      	TTC:		.dc.w	0
 574               	            .even
 575               	
 576               	****************************************************************
 577               	**	Data region without an initial value
 578               	****************************************************************
 579               	.section .bss
 580 4228 0000 0000 	BUF:		.ds.b	256
 580      0000 0000 


 580      0000 0000 
 580      0000 0000 
 580      0000 0000 
 581               	            .even
 582               	USR_STK:
 583 4328 0000 0000 	            .ds.b	0x4000
 583      0000 0000 
 583      0000 0000 
 583      0000 0000 
 583      0000 0000 
 584               	            .even
 585               	USR_STK_TOP:




   1               	#NO_APP
   2               		.file	"csys68k.c"
   3               		.text
   4               	.Ltext0:
   5               		.cfi_sections	.debug_frame
   6               		.align	2
   7               		.globl	read
   8               		.type	read, @function
   9               	read:
  10               	.LVL0:
  11               	.LFB0:
  12               		.file 1 "csys68k.c"
   1:csys68k.c     **** #include <stdbool.h>
   2:csys68k.c     **** #include <errno.h>
   3:csys68k.c     **** 
   4:csys68k.c     **** extern void outbyte(bool ch, unsigned char c);
   5:csys68k.c     **** extern char inbyte(bool ch);
   6:csys68k.c     **** 
   7:csys68k.c     **** int read(int fd, char *buf, int nbytes)
   8:csys68k.c     **** {
  13               		.loc 1 8 1 view -0
  14               		.cfi_startproc
  15               		.loc 1 8 1 is_stmt 0 view .LVU1
  16 0000 48E7 3C38 		movem.l #15416,-(%sp)
  17               		.cfi_def_cfa_offset 32
  18               		.cfi_offset 2, -32
  19               		.cfi_offset 3, -28
  20               		.cfi_offset 4, -24
  21               		.cfi_offset 5, -20
  22               		.cfi_offset 10, -16
  23               		.cfi_offset 11, -12
  24               		.cfi_offset 12, -8
  25 0004 202F 0020 		move.l 32(%sp),%d0
  26 0008 286F 0024 		move.l 36(%sp),%a4
  27 000c 2A2F 0028 		move.l 40(%sp),%d5
   9:csys68k.c     ****   char c;
  28               		.loc 1 9 3 is_stmt 1 view .LVU2
  10:csys68k.c     ****   int  i;
  29               		.loc 1 10 3 view .LVU3
  11:csys68k.c     ****   int ch;
  30               		.loc 1 11 3 view .LVU4
  12:csys68k.c     **** 
  13:csys68k.c     ****   if (fd == 0 || fd == 1 || fd == 2 || fd == 3) ch = 0;
  31               		.loc 1 13 3 view .LVU5
  32               		.loc 1 13 6 is_stmt 0 view .LVU6
  33 0010 7203      		moveq #3,%d1
  34 0012 B280      		cmp.l %d0,%d1
  35 0014 6452      		jcc .L10
  14:csys68k.c     ****   else if (fd == 4) ch = 1;
  36               		.loc 1 14 8 is_stmt 1 view .LVU7
  37               		.loc 1 14 11 is_stmt 0 view .LVU8
  38 0016 5980      		subq.l #4,%d0
  39 0018 6600 00A0 		jne .L11
  40               		.loc 1 14 24 view .LVU9
  41 001c 7801      		moveq #1,%d4
  42               	.L2:
  43               	.LVL1:


  15:csys68k.c     ****   else return EBADF;
  16:csys68k.c     **** 
  17:csys68k.c     ****   for (i = 0; i < nbytes; i++) {
  44               		.loc 1 17 3 is_stmt 1 view .LVU10
  45               		.loc 1 17 17 view .LVU11
  46               		.loc 1 17 10 is_stmt 0 view .LVU12
  47 001e 7600      		moveq #0,%d3
  48               		.loc 1 17 17 view .LVU13
  49 0020 4A85      		tst.l %d5
  50 0022 6F3C      		jle .L1
  51 0024 47F9 0000 		lea inbyte,%a3
  51      0000 
  52 002a 45F9 0000 		lea outbyte,%a2
  52      0000 
  53               	.LVL2:
  54               	.L9:
  18:csys68k.c     ****     c = inbyte(ch);
  55               		.loc 1 18 5 is_stmt 1 view .LVU14
  56               		.loc 1 18 9 is_stmt 0 view .LVU15
  57 0030 2F04      		move.l %d4,-(%sp)
  58               		.cfi_def_cfa_offset 36
  59 0032 4E93      		jsr (%a3)
  60               	.LVL3:
  61 0034 1400      		move.b %d0,%d2
  62               	.LVL4:
  19:csys68k.c     **** 
  20:csys68k.c     ****     if (c == '\r' || c == '\n'){ /* CR -> CRLF */
  63               		.loc 1 20 5 is_stmt 1 view .LVU16
  64               		.loc 1 20 8 is_stmt 0 view .LVU17
  65 0036 588F      		addq.l #4,%sp
  66               		.cfi_def_cfa_offset 32
  67 0038 0C00 000D 		cmp.b #13,%d0
  68 003c 672E      		jeq .L4
  69               		.loc 1 20 19 discriminator 1 view .LVU18
  70 003e 0C00 000A 		cmp.b #10,%d0
  71 0042 6728      		jeq .L4
  21:csys68k.c     ****       outbyte(ch, '\r');
  22:csys68k.c     ****       outbyte(ch,'\n');
  23:csys68k.c     ****       *(buf + i) = '\n';
  24:csys68k.c     **** 
  25:csys68k.c     ****     /* } else if (c == '\x8'){ */     /* backspace \x8 */
  26:csys68k.c     ****     } else if (c == '\x7f'){      /* backspace \x8 -> \x7f (by terminal config.) */
  72               		.loc 1 26 12 is_stmt 1 view .LVU19
  73               		.loc 1 26 15 is_stmt 0 view .LVU20
  74 0044 0C00 007F 		cmp.b #127,%d0
  75 0048 6746      		jeq .L21
  27:csys68k.c     ****       if (i > 0){
  28:csys68k.c     ****   outbyte(ch, '\x8'); /* bs  */
  29:csys68k.c     ****   outbyte(ch, ' ');   /* spc */
  30:csys68k.c     ****   outbyte(ch, '\x8'); /* bs  */
  31:csys68k.c     ****   i--;
  32:csys68k.c     ****       }
  33:csys68k.c     ****       i--;
  34:csys68k.c     ****       continue;
  35:csys68k.c     **** 
  36:csys68k.c     ****     } else {
  37:csys68k.c     ****       outbyte(ch, c);


  76               		.loc 1 37 7 is_stmt 1 view .LVU21
  77 004a 7000      		moveq #0,%d0
  78               	.LVL5:
  79               		.loc 1 37 7 is_stmt 0 view .LVU22
  80 004c 1002      		move.b %d2,%d0
  81 004e 2F00      		move.l %d0,-(%sp)
  82               		.cfi_def_cfa_offset 36
  83 0050 2F04      		move.l %d4,-(%sp)
  84               		.cfi_def_cfa_offset 40
  85 0052 4E92      		jsr (%a2)
  86               	.LVL6:
  38:csys68k.c     ****       *(buf + i) = c;
  87               		.loc 1 38 7 is_stmt 1 view .LVU23
  88               		.loc 1 38 18 is_stmt 0 view .LVU24
  89 0054 1982 3800 		move.b %d2,(%a4,%d3.l)
  39:csys68k.c     ****     }
  40:csys68k.c     **** 
  41:csys68k.c     ****     if (*(buf + i) == '\n'){
  90               		.loc 1 41 5 is_stmt 1 view .LVU25
  42:csys68k.c     ****       return (i + 1);
  91               		.loc 1 42 17 is_stmt 0 view .LVU26
  92 0058 5283      		addq.l #1,%d3
  93               	.LVL7:
  94               		.loc 1 42 17 view .LVU27
  95 005a 508F      		addq.l #8,%sp
  96               		.cfi_def_cfa_offset 32
  97               	.LVL8:
  17:csys68k.c     ****     c = inbyte(ch);
  98               		.loc 1 17 28 is_stmt 1 view .LVU28
  17:csys68k.c     ****     c = inbyte(ch);
  99               		.loc 1 17 17 view .LVU29
 100 005c BA83      		cmp.l %d3,%d5
 101 005e 6ED0      		jgt .L9
 102               	.LVL9:
 103               	.L1:
  43:csys68k.c     ****     }
  44:csys68k.c     ****   }
  45:csys68k.c     ****   return (i);
  46:csys68k.c     **** 
  47:csys68k.c     **** }
 104               		.loc 1 47 1 is_stmt 0 view .LVU30
 105 0060 2003      		move.l %d3,%d0
 106 0062 4CDF 1C3C 		movem.l (%sp)+,#7228
 107               	.LVL10:
 108               		.loc 1 47 1 view .LVU31
 109 0066 4E75      		rts
 110               	.L10:
  13:csys68k.c     ****   else if (fd == 4) ch = 1;
 111               		.loc 1 13 52 view .LVU32
 112 0068 7800      		moveq #0,%d4
 113 006a 60B2      		jra .L2
 114               	.LVL11:
 115               	.L4:
  21:csys68k.c     ****       outbyte(ch,'\n');
 116               		.loc 1 21 7 is_stmt 1 view .LVU33
 117 006c 4878 000D 		pea 13.w
 118               		.cfi_def_cfa_offset 36


 119 0070 2F04      		move.l %d4,-(%sp)
 120               		.cfi_def_cfa_offset 40
 121 0072 4E92      		jsr (%a2)
 122               	.LVL12:
  22:csys68k.c     ****       *(buf + i) = '\n';
 123               		.loc 1 22 7 view .LVU34
 124 0074 4878 000A 		pea 10.w
 125               		.cfi_def_cfa_offset 44
 126 0078 2F04      		move.l %d4,-(%sp)
 127               		.cfi_def_cfa_offset 48
 128 007a 4E92      		jsr (%a2)
 129               	.LVL13:
  23:csys68k.c     **** 
 130               		.loc 1 23 7 view .LVU35
  23:csys68k.c     **** 
 131               		.loc 1 23 18 is_stmt 0 view .LVU36
 132 007c 19BC 000A 		move.b #10,(%a4,%d3.l)
 132      3800 
  41:csys68k.c     ****       return (i + 1);
 133               		.loc 1 41 5 is_stmt 1 view .LVU37
  42:csys68k.c     ****     }
 134               		.loc 1 42 7 view .LVU38
  42:csys68k.c     ****     }
 135               		.loc 1 42 17 is_stmt 0 view .LVU39
 136 0082 5283      		addq.l #1,%d3
 137               	.LVL14:
  42:csys68k.c     ****     }
 138               		.loc 1 42 17 view .LVU40
 139 0084 4FEF 0010 		lea (16,%sp),%sp
 140               		.cfi_def_cfa_offset 32
 141               		.loc 1 47 1 view .LVU41
 142 0088 2003      		move.l %d3,%d0
 143 008a 4CDF 1C3C 		movem.l (%sp)+,#7228
 144               	.LVL15:
 145               		.loc 1 47 1 view .LVU42
 146 008e 4E75      		rts
 147               	.LVL16:
 148               	.L21:
  27:csys68k.c     ****   outbyte(ch, '\x8'); /* bs  */
 149               		.loc 1 27 7 is_stmt 1 view .LVU43
  27:csys68k.c     ****   outbyte(ch, '\x8'); /* bs  */
 150               		.loc 1 27 10 is_stmt 0 view .LVU44
 151 0090 4A83      		tst.l %d3
 152 0092 679C      		jeq .L9
  31:csys68k.c     ****       }
 153               		.loc 1 31 4 view .LVU45
 154 0094 5383      		subq.l #1,%d3
 155               	.LVL17:
  28:csys68k.c     ****   outbyte(ch, ' ');   /* spc */
 156               		.loc 1 28 3 is_stmt 1 view .LVU46
 157 0096 4878 0008 		pea 8.w
 158               		.cfi_def_cfa_offset 36
 159 009a 2F04      		move.l %d4,-(%sp)
 160               		.cfi_def_cfa_offset 40
 161 009c 4E92      		jsr (%a2)
 162               	.LVL18:
  29:csys68k.c     ****   outbyte(ch, '\x8'); /* bs  */


 163               		.loc 1 29 3 view .LVU47
 164 009e 4878 0020 		pea 32.w
 165               		.cfi_def_cfa_offset 44
 166 00a2 2F04      		move.l %d4,-(%sp)
 167               		.cfi_def_cfa_offset 48
 168 00a4 4E92      		jsr (%a2)
 169               	.LVL19:
  30:csys68k.c     ****   i--;
 170               		.loc 1 30 3 view .LVU48
 171 00a6 4878 0008 		pea 8.w
 172               		.cfi_def_cfa_offset 52
 173 00aa 2F04      		move.l %d4,-(%sp)
 174               		.cfi_def_cfa_offset 56
 175 00ac 4E92      		jsr (%a2)
 176               	.LVL20:
  31:csys68k.c     ****       }
 177               		.loc 1 31 3 view .LVU49
  33:csys68k.c     ****       continue;
 178               		.loc 1 33 7 view .LVU50
  34:csys68k.c     **** 
 179               		.loc 1 34 7 view .LVU51
 180 00ae 4FEF 0018 		lea (24,%sp),%sp
 181               		.cfi_def_cfa_offset 32
 182               	.LVL21:
  17:csys68k.c     ****     c = inbyte(ch);
 183               		.loc 1 17 28 view .LVU52
  17:csys68k.c     ****     c = inbyte(ch);
 184               		.loc 1 17 17 view .LVU53
 185 00b2 BA83      		cmp.l %d3,%d5
 186 00b4 6E00 FF7A 		jgt .L9
 187 00b8 60A6      		jra .L1
 188               	.LVL22:
 189               	.L11:
  15:csys68k.c     **** 
 190               		.loc 1 15 15 is_stmt 0 view .LVU54
 191 00ba 7609      		moveq #9,%d3
 192               		.loc 1 47 1 view .LVU55
 193 00bc 2003      		move.l %d3,%d0
 194 00be 4CDF 1C3C 		movem.l (%sp)+,#7228
 195 00c2 4E75      		rts
 196               		.cfi_endproc
 197               	.LFE0:
 198               		.size	read, .-read
 199               		.align	2
 200               		.globl	write
 201               		.type	write, @function
 202               	write:
 203               	.LVL23:
 204               	.LFB1:
  48:csys68k.c     **** 
  49:csys68k.c     **** 
  50:csys68k.c     **** // fd : 1,2,3 -> PORT0
  51:csys68k.c     **** //      4 -> PORT1
  52:csys68k.c     **** //      other -> EBADF
  53:csys68k.c     **** 
  54:csys68k.c     **** 
  55:csys68k.c     **** int write (int fd, char *buf, int nbytes)


  56:csys68k.c     **** {
 205               		.loc 1 56 1 is_stmt 1 view -0
 206               		.cfi_startproc
 207               		.loc 1 56 1 is_stmt 0 view .LVU57
 208 00c4 48E7 3830 		movem.l #14384,-(%sp)
 209               		.cfi_def_cfa_offset 24
 210               		.cfi_offset 2, -24
 211               		.cfi_offset 3, -20
 212               		.cfi_offset 4, -16
 213               		.cfi_offset 10, -12
 214               		.cfi_offset 11, -8
 215 00c8 202F 0018 		move.l 24(%sp),%d0
 216 00cc 282F 0020 		move.l 32(%sp),%d4
  57:csys68k.c     ****   int ch;
 217               		.loc 1 57 3 is_stmt 1 view .LVU58
  58:csys68k.c     ****   if (fd >= 0 && fd < 4) ch = 0;
 218               		.loc 1 58 3 view .LVU59
 219               		.loc 1 58 6 is_stmt 0 view .LVU60
 220 00d0 7203      		moveq #3,%d1
 221 00d2 B280      		cmp.l %d0,%d1
 222 00d4 643A      		jcc .L29
  59:csys68k.c     ****   else if(fd == 4) ch = 1;
 223               		.loc 1 59 8 is_stmt 1 view .LVU61
 224               		.loc 1 59 10 is_stmt 0 view .LVU62
 225 00d6 5980      		subq.l #4,%d0
 226 00d8 665C      		jne .L30
 227               		.loc 1 59 23 view .LVU63
 228 00da 7401      		moveq #1,%d2
 229               	.L23:
 230               	.LVL24:
  60:csys68k.c     ****   else return EBADF;
  61:csys68k.c     **** 
  62:csys68k.c     ****   int i, j;
 231               		.loc 1 62 3 is_stmt 1 view .LVU64
  63:csys68k.c     ****   for (i = 0; i < nbytes; i++) {
 232               		.loc 1 63 3 view .LVU65
 233               		.loc 1 63 17 view .LVU66
 234 00dc 4A84      		tst.l %d4
 235 00de 6F28      		jle .L28
 236 00e0 246F 001C 		move.l 28(%sp),%a2
 237 00e4 260A      		move.l %a2,%d3
 238 00e6 D684      		add.l %d4,%d3
 239 00e8 47F9 0000 		lea outbyte,%a3
 239      0000 
 240               	.LVL25:
 241               	.L27:
  64:csys68k.c     ****     if (*(buf + i) == '\n') {
 242               		.loc 1 64 5 view .LVU67
 243               		.loc 1 64 9 is_stmt 0 view .LVU68
 244 00ee 121A      		move.b (%a2)+,%d1
 245               	.LVL26:
 246               		.loc 1 64 8 view .LVU69
 247 00f0 0C01 000A 		cmp.b #10,%d1
 248 00f4 671E      		jeq .L34
  65:csys68k.c     ****       outbyte (ch, '\r');          /* LF -> CRLF */
  66:csys68k.c     ****     }
  67:csys68k.c     ****     outbyte (ch, *(buf + i));


 249               		.loc 1 67 5 is_stmt 1 view .LVU70
 250 00f6 0281 0000 		and.l #255,%d1
 250      00FF 
 251 00fc 2F01      		move.l %d1,-(%sp)
 252               		.cfi_def_cfa_offset 28
 253 00fe 2F02      		move.l %d2,-(%sp)
 254               		.cfi_def_cfa_offset 32
 255 0100 4E93      		jsr (%a3)
 256               	.LVL27:
  68:csys68k.c     ****     for (j = 0; j < 300; j++);
 257               		.loc 1 68 5 view .LVU71
 258               		.loc 1 68 19 view .LVU72
  63:csys68k.c     ****     if (*(buf + i) == '\n') {
 259               		.loc 1 63 28 view .LVU73
  63:csys68k.c     ****     if (*(buf + i) == '\n') {
 260               		.loc 1 63 17 view .LVU74
 261 0102 508F      		addq.l #8,%sp
 262               		.cfi_def_cfa_offset 24
 263 0104 B68A      		cmp.l %a2,%d3
 264 0106 66E6      		jne .L27
 265               	.LVL28:
 266               	.L28:
  60:csys68k.c     **** 
 267               		.loc 1 60 15 is_stmt 0 view .LVU75
 268 0108 2004      		move.l %d4,%d0
  69:csys68k.c     ****   }
  70:csys68k.c     ****   return (nbytes);
  71:csys68k.c     **** }
 269               		.loc 1 71 1 view .LVU76
 270 010a 4CDF 0C1C 		movem.l (%sp)+,#3100
 271               	.LVL29:
 272               		.loc 1 71 1 view .LVU77
 273 010e 4E75      		rts
 274               	.L29:
  58:csys68k.c     ****   else if(fd == 4) ch = 1;
 275               		.loc 1 58 29 view .LVU78
 276 0110 7400      		moveq #0,%d2
 277 0112 60C8      		jra .L23
 278               	.LVL30:
 279               	.L34:
  65:csys68k.c     ****     }
 280               		.loc 1 65 7 is_stmt 1 view .LVU79
 281 0114 4878 000D 		pea 13.w
 282               		.cfi_def_cfa_offset 28
 283 0118 2F02      		move.l %d2,-(%sp)
 284               		.cfi_def_cfa_offset 32
 285 011a 4E93      		jsr (%a3)
 286               	.LVL31:
  67:csys68k.c     ****     for (j = 0; j < 300; j++);
 287               		.loc 1 67 18 is_stmt 0 view .LVU80
 288 011c 122A FFFF 		move.b -1(%a2),%d1
 289 0120 508F      		addq.l #8,%sp
 290               		.cfi_def_cfa_offset 24
  67:csys68k.c     ****     for (j = 0; j < 300; j++);
 291               		.loc 1 67 5 is_stmt 1 view .LVU81
 292 0122 0281 0000 		and.l #255,%d1
 292      00FF 


 293 0128 2F01      		move.l %d1,-(%sp)
 294               		.cfi_def_cfa_offset 28
 295 012a 2F02      		move.l %d2,-(%sp)
 296               		.cfi_def_cfa_offset 32
 297 012c 4E93      		jsr (%a3)
 298               	.LVL32:
  68:csys68k.c     ****   }
 299               		.loc 1 68 5 view .LVU82
  68:csys68k.c     ****   }
 300               		.loc 1 68 19 view .LVU83
  63:csys68k.c     ****     if (*(buf + i) == '\n') {
 301               		.loc 1 63 28 view .LVU84
  63:csys68k.c     ****     if (*(buf + i) == '\n') {
 302               		.loc 1 63 17 view .LVU85
 303 012e 508F      		addq.l #8,%sp
 304               		.cfi_def_cfa_offset 24
 305 0130 B68A      		cmp.l %a2,%d3
 306 0132 66BA      		jne .L27
 307 0134 60D2      		jra .L28
 308               	.LVL33:
 309               	.L30:
  60:csys68k.c     **** 
 310               		.loc 1 60 15 is_stmt 0 view .LVU86
 311 0136 7009      		moveq #9,%d0
 312               		.loc 1 71 1 view .LVU87
 313 0138 4CDF 0C1C 		movem.l (%sp)+,#3100
 314 013c 4E75      		rts
 315               		.cfi_endproc
 316               	.LFE1:
 317               		.size	write, .-write
 318               	.Letext0:
 319               		.section	.debug_info,"",@progbits
 320               	.Ldebug_info0:
 321 0000 0000 01F0 		.long	0x1f0
 322 0004 0005      		.word	0x5
 323 0006 01        		.byte	0x1
 324 0007 04        		.byte	0x4
 325 0008 0000 0000 		.long	.Ldebug_abbrev0
 326 000c 07        		.uleb128 0x7
 327 000d 0000 0000 		.long	.LASF13
 328 0011 1D        		.byte	0x1d
 329 0012 0000 0000 		.long	.LASF14
 330 0016 0000 0000 		.long	.LASF15
 331 001a 0000 0000 		.long	.Ltext0
 332 001e 0000 013E 		.long	.Letext0-.Ltext0
 333 0022 0000 0000 		.long	.Ldebug_line0
 334 0026 08        		.uleb128 0x8
 335 0027 04        		.byte	0x4
 336 0028 05        		.byte	0x5
 337 0029 696E 7400 		.string	"int"
 338 002d 01        		.uleb128 0x1
 339 002e 04        		.byte	0x4
 340 002f 05        		.byte	0x5
 341 0030 0000 0000 		.long	.LASF0
 342 0034 01        		.uleb128 0x1
 343 0035 04        		.byte	0x4
 344 0036 07        		.byte	0x7


 345 0037 0000 0000 		.long	.LASF1
 346 003b 01        		.uleb128 0x1
 347 003c 08        		.byte	0x8
 348 003d 05        		.byte	0x5
 349 003e 0000 0000 		.long	.LASF2
 350 0042 01        		.uleb128 0x1
 351 0043 0C        		.byte	0xc
 352 0044 04        		.byte	0x4
 353 0045 0000 0000 		.long	.LASF3
 354 0049 01        		.uleb128 0x1
 355 004a 04        		.byte	0x4
 356 004b 07        		.byte	0x7
 357 004c 0000 0000 		.long	.LASF4
 358 0050 01        		.uleb128 0x1
 359 0051 01        		.byte	0x1
 360 0052 06        		.byte	0x6
 361 0053 0000 0000 		.long	.LASF5
 362 0057 01        		.uleb128 0x1
 363 0058 01        		.byte	0x1
 364 0059 08        		.byte	0x8
 365 005a 0000 0000 		.long	.LASF6
 366 005e 01        		.uleb128 0x1
 367 005f 02        		.byte	0x2
 368 0060 05        		.byte	0x5
 369 0061 0000 0000 		.long	.LASF7
 370 0065 01        		.uleb128 0x1
 371 0066 02        		.byte	0x2
 372 0067 07        		.byte	0x7
 373 0068 0000 0000 		.long	.LASF8
 374 006c 01        		.uleb128 0x1
 375 006d 08        		.byte	0x8
 376 006e 07        		.byte	0x7
 377 006f 0000 0000 		.long	.LASF9
 378 0073 09        		.uleb128 0x9
 379 0074 04        		.byte	0x4
 380 0075 0000 0079 		.long	0x79
 381 0079 01        		.uleb128 0x1
 382 007a 01        		.byte	0x1
 383 007b 06        		.byte	0x6
 384 007c 0000 0000 		.long	.LASF10
 385 0080 0A        		.uleb128 0xa
 386 0081 0000 0000 		.long	.LASF16
 387 0085 01        		.byte	0x1
 388 0086 04        		.byte	0x4
 389 0087 0D        		.byte	0xd
 390 0088 0000 0097 		.long	0x97
 391 008c 05        		.uleb128 0x5
 392 008d 0000 0097 		.long	0x97
 393 0091 05        		.uleb128 0x5
 394 0092 0000 0057 		.long	0x57
 395 0096 00        		.byte	0
 396 0097 01        		.uleb128 0x1
 397 0098 01        		.byte	0x1
 398 0099 02        		.byte	0x2
 399 009a 0000 0000 		.long	.LASF11
 400 009e 0B        		.uleb128 0xb
 401 009f 0000 0000 		.long	.LASF17


 402 00a3 01        		.byte	0x1
 403 00a4 05        		.byte	0x5
 404 00a5 0D        		.byte	0xd
 405 00a6 0000 0079 		.long	0x79
 406 00aa 0000 00B4 		.long	0xb4
 407 00ae 05        		.uleb128 0x5
 408 00af 0000 0097 		.long	0x97
 409 00b3 00        		.byte	0
 410 00b4 0C        		.uleb128 0xc
 411 00b5 0000 0000 		.long	.LASF18
 412 00b9 01        		.byte	0x1
 413 00ba 37        		.byte	0x37
 414 00bb 05        		.byte	0x5
 415 00bc 0000 0026 		.long	0x26
 416 00c0 0000 0000 		.long	.LFB1
 417 00c4 0000 007A 		.long	.LFE1-.LFB1
 418 00c8 01        		.uleb128 0x1
 419 00c9 9C        		.byte	0x9c
 420 00ca 0000 0140 		.long	0x140
 421 00ce 04        		.uleb128 0x4
 422 00cf 6664 00   		.string	"fd"
 423 00d2 37        		.byte	0x37
 424 00d3 10        		.byte	0x10
 425 00d4 0000 0026 		.long	0x26
 426 00d8 02        		.uleb128 0x2
 427 00d9 91        		.byte	0x91
 428 00da 00        		.sleb128 0
 429 00db 04        		.uleb128 0x4
 430 00dc 6275 6600 		.string	"buf"
 431 00e0 37        		.byte	0x37
 432 00e1 1A        		.byte	0x1a
 433 00e2 0000 0073 		.long	0x73
 434 00e6 02        		.uleb128 0x2
 435 00e7 91        		.byte	0x91
 436 00e8 04        		.sleb128 4
 437 00e9 06        		.uleb128 0x6
 438 00ea 0000 0000 		.long	.LASF12
 439 00ee 37        		.byte	0x37
 440 00ef 23        		.byte	0x23
 441 00f0 0000 0026 		.long	0x26
 442 00f4 02        		.uleb128 0x2
 443 00f5 91        		.byte	0x91
 444 00f6 08        		.sleb128 8
 445 00f7 03        		.uleb128 0x3
 446 00f8 6368 00   		.string	"ch"
 447 00fb 39        		.byte	0x39
 448 00fc 07        		.byte	0x7
 449 00fd 0000 0026 		.long	0x26
 450 0101 0000 0000 		.long	.LLST3
 451 0105 0000 0000 		.long	.LVUS3
 452 0109 03        		.uleb128 0x3
 453 010a 6900      		.string	"i"
 454 010c 3E        		.byte	0x3e
 455 010d 07        		.byte	0x7
 456 010e 0000 0026 		.long	0x26
 457 0112 0000 0000 		.long	.LLST4
 458 0116 0000 0000 		.long	.LVUS4


 459 011a 0D        		.uleb128 0xd
 460 011b 6A00      		.string	"j"
 461 011d 01        		.byte	0x1
 462 011e 3E        		.byte	0x3e
 463 011f 0A        		.byte	0xa
 464 0120 0000 0026 		.long	0x26
 465 0124 02        		.uleb128 0x2
 466 0125 0000 0000 		.long	.LVL27
 467 0129 0000 0080 		.long	0x80
 468 012d 02        		.uleb128 0x2
 469 012e 0000 0000 		.long	.LVL31
 470 0132 0000 0080 		.long	0x80
 471 0136 02        		.uleb128 0x2
 472 0137 0000 0000 		.long	.LVL32
 473 013b 0000 0080 		.long	0x80
 474 013f 00        		.byte	0
 475 0140 0E        		.uleb128 0xe
 476 0141 0000 0000 		.long	.LASF19
 477 0145 01        		.byte	0x1
 478 0146 07        		.byte	0x7
 479 0147 05        		.byte	0x5
 480 0148 0000 0026 		.long	0x26
 481 014c 0000 0000 		.long	.LFB0
 482 0150 0000 00C4 		.long	.LFE0-.LFB0
 483 0154 01        		.uleb128 0x1
 484 0155 9C        		.byte	0x9c
 485 0156 04        		.uleb128 0x4
 486 0157 6664 00   		.string	"fd"
 487 015a 07        		.byte	0x7
 488 015b 0E        		.byte	0xe
 489 015c 0000 0026 		.long	0x26
 490 0160 02        		.uleb128 0x2
 491 0161 91        		.byte	0x91
 492 0162 00        		.sleb128 0
 493 0163 04        		.uleb128 0x4
 494 0164 6275 6600 		.string	"buf"
 495 0168 07        		.byte	0x7
 496 0169 18        		.byte	0x18
 497 016a 0000 0073 		.long	0x73
 498 016e 02        		.uleb128 0x2
 499 016f 91        		.byte	0x91
 500 0170 04        		.sleb128 4
 501 0171 06        		.uleb128 0x6
 502 0172 0000 0000 		.long	.LASF12
 503 0176 07        		.byte	0x7
 504 0177 21        		.byte	0x21
 505 0178 0000 0026 		.long	0x26
 506 017c 02        		.uleb128 0x2
 507 017d 91        		.byte	0x91
 508 017e 08        		.sleb128 8
 509 017f 03        		.uleb128 0x3
 510 0180 6300      		.string	"c"
 511 0182 09        		.byte	0x9
 512 0183 08        		.byte	0x8
 513 0184 0000 0079 		.long	0x79
 514 0188 0000 0000 		.long	.LLST0
 515 018c 0000 0000 		.long	.LVUS0


 516 0190 03        		.uleb128 0x3
 517 0191 6900      		.string	"i"
 518 0193 0A        		.byte	0xa
 519 0194 08        		.byte	0x8
 520 0195 0000 0026 		.long	0x26
 521 0199 0000 0000 		.long	.LLST1
 522 019d 0000 0000 		.long	.LVUS1
 523 01a1 03        		.uleb128 0x3
 524 01a2 6368 00   		.string	"ch"
 525 01a5 0B        		.byte	0xb
 526 01a6 07        		.byte	0x7
 527 01a7 0000 0026 		.long	0x26
 528 01ab 0000 0000 		.long	.LLST2
 529 01af 0000 0000 		.long	.LVUS2
 530 01b3 02        		.uleb128 0x2
 531 01b4 0000 0000 		.long	.LVL3
 532 01b8 0000 009E 		.long	0x9e
 533 01bc 02        		.uleb128 0x2
 534 01bd 0000 0000 		.long	.LVL6
 535 01c1 0000 0080 		.long	0x80
 536 01c5 02        		.uleb128 0x2
 537 01c6 0000 0000 		.long	.LVL12
 538 01ca 0000 0080 		.long	0x80
 539 01ce 02        		.uleb128 0x2
 540 01cf 0000 0000 		.long	.LVL13
 541 01d3 0000 0080 		.long	0x80
 542 01d7 02        		.uleb128 0x2
 543 01d8 0000 0000 		.long	.LVL18
 544 01dc 0000 0080 		.long	0x80
 545 01e0 02        		.uleb128 0x2
 546 01e1 0000 0000 		.long	.LVL19
 547 01e5 0000 0080 		.long	0x80
 548 01e9 02        		.uleb128 0x2
 549 01ea 0000 0000 		.long	.LVL20
 550 01ee 0000 0080 		.long	0x80
 551 01f2 00        		.byte	0
 552 01f3 00        		.byte	0
 553               		.section	.debug_abbrev,"",@progbits
 554               	.Ldebug_abbrev0:
 555 0000 01        		.uleb128 0x1
 556 0001 24        		.uleb128 0x24
 557 0002 00        		.byte	0
 558 0003 0B        		.uleb128 0xb
 559 0004 0B        		.uleb128 0xb
 560 0005 3E        		.uleb128 0x3e
 561 0006 0B        		.uleb128 0xb
 562 0007 03        		.uleb128 0x3
 563 0008 0E        		.uleb128 0xe
 564 0009 00        		.byte	0
 565 000a 00        		.byte	0
 566 000b 02        		.uleb128 0x2
 567 000c 48        		.uleb128 0x48
 568 000d 00        		.byte	0
 569 000e 7D        		.uleb128 0x7d
 570 000f 01        		.uleb128 0x1
 571 0010 7F        		.uleb128 0x7f
 572 0011 13        		.uleb128 0x13


 573 0012 00        		.byte	0
 574 0013 00        		.byte	0
 575 0014 03        		.uleb128 0x3
 576 0015 34        		.uleb128 0x34
 577 0016 00        		.byte	0
 578 0017 03        		.uleb128 0x3
 579 0018 08        		.uleb128 0x8
 580 0019 3A        		.uleb128 0x3a
 581 001a 21        		.uleb128 0x21
 582 001b 01        		.sleb128 1
 583 001c 3B        		.uleb128 0x3b
 584 001d 0B        		.uleb128 0xb
 585 001e 39        		.uleb128 0x39
 586 001f 0B        		.uleb128 0xb
 587 0020 49        		.uleb128 0x49
 588 0021 13        		.uleb128 0x13
 589 0022 02        		.uleb128 0x2
 590 0023 17        		.uleb128 0x17
 591 0024 B742      		.uleb128 0x2137
 592 0026 17        		.uleb128 0x17
 593 0027 00        		.byte	0
 594 0028 00        		.byte	0
 595 0029 04        		.uleb128 0x4
 596 002a 05        		.uleb128 0x5
 597 002b 00        		.byte	0
 598 002c 03        		.uleb128 0x3
 599 002d 08        		.uleb128 0x8
 600 002e 3A        		.uleb128 0x3a
 601 002f 21        		.uleb128 0x21
 602 0030 01        		.sleb128 1
 603 0031 3B        		.uleb128 0x3b
 604 0032 0B        		.uleb128 0xb
 605 0033 39        		.uleb128 0x39
 606 0034 0B        		.uleb128 0xb
 607 0035 49        		.uleb128 0x49
 608 0036 13        		.uleb128 0x13
 609 0037 02        		.uleb128 0x2
 610 0038 18        		.uleb128 0x18
 611 0039 00        		.byte	0
 612 003a 00        		.byte	0
 613 003b 05        		.uleb128 0x5
 614 003c 05        		.uleb128 0x5
 615 003d 00        		.byte	0
 616 003e 49        		.uleb128 0x49
 617 003f 13        		.uleb128 0x13
 618 0040 00        		.byte	0
 619 0041 00        		.byte	0
 620 0042 06        		.uleb128 0x6
 621 0043 05        		.uleb128 0x5
 622 0044 00        		.byte	0
 623 0045 03        		.uleb128 0x3
 624 0046 0E        		.uleb128 0xe
 625 0047 3A        		.uleb128 0x3a
 626 0048 21        		.uleb128 0x21
 627 0049 01        		.sleb128 1
 628 004a 3B        		.uleb128 0x3b
 629 004b 0B        		.uleb128 0xb


 630 004c 39        		.uleb128 0x39
 631 004d 0B        		.uleb128 0xb
 632 004e 49        		.uleb128 0x49
 633 004f 13        		.uleb128 0x13
 634 0050 02        		.uleb128 0x2
 635 0051 18        		.uleb128 0x18
 636 0052 00        		.byte	0
 637 0053 00        		.byte	0
 638 0054 07        		.uleb128 0x7
 639 0055 11        		.uleb128 0x11
 640 0056 01        		.byte	0x1
 641 0057 25        		.uleb128 0x25
 642 0058 0E        		.uleb128 0xe
 643 0059 13        		.uleb128 0x13
 644 005a 0B        		.uleb128 0xb
 645 005b 03        		.uleb128 0x3
 646 005c 0E        		.uleb128 0xe
 647 005d 1B        		.uleb128 0x1b
 648 005e 0E        		.uleb128 0xe
 649 005f 11        		.uleb128 0x11
 650 0060 01        		.uleb128 0x1
 651 0061 12        		.uleb128 0x12
 652 0062 06        		.uleb128 0x6
 653 0063 10        		.uleb128 0x10
 654 0064 17        		.uleb128 0x17
 655 0065 00        		.byte	0
 656 0066 00        		.byte	0
 657 0067 08        		.uleb128 0x8
 658 0068 24        		.uleb128 0x24
 659 0069 00        		.byte	0
 660 006a 0B        		.uleb128 0xb
 661 006b 0B        		.uleb128 0xb
 662 006c 3E        		.uleb128 0x3e
 663 006d 0B        		.uleb128 0xb
 664 006e 03        		.uleb128 0x3
 665 006f 08        		.uleb128 0x8
 666 0070 00        		.byte	0
 667 0071 00        		.byte	0
 668 0072 09        		.uleb128 0x9
 669 0073 0F        		.uleb128 0xf
 670 0074 00        		.byte	0
 671 0075 0B        		.uleb128 0xb
 672 0076 0B        		.uleb128 0xb
 673 0077 49        		.uleb128 0x49
 674 0078 13        		.uleb128 0x13
 675 0079 00        		.byte	0
 676 007a 00        		.byte	0
 677 007b 0A        		.uleb128 0xa
 678 007c 2E        		.uleb128 0x2e
 679 007d 01        		.byte	0x1
 680 007e 3F        		.uleb128 0x3f
 681 007f 19        		.uleb128 0x19
 682 0080 03        		.uleb128 0x3
 683 0081 0E        		.uleb128 0xe
 684 0082 3A        		.uleb128 0x3a
 685 0083 0B        		.uleb128 0xb
 686 0084 3B        		.uleb128 0x3b


 687 0085 0B        		.uleb128 0xb
 688 0086 39        		.uleb128 0x39
 689 0087 0B        		.uleb128 0xb
 690 0088 27        		.uleb128 0x27
 691 0089 19        		.uleb128 0x19
 692 008a 3C        		.uleb128 0x3c
 693 008b 19        		.uleb128 0x19
 694 008c 01        		.uleb128 0x1
 695 008d 13        		.uleb128 0x13
 696 008e 00        		.byte	0
 697 008f 00        		.byte	0
 698 0090 0B        		.uleb128 0xb
 699 0091 2E        		.uleb128 0x2e
 700 0092 01        		.byte	0x1
 701 0093 3F        		.uleb128 0x3f
 702 0094 19        		.uleb128 0x19
 703 0095 03        		.uleb128 0x3
 704 0096 0E        		.uleb128 0xe
 705 0097 3A        		.uleb128 0x3a
 706 0098 0B        		.uleb128 0xb
 707 0099 3B        		.uleb128 0x3b
 708 009a 0B        		.uleb128 0xb
 709 009b 39        		.uleb128 0x39
 710 009c 0B        		.uleb128 0xb
 711 009d 27        		.uleb128 0x27
 712 009e 19        		.uleb128 0x19
 713 009f 49        		.uleb128 0x49
 714 00a0 13        		.uleb128 0x13
 715 00a1 3C        		.uleb128 0x3c
 716 00a2 19        		.uleb128 0x19
 717 00a3 01        		.uleb128 0x1
 718 00a4 13        		.uleb128 0x13
 719 00a5 00        		.byte	0
 720 00a6 00        		.byte	0
 721 00a7 0C        		.uleb128 0xc
 722 00a8 2E        		.uleb128 0x2e
 723 00a9 01        		.byte	0x1
 724 00aa 3F        		.uleb128 0x3f
 725 00ab 19        		.uleb128 0x19
 726 00ac 03        		.uleb128 0x3
 727 00ad 0E        		.uleb128 0xe
 728 00ae 3A        		.uleb128 0x3a
 729 00af 0B        		.uleb128 0xb
 730 00b0 3B        		.uleb128 0x3b
 731 00b1 0B        		.uleb128 0xb
 732 00b2 39        		.uleb128 0x39
 733 00b3 0B        		.uleb128 0xb
 734 00b4 27        		.uleb128 0x27
 735 00b5 19        		.uleb128 0x19
 736 00b6 49        		.uleb128 0x49
 737 00b7 13        		.uleb128 0x13
 738 00b8 11        		.uleb128 0x11
 739 00b9 01        		.uleb128 0x1
 740 00ba 12        		.uleb128 0x12
 741 00bb 06        		.uleb128 0x6
 742 00bc 40        		.uleb128 0x40
 743 00bd 18        		.uleb128 0x18


 744 00be 7A        		.uleb128 0x7a
 745 00bf 19        		.uleb128 0x19
 746 00c0 01        		.uleb128 0x1
 747 00c1 13        		.uleb128 0x13
 748 00c2 00        		.byte	0
 749 00c3 00        		.byte	0
 750 00c4 0D        		.uleb128 0xd
 751 00c5 34        		.uleb128 0x34
 752 00c6 00        		.byte	0
 753 00c7 03        		.uleb128 0x3
 754 00c8 08        		.uleb128 0x8
 755 00c9 3A        		.uleb128 0x3a
 756 00ca 0B        		.uleb128 0xb
 757 00cb 3B        		.uleb128 0x3b
 758 00cc 0B        		.uleb128 0xb
 759 00cd 39        		.uleb128 0x39
 760 00ce 0B        		.uleb128 0xb
 761 00cf 49        		.uleb128 0x49
 762 00d0 13        		.uleb128 0x13
 763 00d1 00        		.byte	0
 764 00d2 00        		.byte	0
 765 00d3 0E        		.uleb128 0xe
 766 00d4 2E        		.uleb128 0x2e
 767 00d5 01        		.byte	0x1
 768 00d6 3F        		.uleb128 0x3f
 769 00d7 19        		.uleb128 0x19
 770 00d8 03        		.uleb128 0x3
 771 00d9 0E        		.uleb128 0xe
 772 00da 3A        		.uleb128 0x3a
 773 00db 0B        		.uleb128 0xb
 774 00dc 3B        		.uleb128 0x3b
 775 00dd 0B        		.uleb128 0xb
 776 00de 39        		.uleb128 0x39
 777 00df 0B        		.uleb128 0xb
 778 00e0 27        		.uleb128 0x27
 779 00e1 19        		.uleb128 0x19
 780 00e2 49        		.uleb128 0x49
 781 00e3 13        		.uleb128 0x13
 782 00e4 11        		.uleb128 0x11
 783 00e5 01        		.uleb128 0x1
 784 00e6 12        		.uleb128 0x12
 785 00e7 06        		.uleb128 0x6
 786 00e8 40        		.uleb128 0x40
 787 00e9 18        		.uleb128 0x18
 788 00ea 7A        		.uleb128 0x7a
 789 00eb 19        		.uleb128 0x19
 790 00ec 00        		.byte	0
 791 00ed 00        		.byte	0
 792 00ee 00        		.byte	0
 793               		.section	.debug_loclists,"",@progbits
 794 0000 0000 011B 		.long	.Ldebug_loc3-.Ldebug_loc2
 795               	.Ldebug_loc2:
 796 0004 0005      		.word	0x5
 797 0006 04        		.byte	0x4
 798 0007 00        		.byte	0
 799 0008 0000 0000 		.long	0
 800               	.Ldebug_loc0:


 801               	.LVUS3:
 802 000c 00        		.uleb128 .LVU64
 803 000d 00        		.uleb128 .LVU77
 804 000e 00        		.uleb128 .LVU79
 805 000f 00        		.uleb128 .LVU86
 806               	.LLST3:
 807 0010 04        		.byte	0x4
 808 0011 DC01      		.uleb128 .LVL24-.Ltext0
 809 0013 8E02      		.uleb128 .LVL29-.Ltext0
 810 0015 01        		.uleb128 0x1
 811 0016 52        		.byte	0x52
 812 0017 04        		.byte	0x4
 813 0018 9402      		.uleb128 .LVL30-.Ltext0
 814 001a B602      		.uleb128 .LVL33-.Ltext0
 815 001c 01        		.uleb128 0x1
 816 001d 52        		.byte	0x52
 817 001e 00        		.byte	0
 818               	.LVUS4:
 819 001f 02        		.uleb128 .LVU66
 820 0020 00        		.uleb128 .LVU67
 821 0021 00        		.uleb128 .LVU67
 822 0022 00        		.uleb128 .LVU69
 823 0023 00        		.uleb128 .LVU69
 824 0024 03        		.uleb128 .LVU74
 825 0025 03        		.uleb128 .LVU74
 826 0026 00        		.uleb128 .LVU75
 827 0027 00        		.uleb128 .LVU79
 828 0028 03        		.uleb128 .LVU85
 829 0029 03        		.uleb128 .LVU85
 830 002a 00        		.uleb128 .LVU86
 831               	.LLST4:
 832 002b 04        		.byte	0x4
 833 002c DC01      		.uleb128 .LVL24-.Ltext0
 834 002e EE01      		.uleb128 .LVL25-.Ltext0
 835 0030 02        		.uleb128 0x2
 836 0031 30        		.byte	0x30
 837 0032 9F        		.byte	0x9f
 838 0033 04        		.byte	0x4
 839 0034 EE01      		.uleb128 .LVL25-.Ltext0
 840 0036 F001      		.uleb128 .LVL26-.Ltext0
 841 0038 07        		.uleb128 0x7
 842 0039 7A        		.byte	0x7a
 843 003a 00        		.sleb128 0
 844 003b 91        		.byte	0x91
 845 003c 74        		.sleb128 -12
 846 003d 06        		.byte	0x6
 847 003e 1C        		.byte	0x1c
 848 003f 9F        		.byte	0x9f
 849 0040 04        		.byte	0x4
 850 0041 F001      		.uleb128 .LVL26-.Ltext0
 851 0043 8202      		.uleb128 .LVL27-.Ltext0
 852 0045 08        		.uleb128 0x8
 853 0046 91        		.byte	0x91
 854 0047 74        		.sleb128 -12
 855 0048 06        		.byte	0x6
 856 0049 20        		.byte	0x20
 857 004a 7A        		.byte	0x7a


 858 004b 00        		.sleb128 0
 859 004c 22        		.byte	0x22
 860 004d 9F        		.byte	0x9f
 861 004e 04        		.byte	0x4
 862 004f 8202      		.uleb128 .LVL27-.Ltext0
 863 0051 8802      		.uleb128 .LVL28-.Ltext0
 864 0053 07        		.uleb128 0x7
 865 0054 7A        		.byte	0x7a
 866 0055 00        		.sleb128 0
 867 0056 91        		.byte	0x91
 868 0057 74        		.sleb128 -12
 869 0058 06        		.byte	0x6
 870 0059 1C        		.byte	0x1c
 871 005a 9F        		.byte	0x9f
 872 005b 04        		.byte	0x4
 873 005c 9402      		.uleb128 .LVL30-.Ltext0
 874 005e AE02      		.uleb128 .LVL32-.Ltext0
 875 0060 08        		.uleb128 0x8
 876 0061 91        		.byte	0x91
 877 0062 74        		.sleb128 -12
 878 0063 06        		.byte	0x6
 879 0064 20        		.byte	0x20
 880 0065 7A        		.byte	0x7a
 881 0066 00        		.sleb128 0
 882 0067 22        		.byte	0x22
 883 0068 9F        		.byte	0x9f
 884 0069 04        		.byte	0x4
 885 006a AE02      		.uleb128 .LVL32-.Ltext0
 886 006c B602      		.uleb128 .LVL33-.Ltext0
 887 006e 07        		.uleb128 0x7
 888 006f 7A        		.byte	0x7a
 889 0070 00        		.sleb128 0
 890 0071 91        		.byte	0x91
 891 0072 74        		.sleb128 -12
 892 0073 06        		.byte	0x6
 893 0074 1C        		.byte	0x1c
 894 0075 9F        		.byte	0x9f
 895 0076 00        		.byte	0
 896               	.LVUS0:
 897 0077 00        		.uleb128 .LVU16
 898 0078 00        		.uleb128 .LVU22
 899 0079 00        		.uleb128 .LVU22
 900 007a 00        		.uleb128 .LVU30
 901 007b 00        		.uleb128 .LVU33
 902 007c 00        		.uleb128 .LVU34
 903 007d 00        		.uleb128 .LVU34
 904 007e 00        		.uleb128 .LVU42
 905 007f 00        		.uleb128 .LVU43
 906 0080 00        		.uleb128 .LVU47
 907 0081 00        		.uleb128 .LVU47
 908 0082 00        		.uleb128 .LVU54
 909               	.LLST0:
 910 0083 04        		.byte	0x4
 911 0084 36        		.uleb128 .LVL4-.Ltext0
 912 0085 4C        		.uleb128 .LVL5-.Ltext0
 913 0086 01        		.uleb128 0x1
 914 0087 50        		.byte	0x50


 915 0088 04        		.byte	0x4
 916 0089 4C        		.uleb128 .LVL5-.Ltext0
 917 008a 60        		.uleb128 .LVL9-.Ltext0
 918 008b 01        		.uleb128 0x1
 919 008c 52        		.byte	0x52
 920 008d 04        		.byte	0x4
 921 008e 6C        		.uleb128 .LVL11-.Ltext0
 922 008f 73        		.uleb128 .LVL12-1-.Ltext0
 923 0090 01        		.uleb128 0x1
 924 0091 50        		.byte	0x50
 925 0092 04        		.byte	0x4
 926 0093 73        		.uleb128 .LVL12-1-.Ltext0
 927 0094 8E01      		.uleb128 .LVL15-.Ltext0
 928 0096 01        		.uleb128 0x1
 929 0097 52        		.byte	0x52
 930 0098 04        		.byte	0x4
 931 0099 9001      		.uleb128 .LVL16-.Ltext0
 932 009b 9D01      		.uleb128 .LVL18-1-.Ltext0
 933 009d 01        		.uleb128 0x1
 934 009e 50        		.byte	0x50
 935 009f 04        		.byte	0x4
 936 00a0 9D01      		.uleb128 .LVL18-1-.Ltext0
 937 00a2 BA01      		.uleb128 .LVL22-.Ltext0
 938 00a4 01        		.uleb128 0x1
 939 00a5 52        		.byte	0x52
 940 00a6 00        		.byte	0
 941               	.LVUS1:
 942 00a7 01        		.uleb128 .LVU11
 943 00a8 00        		.uleb128 .LVU14
 944 00a9 00        		.uleb128 .LVU14
 945 00aa 00        		.uleb128 .LVU27
 946 00ab 00        		.uleb128 .LVU27
 947 00ac 00        		.uleb128 .LVU28
 948 00ad 00        		.uleb128 .LVU33
 949 00ae 00        		.uleb128 .LVU40
 950 00af 00        		.uleb128 .LVU40
 951 00b0 00        		.uleb128 .LVU42
 952 00b1 00        		.uleb128 .LVU42
 953 00b2 00        		.uleb128 .LVU43
 954 00b3 00        		.uleb128 .LVU43
 955 00b4 00        		.uleb128 .LVU46
 956 00b5 00        		.uleb128 .LVU46
 957 00b6 01        		.uleb128 .LVU50
 958 00b7 01        		.uleb128 .LVU50
 959 00b8 02        		.uleb128 .LVU51
 960 00b9 02        		.uleb128 .LVU51
 961 00ba 00        		.uleb128 .LVU52
 962               	.LLST1:
 963 00bb 04        		.byte	0x4
 964 00bc 1E        		.uleb128 .LVL1-.Ltext0
 965 00bd 30        		.uleb128 .LVL2-.Ltext0
 966 00be 02        		.uleb128 0x2
 967 00bf 30        		.byte	0x30
 968 00c0 9F        		.byte	0x9f
 969 00c1 04        		.byte	0x4
 970 00c2 30        		.uleb128 .LVL2-.Ltext0
 971 00c3 5A        		.uleb128 .LVL7-.Ltext0


 972 00c4 01        		.uleb128 0x1
 973 00c5 53        		.byte	0x53
 974 00c6 04        		.byte	0x4
 975 00c7 5A        		.uleb128 .LVL7-.Ltext0
 976 00c8 5C        		.uleb128 .LVL8-.Ltext0
 977 00c9 03        		.uleb128 0x3
 978 00ca 73        		.byte	0x73
 979 00cb 7F        		.sleb128 -1
 980 00cc 9F        		.byte	0x9f
 981 00cd 04        		.byte	0x4
 982 00ce 6C        		.uleb128 .LVL11-.Ltext0
 983 00cf 8401      		.uleb128 .LVL14-.Ltext0
 984 00d1 01        		.uleb128 0x1
 985 00d2 53        		.byte	0x53
 986 00d3 04        		.byte	0x4
 987 00d4 8401      		.uleb128 .LVL14-.Ltext0
 988 00d6 8E01      		.uleb128 .LVL15-.Ltext0
 989 00d8 03        		.uleb128 0x3
 990 00d9 73        		.byte	0x73
 991 00da 7F        		.sleb128 -1
 992 00db 9F        		.byte	0x9f
 993 00dc 04        		.byte	0x4
 994 00dd 8E01      		.uleb128 .LVL15-.Ltext0
 995 00df 9001      		.uleb128 .LVL16-.Ltext0
 996 00e1 03        		.uleb128 0x3
 997 00e2 70        		.byte	0x70
 998 00e3 7F        		.sleb128 -1
 999 00e4 9F        		.byte	0x9f
 1000 00e5 04        		.byte	0x4
 1001 00e6 9001      		.uleb128 .LVL16-.Ltext0
 1002 00e8 9601      		.uleb128 .LVL17-.Ltext0
 1003 00ea 01        		.uleb128 0x1
 1004 00eb 53        		.byte	0x53
 1005 00ec 04        		.byte	0x4
 1006 00ed 9601      		.uleb128 .LVL17-.Ltext0
 1007 00ef AE01      		.uleb128 .LVL20-.Ltext0
 1008 00f1 03        		.uleb128 0x3
 1009 00f2 73        		.byte	0x73
 1010 00f3 01        		.sleb128 1
 1011 00f4 9F        		.byte	0x9f
 1012 00f5 04        		.byte	0x4
 1013 00f6 AE01      		.uleb128 .LVL20-.Ltext0
 1014 00f8 AE01      		.uleb128 .LVL20-.Ltext0
 1015 00fa 01        		.uleb128 0x1
 1016 00fb 53        		.byte	0x53
 1017 00fc 04        		.byte	0x4
 1018 00fd AE01      		.uleb128 .LVL20-.Ltext0
 1019 00ff B201      		.uleb128 .LVL21-.Ltext0
 1020 0101 03        		.uleb128 0x3
 1021 0102 73        		.byte	0x73
 1022 0103 7F        		.sleb128 -1
 1023 0104 9F        		.byte	0x9f
 1024 0105 00        		.byte	0
 1025               	.LVUS2:
 1026 0106 00        		.uleb128 .LVU10
 1027 0107 00        		.uleb128 .LVU31
 1028 0108 00        		.uleb128 .LVU33


 1029 0109 00        		.uleb128 .LVU42
 1030 010a 00        		.uleb128 .LVU43
 1031 010b 00        		.uleb128 .LVU54
 1032               	.LLST2:
 1033 010c 04        		.byte	0x4
 1034 010d 1E        		.uleb128 .LVL1-.Ltext0
 1035 010e 66        		.uleb128 .LVL10-.Ltext0
 1036 010f 01        		.uleb128 0x1
 1037 0110 54        		.byte	0x54
 1038 0111 04        		.byte	0x4
 1039 0112 6C        		.uleb128 .LVL11-.Ltext0
 1040 0113 8E01      		.uleb128 .LVL15-.Ltext0
 1041 0115 01        		.uleb128 0x1
 1042 0116 54        		.byte	0x54
 1043 0117 04        		.byte	0x4
 1044 0118 9001      		.uleb128 .LVL16-.Ltext0
 1045 011a BA01      		.uleb128 .LVL22-.Ltext0
 1046 011c 01        		.uleb128 0x1
 1047 011d 54        		.byte	0x54
 1048 011e 00        		.byte	0
 1049               	.Ldebug_loc3:
 1050               		.section	.debug_aranges,"",@progbits
 1051 0000 0000 001C 		.long	0x1c
 1052 0004 0002      		.word	0x2
 1053 0006 0000 0000 		.long	.Ldebug_info0
 1054 000a 04        		.byte	0x4
 1055 000b 00        		.byte	0
 1056 000c 0000      		.word	0
 1057 000e 0000      		.word	0
 1058 0010 0000 0000 		.long	.Ltext0
 1059 0014 0000 013E 		.long	.Letext0-.Ltext0
 1060 0018 0000 0000 		.long	0
 1061 001c 0000 0000 		.long	0
 1062               		.section	.debug_line,"",@progbits
 1063               	.Ldebug_line0:
 1064 0000 0000 015A 		.section	.debug_str,"MS",@progbits,1
 1064      0003 0000 
 1064      0020 0201 
 1064      FB0E 0D00 
 1064      0101 0101 
 1065               	.LASF2:
 1066 0000 6C6F 6E67 		.string	"long long int"
 1066      206C 6F6E 
 1066      6720 696E 
 1066      7400 
 1067               	.LASF4:
 1068 000e 756E 7369 		.string	"unsigned int"
 1068      676E 6564 
 1068      2069 6E74 
 1068      00
 1069               	.LASF13:
 1070 001b 474E 5520 		.string	"GNU C17 11.4.0 -mcpu=68000 -msoft-float -g -O2 -fomit-frame-pointer"
 1070      4331 3720 
 1070      3131 2E34 
 1070      2E30 202D 
 1070      6D63 7075 
 1071               	.LASF1:


 1072 005f 6C6F 6E67 		.string	"long unsigned int"
 1072      2075 6E73 
 1072      6967 6E65 
 1072      6420 696E 
 1072      7400 
 1073               	.LASF9:
 1074 0071 6C6F 6E67 		.string	"long long unsigned int"
 1074      206C 6F6E 
 1074      6720 756E 
 1074      7369 676E 
 1074      6564 2069 
 1075               	.LASF14:
 1076 0088 6373 7973 		.string	"csys68k.c"
 1076      3638 6B2E 
 1076      6300 
 1077               	.LASF18:
 1078 0092 7772 6974 		.string	"write"
 1078      6500 
 1079               	.LASF6:
 1080 0098 756E 7369 		.string	"unsigned char"
 1080      676E 6564 
 1080      2063 6861 
 1080      7200 
 1081               	.LASF10:
 1082 00a6 6368 6172 		.string	"char"
 1082      00
 1083               	.LASF0:
 1084 00ab 6C6F 6E67 		.string	"long int"
 1084      2069 6E74 
 1084      00
 1085               	.LASF12:
 1086 00b4 6E62 7974 		.string	"nbytes"
 1086      6573 00
 1087               	.LASF11:
 1088 00bb 5F42 6F6F 		.string	"_Bool"
 1088      6C00 
 1089               	.LASF15:
 1090 00c1 2F68 6F6D 		.string	"/home/students/5443962251"
 1090      652F 7374 
 1090      7564 656E 
 1090      7473 2F35 
 1090      3434 3339 
 1091               	.LASF19:
 1092 00db 7265 6164 		.string	"read"
 1092      00
 1093               	.LASF8:
 1094 00e0 7368 6F72 		.string	"short unsigned int"
 1094      7420 756E 
 1094      7369 676E 
 1094      6564 2069 
 1094      6E74 00
 1095               	.LASF5:
 1096 00f3 7369 676E 		.string	"signed char"
 1096      6564 2063 
 1096      6861 7200 
 1097               	.LASF17:
 1098 00ff 696E 6279 		.string	"inbyte"


 1098      7465 00
 1099               	.LASF3:
 1100 0106 6C6F 6E67 		.string	"long double"
 1100      2064 6F75 
 1100      626C 6500 
 1101               	.LASF7:
 1102 0112 7368 6F72 		.string	"short int"
 1102      7420 696E 
 1102      7400 
 1103               	.LASF16:
 1104 011c 6F75 7462 		.string	"outbyte"
 1104      7974 6500 
 1105               		.ident	"GCC: (GNU) 11.4.0"




   1               	.global inbyte
   2               	.global inkeyw
   3               	
   4               	.text
   5               	.even
   6               	
   7               	inbyte:
   8 0000 48E7 7000 	    movem.l %d1-%d3, -(%sp)     | char inbyte(int ch)
   9               	inbyte_start:
  10 0004 7001      	    move.l	#1, %d0             | GETSTRING
  11 0006 222F 0010 	    move.l	16(%sp), %d1		| get the first arg (ch)	    
  12 000a 243C 0000 	    move.l	#BUF_INBYTE, %d2
  12      0000 
  13 0010 7601      	    move.l	#1, %d3
  14 0012 4E40      	    trap	#0
  15               	
  16 0014 0C00 0001 	    cmpi.b	#1, %d0
  17 0018 6600 FFEA 	    bne     inbyte_start
  18               	
  19 001c 4280      	    clr.l	%d0
  20 001e 1039 0000 	    move.b  BUF_INBYTE, %d0
  20      0000 
  21               	    | no need to clear the buffer in inbyte
  22 0024 4CDF 000E 	    movem.l (%sp)+, %d1-%d3
  23 0028 4E75      	    rts
  24               	
  25               	inkeyw:
  26 002a 48E7 7000 	    movem.l %d1-%d3, -(%sp)     | char inkeyw(int ch)
  27               	
  28 002e 7001      	    move.l	#1, %d0             | GETSTRING 
  29 0030 222F 0010 	    move.l	16(%sp), %d1		| get the first arg (ch)	    
  30 0034 243C 0000 	    move.l	#BUF_INKEY, %d2
  30      0000 
  31 003a 7601      	    move.l	#1, %d3
  32 003c 4E40      	    trap	#0
  33               	
  34 003e 4280      	    clr.l	%d0
  35 0040 1039 0000 	    move.b  BUF_INKEY, %d0
  35      0000 
  36 0046 13FC 0000 	    move.b  #0, BUF_INKEY       | clear the buffer
  36      0000 0000 
  37               	
  38 004e 4CDF 000E 	    movem.l (%sp)+, %d1-%d3
  39 0052 4E75      	    rts
  40               	
  41               	.section .bss
  42 0000 00        	BUF_INBYTE: .ds.b 1             | buffer for inbyte
  43 0001 00        	    .even
  44 0002 00        	BUF_INKEY: .ds.b 1              | buffer for inkeyw           
  45 0003 00        	    .even




   1               	.global first_task
   2               	.global pv_handler
   3               	.global P
   4               	.global V
   5               	.global swtch
   6               	.global hard_clock
   7               	.global init_timer
   8               	
   9               	.global runtime
  10               	
  11               	** External variables from mtk_c.c **
  12               	.extern task_tab
  13               	.extern curr_task
  14               	.extern next_task
  15               	.extern p_body
  16               	.extern v_body
  17               	.extern ready
  18               	.extern sched
  19               	.extern addq
  20               	
  21               	.section .text
  22               	.even
  23               	
  24               	************************************************************************
  25               	** first_task
  26               	** Subroutine to start the first task
  27               	************************************************************************
  28               	first_task:
  29 0000 46FC 2700 	    move.w  #0x2700, %sr
  30               	get_tcm:
  31 0004 2039 0000 	    move.l  curr_task, %d0
  31      0000 
  32 000a C0FC 0014 	    mulu.w  #20, %d0
  33 000e 41F9 0000 	    lea.l   task_tab, %a0
  33      0000 
  34 0014 D1C0      	    add.l   %d0, %a0                | %a0 = &task_tab[curr_task]
  35 0016 2E68 0004 	    move.l  4(%a0), %sp             | restore SSP
  36 001a 225F      	    move.l  (%sp)+, %a1             | restore USP from SSP
  37 001c 4E61      	    move.l  %a1, %usp
  38 001e 4CDF 7FFF 	    movem.l (%sp)+, %d0-%d7/%a0-%a6 | restore registers from SSP
  39 0022 4E73      	    rte                             | restore SR and return
  40               	
  41               	************************************************************************
  42               	** pv_handler
  43               	** trap #1 handler for P and V system calls
  44               	************************************************************************
  45               	pv_handler:
  46 0024 46FC 2700 	    move.w  #0x2700, %sr    
  47 0028 2F01      	    move.l  %d1, -(%sp)         | save the value of argument on top of stack
  48               	
  49 002a 0C80 0000 	    cmp.l   #0, %d0
  49      0000 
  50 0030 6700 0010 	    beq     call_p_body
  51 0034 0C80 0000 	    cmp.l   #1, %d0
  51      0001 
  52 003a 6700 0010 	    beq     call_v_body
  53               	


  54               	end_pv_handler:
  55 003e 221F      	    move.l  (%sp)+, %d1         
  56 0040 4E73      	    rte                         | restore SR and return
  57               	
  58               	call_p_body:
  59 0042 4EB9 0000 	    jsr     p_body              | call C's function 'p_body()'
  59      0000 
  60 0048 6000 FFF4 	    bra     end_pv_handler
  61               	call_v_body:
  62 004c 4EB9 0000 	    jsr     v_body              | call C's function 'v_body()'
  62      0000 
  63 0052 6000 FFEA 	    bra     end_pv_handler
  64               	
  65               	************************************************************************
  66               	** P
  67               	** Entrance of P system call
  68               	** Input: semaphore ID
  69               	************************************************************************
  70               	P:
  71 0056 48E7 C000 	    movem.l %d0-%d1, -(%sp)
  72 005a 7000      	    move.l	#0,	%d0             | d0 <- 0 to call p_body
  73 005c 222F 000C 		move.l	12(%sp), %d1        | get semaphore ID
  74 0060 4E41      		trap	#1
  75 0062 4CDF 0003 	    movem.l (%sp)+, %d0-%d1 
  76 0066 4E75      		rts
  77               	   
  78               	************************************************************************
  79               	** V
  80               	** Entrance of V system call
  81               	** Input: semaphore ID
  82               	************************************************************************ 
  83               	V:
  84 0068 48E7 C000 	    movem.l %d0-%d1, -(%sp)
  85 006c 7001      	    move.l	#1,	%d0             | d0 <- 1 to call v_body
  86 006e 222F 000C 		move.l	12(%sp), %d1        | get semaphore ID
  87 0072 4E41      		trap	#1
  88 0074 4CDF 0003 	    movem.l (%sp)+, %d0-%d1
  89 0078 4E75      		rts
  90               	
  91               	************************************************************************
  92               	** swtch
  93               	** Subroutine to switch tasks
  94               	************************************************************************
  95               	swtch:
  96 007a 40E7      	    move.w  %sr, -(%sp)
  97 007c 48E7 FFFE 	    movem.l %d0-%d7/%a0-%a6, -(%sp)
  98 0080 4E69      	    move.l  %usp, %a1
  99 0082 2F09      	    move.l  %a1, -(%sp)
 100               	
 101 0084 2039 0000 	    move.l  curr_task, %d0
 101      0000 
 102 008a C0FC 0014 	    mulu.w  #20, %d0
 103 008e 41F9 0000 	    lea.l   task_tab, %a0
 103      0000 
 104 0094 D1C0      	    add.l   %d0, %a0                | %a0 = &task_tab[curr_task]
 105 0096 214F 0004 	    move.l  %sp, 4(%a0)             | save SSP
 106               	


 107 009a 23F9 0000 	    move.l  next_task, curr_task    | curr_task = next_task
 107      0000 0000 
 107      0000 
 108               	
 109 00a4 6000 FF5E 	    bra     get_tcm                 | get the new task's info (similar to first_task)
 110               	
 111               	************************************************************************
 112               	** hard_clock
 113               	** Subroutine to call at every timer interrupt
 114               	************************************************************************
 115               	hard_clock:
 116 00a8 48E7 FFFE 	    movem.l %d0-%d7/%a0-%a6, -(%sp)
 117 00ac 52B9 0000 	    addq.l  #1, runtime             | increment runtime
 117      0000 
 118 00b2 2F39 0000 	    move.l  curr_task, -(%sp)
 118      0000 
 119 00b8 2F3C 0000 	    move.l  #ready, -(%sp)
 119      0000 
 120 00be 4EB9 0000 	    jsr     addq                    | call addq with two arguments on top of stack
 120      0000 
 121 00c4 508F      	    addq.l	#8, %sp                 | pop the curr_task and ready off the stack
 122               	
 123 00c6 4EB9 0000 	    jsr     sched
 123      0000 
 124 00cc 4EBA FFAC 	    jsr     swtch
 125               	
 126 00d0 4CDF 7FFF 	    movem.l (%sp)+, %d0-%d7/%a0-%a6
 127 00d4 4E75      	    rts
 128               	
 129               	************************************************************************
 130               	** init_timer
 131               	** Reset and set timer with subroutine call to hard_clock
 132               	************************************************************************
 133               	init_timer:
 134 00d6 7003      		move.l	#3, %d0           | Set to call SYSCALL_NUM_RESET_TIMER
 135 00d8 4E40      		trap	#0
 136               	
 137 00da 7004      	    move.l	#4, %d0           | Set to call SYSCALL_NUM_SET_TIMER
 138 00dc 323C 0064 	    move.w	#100, %d1	      | Set cmp value to 10 ms cycle
 139 00e0 243C 0000 		move.l	#hard_clock, %d2    
 139      0000 
 140 00e6 4E40      		trap	#0
 141               	
 142 00e8 4E75      	    rts
 143               	
 144               	.section .data
 145 0000 0000 0001 	runtime: .dc.l 1
 146               	    .even




   1               	#NO_APP
   2               		.file	"mtk_c.c"
   3               		.text
   4               	.Ltext0:
   5               		.cfi_sections	.debug_frame
   6               		.align	2
   7               		.globl	inkey
   8               		.type	inkey, @function
   9               	inkey:
  10               	.LVL0:
  11               	.LFB3:
  12               		.file 1 "mtk_c.c"
   1:mtk_c.c       **** #include <stdio.h>
   2:mtk_c.c       **** #include <stdlib.h>
   3:mtk_c.c       **** #include <stdbool.h>
   4:mtk_c.c       **** #include <fcntl.h> 
   5:mtk_c.c       **** #include <stdarg.h>
   6:mtk_c.c       **** #include <errno.h>
   7:mtk_c.c       **** #include "mtk_c.h"
   8:mtk_c.c       **** 
   9:mtk_c.c       **** 
  10:mtk_c.c       **** FILE *comout[2];
  11:mtk_c.c       **** FILE *comin[2];
  12:mtk_c.c       **** SEMAPHORE_TYPE semaphore[NUMSEMAPHORE];
  13:mtk_c.c       **** STACK_TYPE stacks[NUMTASK];
  14:mtk_c.c       **** TCB_TYPE task_tab[NUMTASK + 1];
  15:mtk_c.c       **** 
  16:mtk_c.c       **** TASK_ID_TYPE curr_task;
  17:mtk_c.c       **** TASK_ID_TYPE next_task;
  18:mtk_c.c       **** TASK_ID_TYPE new_task;
  19:mtk_c.c       **** TASK_ID_TYPE ready;
  20:mtk_c.c       **** 
  21:mtk_c.c       **** const TCB_TYPE empty_task_tab = {NULL, NULL, 0, 0, NULL};
  22:mtk_c.c       **** 
  23:mtk_c.c       **** 
  24:mtk_c.c       **** extern char inkeyw(bool ch);
  25:mtk_c.c       **** 
  26:mtk_c.c       **** int inkey(bool ch){
  13               		.loc 1 26 19 view -0
  14               		.cfi_startproc
  27:mtk_c.c       ****     int c;
  15               		.loc 1 27 5 view .LVU1
  28:mtk_c.c       ****     c = inkeyw(ch);
  16               		.loc 1 28 5 view .LVU2
  17               		.loc 1 28 9 is_stmt 0 view .LVU3
  18 0000 7000      		moveq #0,%d0
  19 0002 102F 0007 		move.b 7(%sp),%d0
  20 0006 2F00      		move.l %d0,-(%sp)
  21               		.cfi_def_cfa_offset 8
  22 0008 4EB9 0000 		jsr inkeyw
  22      0000 
  23               	.LVL1:
  24               		.loc 1 28 7 view .LVU4
  25 000e 4880      		ext.w %d0
  26 0010 3040      		move.w %d0,%a0
  27               	.LVL2:
  29:mtk_c.c       ****     if (c > 0) return (int) c;


  28               		.loc 1 29 5 is_stmt 1 view .LVU5
  29               		.loc 1 29 8 is_stmt 0 view .LVU6
  30 0012 588F      		addq.l #4,%sp
  31               		.cfi_def_cfa_offset 4
  32 0014 4A40      		tst.w %d0
  33 0016 6F04      		jle .L5
  30:mtk_c.c       ****     else return -1;
  31:mtk_c.c       **** }
  34               		.loc 1 31 1 view .LVU7
  35 0018 2008      		move.l %a0,%d0
  36 001a 4E75      		rts
  37               	.L5:
  30:mtk_c.c       ****     else return -1;
  38               		.loc 1 30 17 view .LVU8
  39 001c 307C FFFF 		move.w #-1,%a0
  40               	.LVL3:
  41               		.loc 1 31 1 view .LVU9
  42 0020 2008      		move.l %a0,%d0
  43               	.LVL4:
  44               		.loc 1 31 1 view .LVU10
  45 0022 4E75      		rts
  46               		.cfi_endproc
  47               	.LFE3:
  48               		.size	inkey, .-inkey
  49               		.align	2
  50               		.globl	fcntl
  51               		.type	fcntl, @function
  52               	fcntl:
  53               	.LVL5:
  54               	.LFB4:
  32:mtk_c.c       **** 
  33:mtk_c.c       **** int fcntl(int fd, int cmd, ...){
  55               		.loc 1 33 32 is_stmt 1 view -0
  56               		.cfi_startproc
  34:mtk_c.c       ****   if (cmd == F_GETFL) return O_RDWR;
  57               		.loc 1 34 3 view .LVU12
  58               		.loc 1 34 6 is_stmt 0 view .LVU13
  59 0024 7203      		moveq #3,%d1
  60 0026 B2AF 0008 		cmp.l 8(%sp),%d1
  61 002a 57C0      		seq %d0
  62 002c 4880      		ext.w %d0
  63 002e 48C0      		ext.l %d0
  64 0030 4480      		neg.l %d0
  35:mtk_c.c       ****   else return 0;
  36:mtk_c.c       **** }
  65               		.loc 1 36 1 view .LVU14
  66 0032 D080      		add.l %d0,%d0
  67 0034 4E75      		rts
  68               		.cfi_endproc
  69               	.LFE4:
  70               		.size	fcntl, .-fcntl
  71               		.align	2
  72               		.globl	init_kernel
  73               		.type	init_kernel, @function
  74               	init_kernel:
  75               	.LFB5:
  37:mtk_c.c       **** 


  38:mtk_c.c       **** void init_kernel(){  
  76               		.loc 1 38 19 is_stmt 1 view -0
  77               		.cfi_startproc
  39:mtk_c.c       ****     for(int i=1; i<=NUMTASK;i++){
  78               		.loc 1 39 5 view .LVU16
  79               	.LBB11:
  80               		.loc 1 39 9 view .LVU17
  81               	.LVL6:
  82               		.loc 1 39 19 view .LVU18
  83 0036 41F9 0000 		lea task_tab+20,%a0
  83      0000 
  84               	.LVL7:
  85               	.L9:
  40:mtk_c.c       ****         task_tab[i] = empty_task_tab;
  86               		.loc 1 40 9 discriminator 3 view .LVU19
  87               		.loc 1 40 21 is_stmt 0 discriminator 3 view .LVU20
  88 003c 4290      		clr.l (%a0)
  89 003e 42A8 0004 		clr.l 4(%a0)
  90 0042 42A8 0008 		clr.l 8(%a0)
  91 0046 42A8 000C 		clr.l 12(%a0)
  92 004a 42A8 0010 		clr.l 16(%a0)
  39:mtk_c.c       ****     for(int i=1; i<=NUMTASK;i++){
  93               		.loc 1 39 30 is_stmt 1 discriminator 3 view .LVU21
  39:mtk_c.c       ****     for(int i=1; i<=NUMTASK;i++){
  94               		.loc 1 39 19 discriminator 3 view .LVU22
  95 004e 41E8 0014 		lea (20,%a0),%a0
  96 0052 B1FC 0000 		cmp.l #task_tab+120,%a0
  96      0000 
  97 0058 66E2      		jne .L9
  98               	.LBE11:
  41:mtk_c.c       ****     }
  42:mtk_c.c       ****     ready = NULLTASKID;
  99               		.loc 1 42 5 view .LVU23
 100               		.loc 1 42 11 is_stmt 0 view .LVU24
 101 005a 42B9 0000 		clr.l ready
 101      0000 
  43:mtk_c.c       ****     *(int *)0x084 = (int)(pv_handler);  // set trap #1 interrupt vector
 102               		.loc 1 43 5 is_stmt 1 view .LVU25
 103               		.loc 1 43 19 is_stmt 0 view .LVU26
 104 0060 21FC 0000 		move.l #pv_handler,132.w
 104      0000 0084 
  44:mtk_c.c       ****     for(int j=0; j<NUMSEMAPHORE; j++){
 105               		.loc 1 44 5 is_stmt 1 view .LVU27
 106               	.LBB12:
 107               		.loc 1 44 9 view .LVU28
 108               	.LVL8:
 109               		.loc 1 44 19 view .LVU29
  45:mtk_c.c       ****         semaphore[j].count = 1;
 110               		.loc 1 45 9 view .LVU30
 111               		.loc 1 45 28 is_stmt 0 view .LVU31
 112 0068 7001      		moveq #1,%d0
 113 006a 23C0 0000 		move.l %d0,semaphore
 113      0000 
  46:mtk_c.c       ****         semaphore[j].task_list = NULLTASKID;
 114               		.loc 1 46 9 is_stmt 1 view .LVU32
 115               		.loc 1 46 32 is_stmt 0 view .LVU33
 116 0070 42B9 0000 		clr.l semaphore+4


 116      0000 
  44:mtk_c.c       ****     for(int j=0; j<NUMSEMAPHORE; j++){
 117               		.loc 1 44 35 is_stmt 1 view .LVU34
 118               	.LVL9:
  44:mtk_c.c       ****     for(int j=0; j<NUMSEMAPHORE; j++){
 119               		.loc 1 44 19 view .LVU35
  45:mtk_c.c       ****         semaphore[j].count = 1;
 120               		.loc 1 45 9 view .LVU36
  45:mtk_c.c       ****         semaphore[j].count = 1;
 121               		.loc 1 45 28 is_stmt 0 view .LVU37
 122 0076 23C0 0000 		move.l %d0,semaphore+8
 122      0000 
 123               		.loc 1 46 9 is_stmt 1 view .LVU38
 124               		.loc 1 46 32 is_stmt 0 view .LVU39
 125 007c 42B9 0000 		clr.l semaphore+12
 125      0000 
  44:mtk_c.c       ****     for(int j=0; j<NUMSEMAPHORE; j++){
 126               		.loc 1 44 35 is_stmt 1 view .LVU40
 127               	.LVL10:
  44:mtk_c.c       ****     for(int j=0; j<NUMSEMAPHORE; j++){
 128               		.loc 1 44 19 view .LVU41
  45:mtk_c.c       ****         semaphore[j].count = 1;
 129               		.loc 1 45 9 view .LVU42
  45:mtk_c.c       ****         semaphore[j].count = 1;
 130               		.loc 1 45 28 is_stmt 0 view .LVU43
 131 0082 23C0 0000 		move.l %d0,semaphore+16
 131      0000 
 132               		.loc 1 46 9 is_stmt 1 view .LVU44
 133               		.loc 1 46 32 is_stmt 0 view .LVU45
 134 0088 42B9 0000 		clr.l semaphore+20
 134      0000 
  44:mtk_c.c       ****     for(int j=0; j<NUMSEMAPHORE; j++){
 135               		.loc 1 44 35 is_stmt 1 view .LVU46
 136               	.LVL11:
  44:mtk_c.c       ****     for(int j=0; j<NUMSEMAPHORE; j++){
 137               		.loc 1 44 19 view .LVU47
  45:mtk_c.c       ****         semaphore[j].count = 1;
 138               		.loc 1 45 9 view .LVU48
  45:mtk_c.c       ****         semaphore[j].count = 1;
 139               		.loc 1 45 28 is_stmt 0 view .LVU49
 140 008e 23C0 0000 		move.l %d0,semaphore+24
 140      0000 
 141               		.loc 1 46 9 is_stmt 1 view .LVU50
 142               		.loc 1 46 32 is_stmt 0 view .LVU51
 143 0094 42B9 0000 		clr.l semaphore+28
 143      0000 
  44:mtk_c.c       ****     for(int j=0; j<NUMSEMAPHORE; j++){
 144               		.loc 1 44 35 is_stmt 1 view .LVU52
 145               	.LVL12:
  44:mtk_c.c       ****     for(int j=0; j<NUMSEMAPHORE; j++){
 146               		.loc 1 44 19 view .LVU53
  45:mtk_c.c       ****         semaphore[j].count = 1;
 147               		.loc 1 45 9 view .LVU54
  45:mtk_c.c       ****         semaphore[j].count = 1;
 148               		.loc 1 45 28 is_stmt 0 view .LVU55
 149 009a 23C0 0000 		move.l %d0,semaphore+32
 149      0000 


 150               		.loc 1 46 9 is_stmt 1 view .LVU56
 151               		.loc 1 46 32 is_stmt 0 view .LVU57
 152 00a0 42B9 0000 		clr.l semaphore+36
 152      0000 
  44:mtk_c.c       ****     for(int j=0; j<NUMSEMAPHORE; j++){
 153               		.loc 1 44 35 is_stmt 1 view .LVU58
 154               	.LVL13:
  44:mtk_c.c       ****     for(int j=0; j<NUMSEMAPHORE; j++){
 155               		.loc 1 44 19 view .LVU59
 156               	.LBE12:
  47:mtk_c.c       ****     }
  48:mtk_c.c       **** }
 157               		.loc 1 48 1 is_stmt 0 view .LVU60
 158 00a6 4E75      		rts
 159               		.cfi_endproc
 160               	.LFE5:
 161               		.size	init_kernel, .-init_kernel
 162               		.section	.rodata.str1.1,"aMS",@progbits,1
 163               	.LC0:
 164 0000 7200      		.string	"r"
 165               	.LC1:
 166 0002 7700      		.string	"w"
 167               		.text
 168               		.align	2
 169               		.globl	init_io
 170               		.type	init_io, @function
 171               	init_io:
 172               	.LFB6:
  49:mtk_c.c       **** 
  50:mtk_c.c       **** void init_io(){
 173               		.loc 1 50 15 is_stmt 1 view -0
 174               		.cfi_startproc
 175 00a8 2F0A      		move.l %a2,-(%sp)
 176               		.cfi_def_cfa_offset 8
 177               		.cfi_offset 10, -8
  51:mtk_c.c       ****     // fd 3 : UART1, fd 4 : UART2
  52:mtk_c.c       ****     for(int i=0; i<=1; i++){
 178               		.loc 1 52 5 view .LVU62
 179               	.LBB13:
 180               		.loc 1 52 9 view .LVU63
 181               	.LVL14:
 182               		.loc 1 52 19 view .LVU64
  53:mtk_c.c       ****         comin[i] = fdopen(i+3, "r");
 183               		.loc 1 53 9 view .LVU65
 184               		.loc 1 53 20 is_stmt 0 view .LVU66
 185 00aa 4879 0000 		pea .LC0
 185      0000 
 186               		.cfi_def_cfa_offset 12
 187 00b0 4878 0003 		pea 3.w
 188               		.cfi_def_cfa_offset 16
 189 00b4 45F9 0000 		lea fdopen,%a2
 189      0000 
 190 00ba 4E92      		jsr (%a2)
 191               	.LVL15:
 192               		.loc 1 53 18 view .LVU67
 193 00bc 23C0 0000 		move.l %d0,comin
 193      0000 


  54:mtk_c.c       ****         comout[i] = fdopen(i+3, "w");
 194               		.loc 1 54 9 is_stmt 1 view .LVU68
 195               		.loc 1 54 21 is_stmt 0 view .LVU69
 196 00c2 4879 0000 		pea .LC1
 196      0000 
 197               		.cfi_def_cfa_offset 20
 198 00c8 4878 0003 		pea 3.w
 199               		.cfi_def_cfa_offset 24
 200 00cc 4E92      		jsr (%a2)
 201               	.LVL16:
 202               		.loc 1 54 19 view .LVU70
 203 00ce 23C0 0000 		move.l %d0,comout
 203      0000 
  52:mtk_c.c       ****         comin[i] = fdopen(i+3, "r");
 204               		.loc 1 52 25 is_stmt 1 view .LVU71
 205               	.LVL17:
  52:mtk_c.c       ****         comin[i] = fdopen(i+3, "r");
 206               		.loc 1 52 19 view .LVU72
  53:mtk_c.c       ****         comin[i] = fdopen(i+3, "r");
 207               		.loc 1 53 9 view .LVU73
  53:mtk_c.c       ****         comin[i] = fdopen(i+3, "r");
 208               		.loc 1 53 20 is_stmt 0 view .LVU74
 209 00d4 4879 0000 		pea .LC0
 209      0000 
 210               		.cfi_def_cfa_offset 28
 211 00da 4878 0004 		pea 4.w
 212               		.cfi_def_cfa_offset 32
 213 00de 4E92      		jsr (%a2)
 214               	.LVL18:
  53:mtk_c.c       ****         comin[i] = fdopen(i+3, "r");
 215               		.loc 1 53 18 view .LVU75
 216 00e0 23C0 0000 		move.l %d0,comin+4
 216      0000 
 217               		.loc 1 54 9 is_stmt 1 view .LVU76
 218               		.loc 1 54 21 is_stmt 0 view .LVU77
 219 00e6 4879 0000 		pea .LC1
 219      0000 
 220               		.cfi_def_cfa_offset 36
 221 00ec 4878 0004 		pea 4.w
 222               		.cfi_def_cfa_offset 40
 223 00f0 4E92      		jsr (%a2)
 224               	.LVL19:
 225               		.loc 1 54 19 view .LVU78
 226 00f2 23C0 0000 		move.l %d0,comout+4
 226      0000 
  52:mtk_c.c       ****         comin[i] = fdopen(i+3, "r");
 227               		.loc 1 52 25 is_stmt 1 view .LVU79
 228               	.LVL20:
  52:mtk_c.c       ****         comin[i] = fdopen(i+3, "r");
 229               		.loc 1 52 19 view .LVU80
 230               	.LBE13:
  55:mtk_c.c       ****     }
  56:mtk_c.c       **** }
 231               		.loc 1 56 1 is_stmt 0 view .LVU81
 232 00f8 4FEF 0020 		lea (32,%sp),%sp
 233               		.cfi_def_cfa_offset 8
 234 00fc 245F      		move.l (%sp)+,%a2


 235 00fe 4E75      		rts
 236               		.cfi_endproc
 237               	.LFE6:
 238               		.size	init_io, .-init_io
 239               		.align	2
 240               		.globl	set_task
 241               		.type	set_task, @function
 242               	set_task:
 243               	.LVL21:
 244               	.LFB7:
  57:mtk_c.c       **** 
  58:mtk_c.c       **** 
  59:mtk_c.c       **** void set_task(void* new_task_addr){
 245               		.loc 1 59 35 is_stmt 1 view -0
 246               		.cfi_startproc
 247               		.loc 1 59 35 is_stmt 0 view .LVU83
 248 0100 48E7 3838 		movem.l #14392,-(%sp)
 249               		.cfi_def_cfa_offset 28
 250               		.cfi_offset 2, -28
 251               		.cfi_offset 3, -24
 252               		.cfi_offset 4, -20
 253               		.cfi_offset 10, -16
 254               		.cfi_offset 11, -12
 255               		.cfi_offset 12, -8
  60:mtk_c.c       ****     int i=1;
 256               		.loc 1 60 5 is_stmt 1 view .LVU84
 257               	.LVL22:
  61:mtk_c.c       ****     while(i <= NUMTASK){
 258               		.loc 1 61 5 view .LVU85
 259               		.loc 1 61 13 view .LVU86
 260 0104 41F9 0000 		lea task_tab+20,%a0
 260      0000 
  60:mtk_c.c       ****     int i=1;
 261               		.loc 1 60 9 is_stmt 0 view .LVU87
 262 010a 7401      		moveq #1,%d2
 263               	.LVL23:
 264               	.L22:
  62:mtk_c.c       ****         if(task_tab[i].task_addr == 0){
 265               		.loc 1 62 9 is_stmt 1 view .LVU88
 266               		.loc 1 62 11 is_stmt 0 view .LVU89
 267 010c 4A90      		tst.l (%a0)
 268 010e 6712      		jeq .L30
  63:mtk_c.c       ****             new_task = (TASK_ID_TYPE)i;
  64:mtk_c.c       ****             task_tab[new_task].task_addr = new_task_addr;
  65:mtk_c.c       ****             task_tab[new_task].status = 1;
  66:mtk_c.c       ****             task_tab[new_task].stack_ptr = init_stack(new_task);
  67:mtk_c.c       ****             addq(&ready, new_task);
  68:mtk_c.c       ****             break;
  69:mtk_c.c       ****         }
  70:mtk_c.c       ****         else{
  71:mtk_c.c       ****             i++;
 269               		.loc 1 71 13 is_stmt 1 view .LVU90
 270               		.loc 1 71 14 is_stmt 0 view .LVU91
 271 0110 5282      		addq.l #1,%d2
 272               	.LVL24:
  61:mtk_c.c       ****         if(task_tab[i].task_addr == 0){
 273               		.loc 1 61 13 is_stmt 1 view .LVU92


 274 0112 41E8 0014 		lea (20,%a0),%a0
 275 0116 7006      		moveq #6,%d0
 276 0118 B082      		cmp.l %d2,%d0
 277 011a 66F0      		jne .L22
  72:mtk_c.c       ****         }
  73:mtk_c.c       ****     }
  74:mtk_c.c       **** }
 278               		.loc 1 74 1 is_stmt 0 view .LVU93
 279 011c 4CDF 1C1C 		movem.l (%sp)+,#7196
 280               	.LVL25:
 281               		.loc 1 74 1 view .LVU94
 282 0120 4E75      		rts
 283               	.LVL26:
 284               	.L30:
  63:mtk_c.c       ****             task_tab[new_task].task_addr = new_task_addr;
 285               		.loc 1 63 13 is_stmt 1 view .LVU95
  63:mtk_c.c       ****             task_tab[new_task].task_addr = new_task_addr;
 286               		.loc 1 63 22 is_stmt 0 view .LVU96
 287 0122 23C2 0000 		move.l %d2,new_task
 287      0000 
  64:mtk_c.c       ****             task_tab[new_task].status = 1;
 288               		.loc 1 64 13 is_stmt 1 view .LVU97
  64:mtk_c.c       ****             task_tab[new_task].status = 1;
 289               		.loc 1 64 42 is_stmt 0 view .LVU98
 290 0128 45F9 0000 		lea task_tab,%a2
 290      0000 
 291 012e 2602      		move.l %d2,%d3
 292 0130 D682      		add.l %d2,%d3
 293 0132 2643      		move.l %d3,%a3
 294 0134 D7C3      		add.l %d3,%a3
 295 0136 D7C2      		add.l %d2,%a3
 296 0138 D7CB      		add.l %a3,%a3
 297 013a D7CB      		add.l %a3,%a3
 298 013c 25AF 001C 		move.l 28(%sp),(%a2,%a3.l)
 298      B800 
  65:mtk_c.c       ****             task_tab[new_task].stack_ptr = init_stack(new_task);
 299               		.loc 1 65 13 is_stmt 1 view .LVU99
  65:mtk_c.c       ****             task_tab[new_task].stack_ptr = init_stack(new_task);
 300               		.loc 1 65 39 is_stmt 0 view .LVU100
 301 0142 47F2 B800 		lea (%a2,%a3.l),%a3
 302 0146 7001      		moveq #1,%d0
 303 0148 2740 000C 		move.l %d0,12(%a3)
  66:mtk_c.c       ****             addq(&ready, new_task);
 304               		.loc 1 66 13 is_stmt 1 view .LVU101
 305               	.LVL27:
 306               	.LBB19:
 307               	.LBI19:
  75:mtk_c.c       **** 
  76:mtk_c.c       **** void* init_stack(TASK_ID_TYPE id)
 308               		.loc 1 76 7 view .LVU102
 309               	.LBB20:
  77:mtk_c.c       **** {
  78:mtk_c.c       **** 	int *ssp = &stacks[id-1].sstack[STKSIZE];
 310               		.loc 1 78 2 view .LVU103
 311 014c 2802      		move.l %d2,%d4
 312 014e 700B      		moveq #11,%d0
 313 0150 E1AC      		lsl.l %d0,%d4


 314               		.loc 1 78 7 is_stmt 0 view .LVU104
 315 0152 2844      		move.l %d4,%a4
 316 0154 D9FC 0000 		add.l #stacks,%a4
 316      0000 
 317               	.LVL28:
  79:mtk_c.c       **** 	unsigned short int *sr_ssp;
 318               		.loc 1 79 2 is_stmt 1 view .LVU105
  80:mtk_c.c       **** 	int i=0;	
 319               		.loc 1 80 2 view .LVU106
  81:mtk_c.c       **** 
  82:mtk_c.c       **** 	*(--ssp) = task_tab[id].task_addr;
 320               		.loc 1 82 2 view .LVU107
 321               		.loc 1 82 11 is_stmt 0 view .LVU108
 322 015a 296F 001C 		move.l 28(%sp),-4(%a4)
 322      FFFC 
  83:mtk_c.c       **** 	sr_ssp = ssp;
 323               		.loc 1 83 2 is_stmt 1 view .LVU109
 324               	.LVL29:
  84:mtk_c.c       **** 	*(--sr_ssp)=0;	//so it only uses 2*4 bytes since this is unsigned short int
 325               		.loc 1 84 2 view .LVU110
 326               		.loc 1 84 13 is_stmt 0 view .LVU111
 327 0160 426C FFFA 		clr.w -6(%a4)
  85:mtk_c.c       **** 	ssp = sr_ssp;
 328               		.loc 1 85 2 is_stmt 1 view .LVU112
 329               	.LVL30:
  86:mtk_c.c       **** 
  87:mtk_c.c       **** 	while(i<15)
 330               		.loc 1 87 2 view .LVU113
 331               		.loc 1 87 9 view .LVU114
  88:mtk_c.c       **** 	{
  89:mtk_c.c       **** 		*(--ssp)=0;	//skip 15*4 bytes
 332               		.loc 1 89 11 is_stmt 0 view .LVU115
 333 0164 4878 003C 		pea 60.w
 334               		.cfi_def_cfa_offset 32
 335 0168 42A7      		clr.l -(%sp)
 336               		.cfi_def_cfa_offset 36
 337 016a 486C FFBE 		pea -66(%a4)
 338               		.cfi_def_cfa_offset 40
 339 016e 4EB9 0000 		jsr memset
 339      0000 
 340               	.LVL31:
  90:mtk_c.c       **** 		i++;
  91:mtk_c.c       **** 	}
  92:mtk_c.c       **** 	*(--ssp) = &stacks[id-1].ustack[STKSIZE];
 341               		.loc 1 92 2 is_stmt 1 view .LVU116
 342               		.loc 1 92 13 is_stmt 0 view .LVU117
 343 0174 0684 0000 		add.l #stacks-1024,%d4
 343      0000 
 344 017a 2944 FFBA 		move.l %d4,-70(%a4)
  93:mtk_c.c       **** 
  94:mtk_c.c       **** 	return (void*)ssp;
 345               		.loc 1 94 2 is_stmt 1 view .LVU118
 346               	.LVL32:
  92:mtk_c.c       **** 
 347               		.loc 1 92 11 is_stmt 0 view .LVU119
 348 017e 49EC FFBA 		lea (-70,%a4),%a4
 349 0182 274C 0004 		move.l %a4,4(%a3)


 350               	.LBE20:
 351               	.LBE19:
  67:mtk_c.c       ****             break;
 352               		.loc 1 67 13 is_stmt 1 view .LVU120
 353               	.LVL33:
 354               	.LBB21:
 355               	.LBI21:
  95:mtk_c.c       **** }
  96:mtk_c.c       **** 
  97:mtk_c.c       **** 
  98:mtk_c.c       **** void begin_sch(){
  99:mtk_c.c       ****     curr_task = removeq(&ready);
 100:mtk_c.c       ****     init_timer();
 101:mtk_c.c       ****     first_task();
 102:mtk_c.c       **** }
 103:mtk_c.c       **** 
 104:mtk_c.c       **** 
 105:mtk_c.c       **** void addq(TASK_ID_TYPE* ptr, TASK_ID_TYPE id){
 356               		.loc 1 105 6 view .LVU121
 357               	.LBB22:
 106:mtk_c.c       ****     TASK_ID_TYPE tmp = *ptr;
 358               		.loc 1 106 5 view .LVU122
 359               		.loc 1 106 18 is_stmt 0 view .LVU123
 360 0186 2079 0000 		move.l ready,%a0
 360      0000 
 361               	.LVL34:
 107:mtk_c.c       ****     if (tmp == NULLTASKID)  *ptr=id;    //update the value of address of ptr to id
 362               		.loc 1 107 5 is_stmt 1 view .LVU124
 363               		.loc 1 107 8 is_stmt 0 view .LVU125
 364 018c 4FEF 000C 		lea (12,%sp),%sp
 365               		.cfi_def_cfa_offset 28
 366 0190 B0FC 0000 		cmp.w #0,%a0
 367 0194 6748      		jeq .L31
 368               	.LBB23:
 108:mtk_c.c       ****     else{
 109:mtk_c.c       ****         TASK_ID_TYPE j = task_tab[tmp].next;
 369               		.loc 1 109 9 is_stmt 1 view .LVU126
 370               		.loc 1 109 22 is_stmt 0 view .LVU127
 371 0196 2208      		move.l %a0,%d1
 372 0198 D288      		add.l %a0,%d1
 373 019a 2001      		move.l %d1,%d0
 374 019c D081      		add.l %d1,%d0
 375 019e D088      		add.l %a0,%d0
 376 01a0 D080      		add.l %d0,%d0
 377 01a2 D080      		add.l %d0,%d0
 378 01a4 2032 0810 		move.l 16(%a2,%d0.l),%d0
 379               	.LVL35:
 110:mtk_c.c       ****         while(j!=NULLTASKID){
 380               		.loc 1 110 9 is_stmt 1 view .LVU128
 381               		.loc 1 110 16 view .LVU129
 382 01a8 6716      		jeq .L19
 383               	.L32:
 111:mtk_c.c       ****             tmp=j;
 384               		.loc 1 111 13 view .LVU130
 385               	.LVL36:
 112:mtk_c.c       ****             j=task_tab[tmp].next;
 386               		.loc 1 112 13 view .LVU131


 387 01aa 2040      		move.l %d0,%a0
 109:mtk_c.c       ****         while(j!=NULLTASKID){
 388               		.loc 1 109 9 view .LVU132
 109:mtk_c.c       ****         while(j!=NULLTASKID){
 389               		.loc 1 109 22 is_stmt 0 view .LVU133
 390 01ac 2208      		move.l %a0,%d1
 391 01ae D288      		add.l %a0,%d1
 392 01b0 2001      		move.l %d1,%d0
 393               	.LVL37:
 109:mtk_c.c       ****         while(j!=NULLTASKID){
 394               		.loc 1 109 22 view .LVU134
 395 01b2 D081      		add.l %d1,%d0
 396 01b4 D088      		add.l %a0,%d0
 397 01b6 D080      		add.l %d0,%d0
 398 01b8 D080      		add.l %d0,%d0
 399 01ba 2032 0810 		move.l 16(%a2,%d0.l),%d0
 400               	.LVL38:
 110:mtk_c.c       ****             tmp=j;
 401               		.loc 1 110 9 is_stmt 1 view .LVU135
 110:mtk_c.c       ****             tmp=j;
 402               		.loc 1 110 16 view .LVU136
 403 01be 66EA      		jne .L32
 404               	.L19:
 113:mtk_c.c       ****         }
 114:mtk_c.c       ****         task_tab[tmp].next = id;
 405               		.loc 1 114 9 view .LVU137
 406               		.loc 1 114 28 is_stmt 0 view .LVU138
 407 01c0 D281      		add.l %d1,%d1
 408 01c2 D288      		add.l %a0,%d1
 409 01c4 D281      		add.l %d1,%d1
 410 01c6 D281      		add.l %d1,%d1
 411 01c8 2582 1810 		move.l %d2,16(%a2,%d1.l)
 412               	.LBE23:
 115:mtk_c.c       ****     }
 116:mtk_c.c       ****     task_tab[id].next = NULLTASKID;
 413               		.loc 1 116 5 is_stmt 1 view .LVU139
 414               		.loc 1 116 23 is_stmt 0 view .LVU140
 415 01cc D683      		add.l %d3,%d3
 416 01ce D682      		add.l %d2,%d3
 417 01d0 D683      		add.l %d3,%d3
 418 01d2 D683      		add.l %d3,%d3
 419 01d4 42B2 3810 		clr.l 16(%a2,%d3.l)
 420               	.LVL39:
 421               	.L33:
 422               		.loc 1 116 23 view .LVU141
 423               	.LBE22:
 424               	.LBE21:
  74:mtk_c.c       **** 
 425               		.loc 1 74 1 view .LVU142
 426 01d8 4CDF 1C1C 		movem.l (%sp)+,#7196
 427               	.LVL40:
  74:mtk_c.c       **** 
 428               		.loc 1 74 1 view .LVU143
 429 01dc 4E75      		rts
 430               	.LVL41:
 431               	.L31:
 432               	.LBB25:


 433               	.LBB24:
 107:mtk_c.c       ****     else{
 434               		.loc 1 107 29 is_stmt 1 view .LVU144
 107:mtk_c.c       ****     else{
 435               		.loc 1 107 33 is_stmt 0 view .LVU145
 436 01de 23C2 0000 		move.l %d2,ready
 436      0000 
 437               		.loc 1 116 5 is_stmt 1 view .LVU146
 438               		.loc 1 116 23 is_stmt 0 view .LVU147
 439 01e4 D683      		add.l %d3,%d3
 440 01e6 D682      		add.l %d2,%d3
 441 01e8 D683      		add.l %d3,%d3
 442 01ea D683      		add.l %d3,%d3
 443 01ec 42B2 3810 		clr.l 16(%a2,%d3.l)
 444 01f0 60E6      		jra .L33
 445               	.LBE24:
 446               	.LBE25:
 447               		.cfi_endproc
 448               	.LFE7:
 449               		.size	set_task, .-set_task
 450               		.align	2
 451               		.globl	init_stack
 452               		.type	init_stack, @function
 453               	init_stack:
 454               	.LVL42:
 455               	.LFB8:
  77:mtk_c.c       **** 	int *ssp = &stacks[id-1].sstack[STKSIZE];
 456               		.loc 1 77 1 is_stmt 1 view -0
 457               		.cfi_startproc
  77:mtk_c.c       **** 	int *ssp = &stacks[id-1].sstack[STKSIZE];
 458               		.loc 1 77 1 is_stmt 0 view .LVU149
 459 01f2 2F0A      		move.l %a2,-(%sp)
 460               		.cfi_def_cfa_offset 8
 461               		.cfi_offset 10, -8
 462 01f4 2F02      		move.l %d2,-(%sp)
 463               		.cfi_def_cfa_offset 12
 464               		.cfi_offset 2, -12
 465 01f6 222F 000C 		move.l 12(%sp),%d1
  78:mtk_c.c       **** 	unsigned short int *sr_ssp;
 466               		.loc 1 78 2 is_stmt 1 view .LVU150
 467 01fa 2401      		move.l %d1,%d2
 468 01fc 700B      		moveq #11,%d0
 469 01fe E1AA      		lsl.l %d0,%d2
  78:mtk_c.c       **** 	unsigned short int *sr_ssp;
 470               		.loc 1 78 7 is_stmt 0 view .LVU151
 471 0200 2442      		move.l %d2,%a2
 472 0202 D5FC 0000 		add.l #stacks,%a2
 472      0000 
 473               	.LVL43:
  79:mtk_c.c       **** 	int i=0;	
 474               		.loc 1 79 2 is_stmt 1 view .LVU152
  80:mtk_c.c       **** 
 475               		.loc 1 80 2 view .LVU153
  82:mtk_c.c       **** 	sr_ssp = ssp;
 476               		.loc 1 82 2 view .LVU154
  82:mtk_c.c       **** 	sr_ssp = ssp;
 477               		.loc 1 82 25 is_stmt 0 view .LVU155


 478 0208 2001      		move.l %d1,%d0
 479 020a D081      		add.l %d1,%d0
 480 020c D080      		add.l %d0,%d0
 481 020e D081      		add.l %d1,%d0
 482 0210 D080      		add.l %d0,%d0
 483 0212 D080      		add.l %d0,%d0
  82:mtk_c.c       **** 	sr_ssp = ssp;
 484               		.loc 1 82 11 view .LVU156
 485 0214 41F9 0000 		lea task_tab,%a0
 485      0000 
 486 021a 2570 0800 		move.l (%a0,%d0.l),-4(%a2)
 486      FFFC 
  83:mtk_c.c       **** 	*(--sr_ssp)=0;	//so it only uses 2*4 bytes since this is unsigned short int
 487               		.loc 1 83 2 is_stmt 1 view .LVU157
 488               	.LVL44:
  84:mtk_c.c       **** 	ssp = sr_ssp;
 489               		.loc 1 84 2 view .LVU158
  84:mtk_c.c       **** 	ssp = sr_ssp;
 490               		.loc 1 84 13 is_stmt 0 view .LVU159
 491 0220 426A FFFA 		clr.w -6(%a2)
  85:mtk_c.c       **** 
 492               		.loc 1 85 2 is_stmt 1 view .LVU160
 493               	.LVL45:
  87:mtk_c.c       **** 	{
 494               		.loc 1 87 2 view .LVU161
  87:mtk_c.c       **** 	{
 495               		.loc 1 87 9 view .LVU162
  89:mtk_c.c       **** 		i++;
 496               		.loc 1 89 11 is_stmt 0 view .LVU163
 497 0224 4878 003C 		pea 60.w
 498               		.cfi_def_cfa_offset 16
 499 0228 42A7      		clr.l -(%sp)
 500               		.cfi_def_cfa_offset 20
 501 022a 486A FFBE 		pea -66(%a2)
 502               		.cfi_def_cfa_offset 24
 503 022e 4EB9 0000 		jsr memset
 503      0000 
 504               	.LVL46:
  92:mtk_c.c       **** 
 505               		.loc 1 92 2 is_stmt 1 view .LVU164
  92:mtk_c.c       **** 
 506               		.loc 1 92 13 is_stmt 0 view .LVU165
 507 0234 0682 0000 		add.l #stacks-1024,%d2
 507      0000 
 508 023a 2542 FFBA 		move.l %d2,-70(%a2)
  94:mtk_c.c       **** }
 509               		.loc 1 94 2 is_stmt 1 view .LVU166
  94:mtk_c.c       **** }
 510               		.loc 1 94 9 is_stmt 0 view .LVU167
 511 023e 4FEF 000C 		lea (12,%sp),%sp
 512               		.cfi_def_cfa_offset 12
  95:mtk_c.c       **** 
 513               		.loc 1 95 1 view .LVU168
 514 0242 70BA      		moveq #-70,%d0
 515 0244 D08A      		add.l %a2,%d0
 516               	.LVL47:
  95:mtk_c.c       **** 


 517               		.loc 1 95 1 view .LVU169
 518 0246 241F      		move.l (%sp)+,%d2
 519 0248 245F      		move.l (%sp)+,%a2
 520               	.LVL48:
  95:mtk_c.c       **** 
 521               		.loc 1 95 1 view .LVU170
 522 024a 4E75      		rts
 523               		.cfi_endproc
 524               	.LFE8:
 525               		.size	init_stack, .-init_stack
 526               		.align	2
 527               		.globl	begin_sch
 528               		.type	begin_sch, @function
 529               	begin_sch:
 530               	.LFB9:
  98:mtk_c.c       ****     curr_task = removeq(&ready);
 531               		.loc 1 98 17 is_stmt 1 view -0
 532               		.cfi_startproc
  99:mtk_c.c       ****     init_timer();
 533               		.loc 1 99 5 view .LVU172
 534               	.LVL49:
 535               	.LBB26:
 536               	.LBI26:
 117:mtk_c.c       **** }
 118:mtk_c.c       **** 
 119:mtk_c.c       **** 
 120:mtk_c.c       **** TASK_ID_TYPE removeq(TASK_ID_TYPE* ptr)
 537               		.loc 1 120 14 view .LVU173
 538               	.LBB27:
 121:mtk_c.c       **** {
 122:mtk_c.c       ****     if(*ptr == NULLTASKID){
 539               		.loc 1 122 5 view .LVU174
 540               		.loc 1 122 8 is_stmt 0 view .LVU175
 541 024c 2239 0000 		move.l ready,%d1
 541      0000 
 542               		.loc 1 122 7 view .LVU176
 543 0252 671A      		jeq .L37
 544               	.LBB28:
 123:mtk_c.c       **** 		return NULLTASKID;
 124:mtk_c.c       **** 	} else {
 125:mtk_c.c       **** 		TASK_ID_TYPE top = *ptr;
 545               		.loc 1 125 3 is_stmt 1 view .LVU177
 546               	.LVL50:
 126:mtk_c.c       **** 		*ptr = task_tab[top].next;
 547               		.loc 1 126 3 view .LVU178
 548               		.loc 1 126 23 is_stmt 0 view .LVU179
 549 0254 2001      		move.l %d1,%d0
 550 0256 D081      		add.l %d1,%d0
 551 0258 D080      		add.l %d0,%d0
 552 025a D081      		add.l %d1,%d0
 553 025c D080      		add.l %d0,%d0
 554 025e D080      		add.l %d0,%d0
 555 0260 2040      		move.l %d0,%a0
 556 0262 D1FC 0000 		add.l #task_tab+16,%a0
 556      0000 
 557               		.loc 1 126 8 view .LVU180
 558 0268 23D0 0000 		move.l (%a0),ready


 558      0000 
 127:mtk_c.c       **** 		return top;
 559               		.loc 1 127 3 is_stmt 1 view .LVU181
 560               	.LVL51:
 561               	.L37:
 562               		.loc 1 127 3 is_stmt 0 view .LVU182
 563               	.LBE28:
 564               	.LBE27:
 565               	.LBE26:
  99:mtk_c.c       ****     init_timer();
 566               		.loc 1 99 15 view .LVU183
 567 026e 23C1 0000 		move.l %d1,curr_task
 567      0000 
 100:mtk_c.c       ****     first_task();
 568               		.loc 1 100 5 is_stmt 1 view .LVU184
 569 0274 4EB9 0000 		jsr init_timer
 569      0000 
 570               	.LVL52:
 101:mtk_c.c       **** }
 571               		.loc 1 101 5 view .LVU185
 102:mtk_c.c       **** 
 572               		.loc 1 102 1 is_stmt 0 view .LVU186
 101:mtk_c.c       **** }
 573               		.loc 1 101 5 view .LVU187
 574 027a 4EF9 0000 		jra first_task
 574      0000 
 575               	.LVL53:
 576               		.cfi_endproc
 577               	.LFE9:
 578               		.size	begin_sch, .-begin_sch
 579               		.align	2
 580               		.globl	addq
 581               		.type	addq, @function
 582               	addq:
 583               	.LVL54:
 584               	.LFB10:
 105:mtk_c.c       ****     TASK_ID_TYPE tmp = *ptr;
 585               		.loc 1 105 46 is_stmt 1 view -0
 586               		.cfi_startproc
 105:mtk_c.c       ****     TASK_ID_TYPE tmp = *ptr;
 587               		.loc 1 105 46 is_stmt 0 view .LVU189
 588 0280 2F02      		move.l %d2,-(%sp)
 589               		.cfi_def_cfa_offset 8
 590               		.cfi_offset 2, -8
 591 0282 226F 0008 		move.l 8(%sp),%a1
 592 0286 242F 000C 		move.l 12(%sp),%d2
 106:mtk_c.c       ****     if (tmp == NULLTASKID)  *ptr=id;    //update the value of address of ptr to id
 593               		.loc 1 106 5 is_stmt 1 view .LVU190
 106:mtk_c.c       ****     if (tmp == NULLTASKID)  *ptr=id;    //update the value of address of ptr to id
 594               		.loc 1 106 18 is_stmt 0 view .LVU191
 595 028a 2051      		move.l (%a1),%a0
 596               	.LVL55:
 107:mtk_c.c       ****     else{
 597               		.loc 1 107 5 is_stmt 1 view .LVU192
 107:mtk_c.c       ****     else{
 598               		.loc 1 107 8 is_stmt 0 view .LVU193
 599 028c B0FC 0000 		cmp.w #0,%a0


 600 0290 661C      		jne .L44
 107:mtk_c.c       ****     else{
 601               		.loc 1 107 29 is_stmt 1 discriminator 1 view .LVU194
 107:mtk_c.c       ****     else{
 602               		.loc 1 107 33 is_stmt 0 discriminator 1 view .LVU195
 603 0292 2282      		move.l %d2,(%a1)
 604 0294 43F9 0000 		lea task_tab,%a1
 604      0000 
 116:mtk_c.c       **** }
 605               		.loc 1 116 5 is_stmt 1 discriminator 1 view .LVU196
 116:mtk_c.c       **** }
 606               		.loc 1 116 23 is_stmt 0 discriminator 1 view .LVU197
 607 029a 2002      		move.l %d2,%d0
 608 029c D082      		add.l %d2,%d0
 609 029e D080      		add.l %d0,%d0
 610 02a0 D082      		add.l %d2,%d0
 611 02a2 D080      		add.l %d0,%d0
 612 02a4 D080      		add.l %d0,%d0
 613 02a6 42B1 0810 		clr.l 16(%a1,%d0.l)
 117:mtk_c.c       **** 
 614               		.loc 1 117 1 discriminator 1 view .LVU198
 615 02aa 241F      		move.l (%sp)+,%d2
 616 02ac 4E75      		rts
 617               	.L44:
 618               	.LBB30:
 109:mtk_c.c       ****         while(j!=NULLTASKID){
 619               		.loc 1 109 9 is_stmt 1 view .LVU199
 109:mtk_c.c       ****         while(j!=NULLTASKID){
 620               		.loc 1 109 22 is_stmt 0 view .LVU200
 621 02ae 43F9 0000 		lea task_tab,%a1
 621      0000 
 622 02b4 2208      		move.l %a0,%d1
 623 02b6 D288      		add.l %a0,%d1
 624 02b8 2001      		move.l %d1,%d0
 625 02ba D081      		add.l %d1,%d0
 626 02bc D088      		add.l %a0,%d0
 627 02be D080      		add.l %d0,%d0
 628 02c0 D080      		add.l %d0,%d0
 629 02c2 2031 0810 		move.l 16(%a1,%d0.l),%d0
 630               	.LVL56:
 110:mtk_c.c       ****             tmp=j;
 631               		.loc 1 110 9 is_stmt 1 view .LVU201
 110:mtk_c.c       ****             tmp=j;
 632               		.loc 1 110 16 view .LVU202
 633 02c6 6716      		jeq .L46
 634               	.L55:
 111:mtk_c.c       ****             j=task_tab[tmp].next;
 635               		.loc 1 111 13 view .LVU203
 636               	.LVL57:
 112:mtk_c.c       ****         }
 637               		.loc 1 112 13 view .LVU204
 638 02c8 2040      		move.l %d0,%a0
 109:mtk_c.c       ****         while(j!=NULLTASKID){
 639               		.loc 1 109 22 is_stmt 0 view .LVU205
 640 02ca 2208      		move.l %a0,%d1
 641 02cc D288      		add.l %a0,%d1
 642 02ce 2001      		move.l %d1,%d0


 643               	.LVL58:
 109:mtk_c.c       ****         while(j!=NULLTASKID){
 644               		.loc 1 109 22 view .LVU206
 645 02d0 D081      		add.l %d1,%d0
 646 02d2 D088      		add.l %a0,%d0
 647 02d4 D080      		add.l %d0,%d0
 648 02d6 D080      		add.l %d0,%d0
 649 02d8 2031 0810 		move.l 16(%a1,%d0.l),%d0
 650               	.LVL59:
 110:mtk_c.c       ****             tmp=j;
 651               		.loc 1 110 9 is_stmt 1 view .LVU207
 110:mtk_c.c       ****             tmp=j;
 652               		.loc 1 110 16 view .LVU208
 653 02dc 66EA      		jne .L55
 654               	.L46:
 114:mtk_c.c       ****     }
 655               		.loc 1 114 9 view .LVU209
 114:mtk_c.c       ****     }
 656               		.loc 1 114 28 is_stmt 0 view .LVU210
 657 02de D281      		add.l %d1,%d1
 658 02e0 D288      		add.l %a0,%d1
 659 02e2 D281      		add.l %d1,%d1
 660 02e4 D281      		add.l %d1,%d1
 661 02e6 2382 1810 		move.l %d2,16(%a1,%d1.l)
 662               	.LBE30:
 116:mtk_c.c       **** }
 663               		.loc 1 116 5 is_stmt 1 view .LVU211
 116:mtk_c.c       **** }
 664               		.loc 1 116 23 is_stmt 0 view .LVU212
 665 02ea 2002      		move.l %d2,%d0
 666               	.LVL60:
 116:mtk_c.c       **** }
 667               		.loc 1 116 23 view .LVU213
 668 02ec D082      		add.l %d2,%d0
 669 02ee D080      		add.l %d0,%d0
 670 02f0 D082      		add.l %d2,%d0
 671 02f2 D080      		add.l %d0,%d0
 672 02f4 D080      		add.l %d0,%d0
 673 02f6 42B1 0810 		clr.l 16(%a1,%d0.l)
 117:mtk_c.c       **** 
 674               		.loc 1 117 1 view .LVU214
 675 02fa 241F      		move.l (%sp)+,%d2
 676 02fc 4E75      		rts
 677               		.cfi_endproc
 678               	.LFE10:
 679               		.size	addq, .-addq
 680               		.align	2
 681               		.globl	removeq
 682               		.type	removeq, @function
 683               	removeq:
 684               	.LVL61:
 685               	.LFB11:
 121:mtk_c.c       ****     if(*ptr == NULLTASKID){
 686               		.loc 1 121 1 is_stmt 1 view -0
 687               		.cfi_startproc
 121:mtk_c.c       ****     if(*ptr == NULLTASKID){
 688               		.loc 1 121 1 is_stmt 0 view .LVU216


 689 02fe 226F 0004 		move.l 4(%sp),%a1
 122:mtk_c.c       **** 		return NULLTASKID;
 690               		.loc 1 122 5 is_stmt 1 view .LVU217
 122:mtk_c.c       **** 		return NULLTASKID;
 691               		.loc 1 122 8 is_stmt 0 view .LVU218
 692 0302 2011      		move.l (%a1),%d0
 122:mtk_c.c       **** 		return NULLTASKID;
 693               		.loc 1 122 7 view .LVU219
 694 0304 6716      		jeq .L56
 695               	.LBB31:
 125:mtk_c.c       **** 		*ptr = task_tab[top].next;
 696               		.loc 1 125 3 is_stmt 1 view .LVU220
 697               	.LVL62:
 126:mtk_c.c       **** 		return top;
 698               		.loc 1 126 3 view .LVU221
 126:mtk_c.c       **** 		return top;
 699               		.loc 1 126 23 is_stmt 0 view .LVU222
 700 0306 2200      		move.l %d0,%d1
 701 0308 D280      		add.l %d0,%d1
 702 030a D281      		add.l %d1,%d1
 703 030c D280      		add.l %d0,%d1
 704 030e D281      		add.l %d1,%d1
 705 0310 D281      		add.l %d1,%d1
 706 0312 2041      		move.l %d1,%a0
 707 0314 D1FC 0000 		add.l #task_tab+16,%a0
 707      0000 
 126:mtk_c.c       **** 		return top;
 708               		.loc 1 126 8 view .LVU223
 709 031a 2290      		move.l (%a0),(%a1)
 710               		.loc 1 127 3 is_stmt 1 view .LVU224
 711               	.LVL63:
 712               	.L56:
 713               		.loc 1 127 3 is_stmt 0 view .LVU225
 714               	.LBE31:
 128:mtk_c.c       **** 	}
 129:mtk_c.c       **** }
 715               		.loc 1 129 1 view .LVU226
 716 031c 4E75      		rts
 717               		.cfi_endproc
 718               	.LFE11:
 719               		.size	removeq, .-removeq
 720               		.align	2
 721               		.globl	p_body
 722               		.type	p_body, @function
 723               	p_body:
 724               	.LVL64:
 725               	.LFB12:
 130:mtk_c.c       **** 
 131:mtk_c.c       **** 
 132:mtk_c.c       **** void p_body(int id){
 726               		.loc 1 132 20 is_stmt 1 view -0
 727               		.cfi_startproc
 728               		.loc 1 132 20 is_stmt 0 view .LVU228
 729 031e 2F0A      		move.l %a2,-(%sp)
 730               		.cfi_def_cfa_offset 8
 731               		.cfi_offset 10, -8
 133:mtk_c.c       ****     semaphore[id].count--;


 732               		.loc 1 133 5 is_stmt 1 view .LVU229
 733               		.loc 1 133 18 is_stmt 0 view .LVU230
 734 0320 41F9 0000 		lea semaphore,%a0
 734      0000 
 735 0326 202F 0008 		move.l 8(%sp),%d0
 736 032a E788      		lsl.l #3,%d0
 737               		.loc 1 133 24 view .LVU231
 738 032c 2230 0800 		move.l (%a0,%d0.l),%d1
 739 0330 5381      		subq.l #1,%d1
 740 0332 2181 0800 		move.l %d1,(%a0,%d0.l)
 134:mtk_c.c       ****     if (semaphore[id].count < 0){
 741               		.loc 1 134 5 is_stmt 1 view .LVU232
 742               		.loc 1 134 8 is_stmt 0 view .LVU233
 743 0336 6B04      		jmi .L80
 135:mtk_c.c       ****         sleep(id);
 136:mtk_c.c       ****     }
 137:mtk_c.c       **** }
 744               		.loc 1 137 1 view .LVU234
 745 0338 245F      		move.l (%sp)+,%a2
 746 033a 4E75      		rts
 747               	.L80:
 135:mtk_c.c       ****         sleep(id);
 748               		.loc 1 135 9 is_stmt 1 view .LVU235
 749               	.LVL65:
 750               	.LBB42:
 751               	.LBI42:
 138:mtk_c.c       **** 
 139:mtk_c.c       **** 
 140:mtk_c.c       **** void v_body(int id){
 141:mtk_c.c       **** 	semaphore[id].count++;
 142:mtk_c.c       **** 	if(semaphore[id].count <= 0){
 143:mtk_c.c       ****         wakeup(id);
 144:mtk_c.c       ****     }
 145:mtk_c.c       **** }
 146:mtk_c.c       **** 
 147:mtk_c.c       **** 
 148:mtk_c.c       **** void sched()
 149:mtk_c.c       **** {
 150:mtk_c.c       **** 	next_task = removeq(&ready);
 151:mtk_c.c       **** 	if(next_task == NULLTASKID)
 152:mtk_c.c       **** 		while(1);   //if next_task is nulltaskid, infinite loop
 153:mtk_c.c       **** }
 154:mtk_c.c       **** 
 155:mtk_c.c       **** 
 156:mtk_c.c       **** void sleep(int ch){
 752               		.loc 1 156 6 view .LVU236
 753               	.LBB43:
 157:mtk_c.c       ****     addq(&semaphore[ch].task_list, curr_task);
 754               		.loc 1 157 5 view .LVU237
 755 033c 2279 0000 		move.l curr_task,%a1
 755      0000 
 756               	.LVL66:
 757               	.LBB44:
 758               	.LBI44:
 105:mtk_c.c       ****     TASK_ID_TYPE tmp = *ptr;
 759               		.loc 1 105 6 view .LVU238
 760               	.LBB45:


 106:mtk_c.c       ****     if (tmp == NULLTASKID)  *ptr=id;    //update the value of address of ptr to id
 761               		.loc 1 106 5 view .LVU239
 106:mtk_c.c       ****     if (tmp == NULLTASKID)  *ptr=id;    //update the value of address of ptr to id
 762               		.loc 1 106 18 is_stmt 0 view .LVU240
 763 0342 41F0 0804 		lea 4(%a0,%d0.l),%a0
 764 0346 2210      		move.l (%a0),%d1
 765               	.LVL67:
 107:mtk_c.c       ****     else{
 766               		.loc 1 107 5 is_stmt 1 view .LVU241
 107:mtk_c.c       ****     else{
 767               		.loc 1 107 8 is_stmt 0 view .LVU242
 768 0348 6622      		jne .L65
 107:mtk_c.c       ****     else{
 769               		.loc 1 107 29 is_stmt 1 view .LVU243
 107:mtk_c.c       ****     else{
 770               		.loc 1 107 33 is_stmt 0 view .LVU244
 771 034a 2089      		move.l %a1,(%a0)
 772 034c 45F9 0000 		lea task_tab,%a2
 772      0000 
 116:mtk_c.c       **** }
 773               		.loc 1 116 5 is_stmt 1 view .LVU245
 116:mtk_c.c       **** }
 774               		.loc 1 116 23 is_stmt 0 view .LVU246
 775 0352 2009      		move.l %a1,%d0
 776 0354 D089      		add.l %a1,%d0
 777 0356 D080      		add.l %d0,%d0
 778 0358 D089      		add.l %a1,%d0
 779 035a D080      		add.l %d0,%d0
 780 035c D080      		add.l %d0,%d0
 781 035e 42B2 0810 		clr.l 16(%a2,%d0.l)
 782               	.LVL68:
 116:mtk_c.c       **** }
 783               		.loc 1 116 23 view .LVU247
 784               	.LBE45:
 785               	.LBE44:
 158:mtk_c.c       **** 	sched();
 786               		.loc 1 158 2 is_stmt 1 view .LVU248
 787               	.LBB48:
 788               	.LBI48:
 148:mtk_c.c       **** {
 789               		.loc 1 148 6 view .LVU249
 790               	.LBB49:
 150:mtk_c.c       **** 	if(next_task == NULLTASKID)
 791               		.loc 1 150 2 view .LVU250
 792               	.LBB50:
 793               	.LBI50:
 120:mtk_c.c       **** {
 794               		.loc 1 120 14 view .LVU251
 795               	.LBB51:
 122:mtk_c.c       **** 		return NULLTASKID;
 796               		.loc 1 122 5 view .LVU252
 122:mtk_c.c       **** 		return NULLTASKID;
 797               		.loc 1 122 8 is_stmt 0 view .LVU253
 798 0362 2239 0000 		move.l ready,%d1
 798      0000 
 122:mtk_c.c       **** 		return NULLTASKID;
 799               		.loc 1 122 7 view .LVU254


 800 0368 6656      		jne .L81
 801               	.L69:
 802               	.LBE51:
 803               	.LBE50:
 152:mtk_c.c       **** }
 804               		.loc 1 152 3 is_stmt 1 view .LVU255
 152:mtk_c.c       **** }
 805               		.loc 1 152 8 view .LVU256
 152:mtk_c.c       **** }
 806               		.loc 1 152 3 view .LVU257
 152:mtk_c.c       **** }
 807               		.loc 1 152 8 view .LVU258
 808 036a 60FE      		jra .L69
 809               	.LVL69:
 810               	.L65:
 152:mtk_c.c       **** }
 811               		.loc 1 152 8 is_stmt 0 view .LVU259
 812               	.LBE49:
 813               	.LBE48:
 814               	.LBB56:
 815               	.LBB47:
 816               	.LBB46:
 109:mtk_c.c       ****         while(j!=NULLTASKID){
 817               		.loc 1 109 9 is_stmt 1 view .LVU260
 109:mtk_c.c       ****         while(j!=NULLTASKID){
 818               		.loc 1 109 22 is_stmt 0 view .LVU261
 819 036c 45F9 0000 		lea task_tab,%a2
 819      0000 
 820 0372 2041      		move.l %d1,%a0
 821 0374 D1C1      		add.l %d1,%a0
 822 0376 2008      		move.l %a0,%d0
 823 0378 D088      		add.l %a0,%d0
 824 037a D081      		add.l %d1,%d0
 825 037c D080      		add.l %d0,%d0
 826 037e D080      		add.l %d0,%d0
 827 0380 2032 0810 		move.l 16(%a2,%d0.l),%d0
 828               	.LVL70:
 110:mtk_c.c       ****             tmp=j;
 829               		.loc 1 110 9 is_stmt 1 view .LVU262
 110:mtk_c.c       ****             tmp=j;
 830               		.loc 1 110 16 view .LVU263
 831 0384 6716      		jeq .L67
 832               	.L82:
 111:mtk_c.c       ****             j=task_tab[tmp].next;
 833               		.loc 1 111 13 view .LVU264
 834               	.LVL71:
 112:mtk_c.c       ****         }
 835               		.loc 1 112 13 view .LVU265
 836 0386 2200      		move.l %d0,%d1
 109:mtk_c.c       ****         while(j!=NULLTASKID){
 837               		.loc 1 109 22 is_stmt 0 view .LVU266
 838 0388 2041      		move.l %d1,%a0
 839 038a D1C1      		add.l %d1,%a0
 840 038c 2008      		move.l %a0,%d0
 841               	.LVL72:
 109:mtk_c.c       ****         while(j!=NULLTASKID){
 842               		.loc 1 109 22 view .LVU267


 843 038e D088      		add.l %a0,%d0
 844 0390 D081      		add.l %d1,%d0
 845 0392 D080      		add.l %d0,%d0
 846 0394 D080      		add.l %d0,%d0
 847 0396 2032 0810 		move.l 16(%a2,%d0.l),%d0
 848               	.LVL73:
 110:mtk_c.c       ****             tmp=j;
 849               		.loc 1 110 9 is_stmt 1 view .LVU268
 110:mtk_c.c       ****             tmp=j;
 850               		.loc 1 110 16 view .LVU269
 851 039a 66EA      		jne .L82
 852               	.L67:
 114:mtk_c.c       ****     }
 853               		.loc 1 114 9 view .LVU270
 114:mtk_c.c       ****     }
 854               		.loc 1 114 28 is_stmt 0 view .LVU271
 855 039c D1C8      		add.l %a0,%a0
 856 039e D1C1      		add.l %d1,%a0
 857 03a0 D1C8      		add.l %a0,%a0
 858 03a2 D1C8      		add.l %a0,%a0
 859 03a4 2589 8810 		move.l %a1,16(%a2,%a0.l)
 860               	.LBE46:
 116:mtk_c.c       **** }
 861               		.loc 1 116 5 is_stmt 1 view .LVU272
 116:mtk_c.c       **** }
 862               		.loc 1 116 23 is_stmt 0 view .LVU273
 863 03a8 2009      		move.l %a1,%d0
 864               	.LVL74:
 116:mtk_c.c       **** }
 865               		.loc 1 116 23 view .LVU274
 866 03aa D089      		add.l %a1,%d0
 867 03ac D080      		add.l %d0,%d0
 868 03ae D089      		add.l %a1,%d0
 869 03b0 D080      		add.l %d0,%d0
 870 03b2 D080      		add.l %d0,%d0
 871 03b4 42B2 0810 		clr.l 16(%a2,%d0.l)
 872               	.LVL75:
 116:mtk_c.c       **** }
 873               		.loc 1 116 23 view .LVU275
 874               	.LBE47:
 875               	.LBE56:
 876               		.loc 1 158 2 is_stmt 1 view .LVU276
 877               	.LBB57:
 148:mtk_c.c       **** {
 878               		.loc 1 148 6 view .LVU277
 879               	.LBB55:
 150:mtk_c.c       **** 	if(next_task == NULLTASKID)
 880               		.loc 1 150 2 view .LVU278
 881               	.LBB54:
 120:mtk_c.c       **** {
 882               		.loc 1 120 14 view .LVU279
 883               	.LBB53:
 122:mtk_c.c       **** 		return NULLTASKID;
 884               		.loc 1 122 5 view .LVU280
 122:mtk_c.c       **** 		return NULLTASKID;
 885               		.loc 1 122 8 is_stmt 0 view .LVU281
 886 03b8 2239 0000 		move.l ready,%d1


 886      0000 
 122:mtk_c.c       **** 		return NULLTASKID;
 887               		.loc 1 122 7 view .LVU282
 888 03be 67AA      		jeq .L69
 889               	.L81:
 890               	.LBB52:
 125:mtk_c.c       **** 		*ptr = task_tab[top].next;
 891               		.loc 1 125 3 is_stmt 1 view .LVU283
 892               	.LVL76:
 126:mtk_c.c       **** 		return top;
 893               		.loc 1 126 3 view .LVU284
 126:mtk_c.c       **** 		return top;
 894               		.loc 1 126 23 is_stmt 0 view .LVU285
 895 03c0 2001      		move.l %d1,%d0
 896 03c2 D081      		add.l %d1,%d0
 897 03c4 D080      		add.l %d0,%d0
 898 03c6 D081      		add.l %d1,%d0
 899 03c8 D080      		add.l %d0,%d0
 900 03ca D080      		add.l %d0,%d0
 126:mtk_c.c       **** 		return top;
 901               		.loc 1 126 8 view .LVU286
 902 03cc 23F2 0810 		move.l 16(%a2,%d0.l),ready
 902      0000 0000 
 127:mtk_c.c       **** 	}
 903               		.loc 1 127 3 is_stmt 1 view .LVU287
 904               	.LVL77:
 127:mtk_c.c       **** 	}
 905               		.loc 1 127 3 is_stmt 0 view .LVU288
 906               	.LBE52:
 907               	.LBE53:
 908               	.LBE54:
 150:mtk_c.c       **** 	if(next_task == NULLTASKID)
 909               		.loc 1 150 12 view .LVU289
 910 03d4 23C1 0000 		move.l %d1,next_task
 910      0000 
 151:mtk_c.c       **** 		while(1);   //if next_task is nulltaskid, infinite loop
 911               		.loc 1 151 2 is_stmt 1 view .LVU290
 151:mtk_c.c       **** 		while(1);   //if next_task is nulltaskid, infinite loop
 912               		.loc 1 151 2 is_stmt 0 view .LVU291
 913               	.LBE55:
 914               	.LBE57:
 159:mtk_c.c       **** 	swtch();    //calling subroutine from asm
 915               		.loc 1 159 2 is_stmt 1 view .LVU292
 916               	.LBE43:
 917               	.LBE42:
 137:mtk_c.c       **** 
 918               		.loc 1 137 1 is_stmt 0 view .LVU293
 919 03da 245F      		move.l (%sp)+,%a2
 920               	.LBB59:
 921               	.LBB58:
 922               		.loc 1 159 2 view .LVU294
 923 03dc 4EF9 0000 		jra swtch
 923      0000 
 924               	.LVL78:
 925               		.loc 1 159 2 view .LVU295
 926               	.LBE58:
 927               	.LBE59:


 928               		.cfi_endproc
 929               	.LFE12:
 930               		.size	p_body, .-p_body
 931               		.align	2
 932               		.globl	v_body
 933               		.type	v_body, @function
 934               	v_body:
 935               	.LVL79:
 936               	.LFB13:
 140:mtk_c.c       **** 	semaphore[id].count++;
 937               		.loc 1 140 20 is_stmt 1 view -0
 938               		.cfi_startproc
 140:mtk_c.c       **** 	semaphore[id].count++;
 939               		.loc 1 140 20 is_stmt 0 view .LVU297
 940 03e2 2F0A      		move.l %a2,-(%sp)
 941               		.cfi_def_cfa_offset 8
 942               		.cfi_offset 10, -8
 943 03e4 2F02      		move.l %d2,-(%sp)
 944               		.cfi_def_cfa_offset 12
 945               		.cfi_offset 2, -12
 141:mtk_c.c       **** 	if(semaphore[id].count <= 0){
 946               		.loc 1 141 2 is_stmt 1 view .LVU298
 141:mtk_c.c       **** 	if(semaphore[id].count <= 0){
 947               		.loc 1 141 15 is_stmt 0 view .LVU299
 948 03e6 41F9 0000 		lea semaphore,%a0
 948      0000 
 949 03ec 202F 000C 		move.l 12(%sp),%d0
 950 03f0 E788      		lsl.l #3,%d0
 141:mtk_c.c       **** 	if(semaphore[id].count <= 0){
 951               		.loc 1 141 21 view .LVU300
 952 03f2 2230 0800 		move.l (%a0,%d0.l),%d1
 953 03f6 5281      		addq.l #1,%d1
 954 03f8 2181 0800 		move.l %d1,(%a0,%d0.l)
 142:mtk_c.c       ****         wakeup(id);
 955               		.loc 1 142 2 is_stmt 1 view .LVU301
 142:mtk_c.c       ****         wakeup(id);
 956               		.loc 1 142 4 is_stmt 0 view .LVU302
 957 03fc 6F06      		jle .L99
 145:mtk_c.c       **** 
 958               		.loc 1 145 1 view .LVU303
 959 03fe 241F      		move.l (%sp)+,%d2
 960 0400 245F      		move.l (%sp)+,%a2
 961 0402 4E75      		rts
 962               	.L99:
 143:mtk_c.c       ****     }
 963               		.loc 1 143 9 is_stmt 1 view .LVU304
 964               	.LVL80:
 965               	.LBB68:
 966               	.LBI68:
 160:mtk_c.c       **** }
 161:mtk_c.c       **** 
 162:mtk_c.c       **** 
 163:mtk_c.c       **** void wakeup(int ch){
 967               		.loc 1 163 6 view .LVU305
 164:mtk_c.c       ****     addq(&ready, removeq(&semaphore[ch].task_list));
 968               		.loc 1 164 5 view .LVU306
 969               	.LBB69:


 970               	.LBI69:
 120:mtk_c.c       **** {
 971               		.loc 1 120 14 view .LVU307
 972               	.LBB70:
 122:mtk_c.c       **** 		return NULLTASKID;
 973               		.loc 1 122 5 view .LVU308
 122:mtk_c.c       **** 		return NULLTASKID;
 974               		.loc 1 122 8 is_stmt 0 view .LVU309
 975 0404 41F0 0804 		lea 4(%a0,%d0.l),%a0
 976 0408 2410      		move.l (%a0),%d2
 977 040a 45F9 0000 		lea task_tab,%a2
 977      0000 
 122:mtk_c.c       **** 		return NULLTASKID;
 978               		.loc 1 122 7 view .LVU310
 979 0410 6626      		jne .L96
 980 0412 93C9      		sub.l %a1,%a1
 981               	.LVL81:
 122:mtk_c.c       **** 		return NULLTASKID;
 982               		.loc 1 122 7 view .LVU311
 983               	.LBE70:
 984               	.LBE69:
 985               	.LBB73:
 986               	.LBI73:
 105:mtk_c.c       ****     TASK_ID_TYPE tmp = *ptr;
 987               		.loc 1 105 6 is_stmt 1 view .LVU312
 988               	.LBB74:
 106:mtk_c.c       ****     if (tmp == NULLTASKID)  *ptr=id;    //update the value of address of ptr to id
 989               		.loc 1 106 5 view .LVU313
 106:mtk_c.c       ****     if (tmp == NULLTASKID)  *ptr=id;    //update the value of address of ptr to id
 990               		.loc 1 106 18 is_stmt 0 view .LVU314
 991 0414 2079 0000 		move.l ready,%a0
 991      0000 
 992               	.LVL82:
 107:mtk_c.c       ****     else{
 993               		.loc 1 107 5 is_stmt 1 view .LVU315
 107:mtk_c.c       ****     else{
 994               		.loc 1 107 8 is_stmt 0 view .LVU316
 995 041a B0FC 0000 		cmp.w #0,%a0
 996 041e 6636      		jne .L86
 997               	.L100:
 107:mtk_c.c       ****     else{
 998               		.loc 1 107 29 is_stmt 1 view .LVU317
 107:mtk_c.c       ****     else{
 999               		.loc 1 107 33 is_stmt 0 view .LVU318
 1000 0420 23C2 0000 		move.l %d2,ready
 1000      0000 
 116:mtk_c.c       **** }
 1001               		.loc 1 116 5 is_stmt 1 view .LVU319
 116:mtk_c.c       **** }
 1002               		.loc 1 116 23 is_stmt 0 view .LVU320
 1003 0426 D3C9      		add.l %a1,%a1
 1004 0428 D3C2      		add.l %d2,%a1
 1005 042a D3C9      		add.l %a1,%a1
 1006 042c D3C9      		add.l %a1,%a1
 1007 042e 42B2 9810 		clr.l 16(%a2,%a1.l)
 1008               	.LVL83:
 1009               	.L102:


 116:mtk_c.c       **** }
 1010               		.loc 1 116 23 view .LVU321
 1011               	.LBE74:
 1012               	.LBE73:
 1013               	.LBE68:
 145:mtk_c.c       **** 
 1014               		.loc 1 145 1 view .LVU322
 1015 0432 241F      		move.l (%sp)+,%d2
 1016 0434 245F      		move.l (%sp)+,%a2
 1017 0436 4E75      		rts
 1018               	.LVL84:
 1019               	.L96:
 1020               	.LBB79:
 1021               	.LBB77:
 1022               	.LBB72:
 1023               	.LBB71:
 125:mtk_c.c       **** 		*ptr = task_tab[top].next;
 1024               		.loc 1 125 3 is_stmt 1 view .LVU323
 126:mtk_c.c       **** 		return top;
 1025               		.loc 1 126 3 view .LVU324
 126:mtk_c.c       **** 		return top;
 1026               		.loc 1 126 23 is_stmt 0 view .LVU325
 1027 0438 2242      		move.l %d2,%a1
 1028 043a D3C2      		add.l %d2,%a1
 1029 043c 2009      		move.l %a1,%d0
 1030 043e D089      		add.l %a1,%d0
 1031 0440 D082      		add.l %d2,%d0
 1032 0442 D080      		add.l %d0,%d0
 1033 0444 D080      		add.l %d0,%d0
 126:mtk_c.c       **** 		return top;
 1034               		.loc 1 126 8 view .LVU326
 1035 0446 20B2 0810 		move.l 16(%a2,%d0.l),(%a0)
 127:mtk_c.c       **** 	}
 1036               		.loc 1 127 3 is_stmt 1 view .LVU327
 1037               	.LVL85:
 127:mtk_c.c       **** 	}
 1038               		.loc 1 127 3 is_stmt 0 view .LVU328
 1039               	.LBE71:
 1040               	.LBE72:
 1041               	.LBE77:
 1042               	.LBB78:
 105:mtk_c.c       ****     TASK_ID_TYPE tmp = *ptr;
 1043               		.loc 1 105 6 is_stmt 1 view .LVU329
 1044               	.LBB76:
 106:mtk_c.c       ****     if (tmp == NULLTASKID)  *ptr=id;    //update the value of address of ptr to id
 1045               		.loc 1 106 5 view .LVU330
 106:mtk_c.c       ****     if (tmp == NULLTASKID)  *ptr=id;    //update the value of address of ptr to id
 1046               		.loc 1 106 18 is_stmt 0 view .LVU331
 1047 044a 2079 0000 		move.l ready,%a0
 1047      0000 
 1048               	.LVL86:
 107:mtk_c.c       ****     else{
 1049               		.loc 1 107 5 is_stmt 1 view .LVU332
 107:mtk_c.c       ****     else{
 1050               		.loc 1 107 8 is_stmt 0 view .LVU333
 1051 0450 B0FC 0000 		cmp.w #0,%a0
 1052 0454 67CA      		jeq .L100


 1053               	.LVL87:
 1054               	.L86:
 1055               	.LBB75:
 109:mtk_c.c       ****         while(j!=NULLTASKID){
 1056               		.loc 1 109 9 is_stmt 1 view .LVU334
 109:mtk_c.c       ****         while(j!=NULLTASKID){
 1057               		.loc 1 109 22 is_stmt 0 view .LVU335
 1058 0456 2208      		move.l %a0,%d1
 1059 0458 D288      		add.l %a0,%d1
 1060 045a 2001      		move.l %d1,%d0
 1061 045c D081      		add.l %d1,%d0
 1062 045e D088      		add.l %a0,%d0
 1063 0460 D080      		add.l %d0,%d0
 1064 0462 D080      		add.l %d0,%d0
 1065 0464 2032 0810 		move.l 16(%a2,%d0.l),%d0
 1066               	.LVL88:
 110:mtk_c.c       ****             tmp=j;
 1067               		.loc 1 110 9 is_stmt 1 view .LVU336
 110:mtk_c.c       ****             tmp=j;
 1068               		.loc 1 110 16 view .LVU337
 1069 0468 6716      		jeq .L88
 1070               	.L101:
 111:mtk_c.c       ****             j=task_tab[tmp].next;
 1071               		.loc 1 111 13 view .LVU338
 1072               	.LVL89:
 112:mtk_c.c       ****         }
 1073               		.loc 1 112 13 view .LVU339
 1074 046a 2040      		move.l %d0,%a0
 109:mtk_c.c       ****         while(j!=NULLTASKID){
 1075               		.loc 1 109 9 view .LVU340
 109:mtk_c.c       ****         while(j!=NULLTASKID){
 1076               		.loc 1 109 22 is_stmt 0 view .LVU341
 1077 046c 2208      		move.l %a0,%d1
 1078 046e D288      		add.l %a0,%d1
 1079 0470 2001      		move.l %d1,%d0
 1080               	.LVL90:
 109:mtk_c.c       ****         while(j!=NULLTASKID){
 1081               		.loc 1 109 22 view .LVU342
 1082 0472 D081      		add.l %d1,%d0
 1083 0474 D088      		add.l %a0,%d0
 1084 0476 D080      		add.l %d0,%d0
 1085 0478 D080      		add.l %d0,%d0
 1086 047a 2032 0810 		move.l 16(%a2,%d0.l),%d0
 1087               	.LVL91:
 110:mtk_c.c       ****             tmp=j;
 1088               		.loc 1 110 9 is_stmt 1 view .LVU343
 110:mtk_c.c       ****             tmp=j;
 1089               		.loc 1 110 16 view .LVU344
 1090 047e 66EA      		jne .L101
 1091               	.L88:
 114:mtk_c.c       ****     }
 1092               		.loc 1 114 9 view .LVU345
 114:mtk_c.c       ****     }
 1093               		.loc 1 114 28 is_stmt 0 view .LVU346
 1094 0480 D281      		add.l %d1,%d1
 1095 0482 D288      		add.l %a0,%d1
 1096 0484 D281      		add.l %d1,%d1


 1097 0486 D281      		add.l %d1,%d1
 1098 0488 2582 1810 		move.l %d2,16(%a2,%d1.l)
 1099               	.LBE75:
 116:mtk_c.c       **** }
 1100               		.loc 1 116 5 is_stmt 1 view .LVU347
 116:mtk_c.c       **** }
 1101               		.loc 1 116 23 is_stmt 0 view .LVU348
 1102 048c D3C9      		add.l %a1,%a1
 1103 048e D3C2      		add.l %d2,%a1
 1104 0490 D3C9      		add.l %a1,%a1
 1105 0492 D3C9      		add.l %a1,%a1
 1106 0494 42B2 9810 		clr.l 16(%a2,%a1.l)
 1107               	.LVL92:
 116:mtk_c.c       **** }
 1108               		.loc 1 116 23 view .LVU349
 1109 0498 6098      		jra .L102
 1110               	.LBE76:
 1111               	.LBE78:
 1112               	.LBE79:
 1113               		.cfi_endproc
 1114               	.LFE13:
 1115               		.size	v_body, .-v_body
 1116               		.align	2
 1117               		.globl	sched
 1118               		.type	sched, @function
 1119               	sched:
 1120               	.LFB14:
 149:mtk_c.c       **** 	next_task = removeq(&ready);
 1121               		.loc 1 149 1 is_stmt 1 view -0
 1122               		.cfi_startproc
 150:mtk_c.c       **** 	if(next_task == NULLTASKID)
 1123               		.loc 1 150 2 view .LVU351
 1124               	.LVL93:
 1125               	.LBB83:
 1126               	.LBI83:
 120:mtk_c.c       **** {
 1127               		.loc 1 120 14 view .LVU352
 1128               	.LBB84:
 122:mtk_c.c       **** 		return NULLTASKID;
 1129               		.loc 1 122 5 view .LVU353
 122:mtk_c.c       **** 		return NULLTASKID;
 1130               		.loc 1 122 8 is_stmt 0 view .LVU354
 1131 049a 2239 0000 		move.l ready,%d1
 1131      0000 
 122:mtk_c.c       **** 		return NULLTASKID;
 1132               		.loc 1 122 7 view .LVU355
 1133 04a0 6722      		jeq .L105
 1134               	.LBB85:
 125:mtk_c.c       **** 		*ptr = task_tab[top].next;
 1135               		.loc 1 125 3 is_stmt 1 view .LVU356
 1136               	.LVL94:
 126:mtk_c.c       **** 		return top;
 1137               		.loc 1 126 3 view .LVU357
 126:mtk_c.c       **** 		return top;
 1138               		.loc 1 126 23 is_stmt 0 view .LVU358
 1139 04a2 2001      		move.l %d1,%d0
 1140 04a4 D081      		add.l %d1,%d0


 1141 04a6 D080      		add.l %d0,%d0
 1142 04a8 D081      		add.l %d1,%d0
 1143 04aa D080      		add.l %d0,%d0
 1144 04ac D080      		add.l %d0,%d0
 1145 04ae 2040      		move.l %d0,%a0
 1146 04b0 D1FC 0000 		add.l #task_tab+16,%a0
 1146      0000 
 126:mtk_c.c       **** 		return top;
 1147               		.loc 1 126 8 view .LVU359
 1148 04b6 23D0 0000 		move.l (%a0),ready
 1148      0000 
 127:mtk_c.c       **** 	}
 1149               		.loc 1 127 3 is_stmt 1 view .LVU360
 1150               	.LVL95:
 127:mtk_c.c       **** 	}
 1151               		.loc 1 127 3 is_stmt 0 view .LVU361
 1152               	.LBE85:
 1153               	.LBE84:
 1154               	.LBE83:
 150:mtk_c.c       **** 	if(next_task == NULLTASKID)
 1155               		.loc 1 150 12 view .LVU362
 1156 04bc 23C1 0000 		move.l %d1,next_task
 1156      0000 
 151:mtk_c.c       **** 		while(1);   //if next_task is nulltaskid, infinite loop
 1157               		.loc 1 151 2 is_stmt 1 view .LVU363
 153:mtk_c.c       **** 
 1158               		.loc 1 153 1 is_stmt 0 view .LVU364
 1159 04c2 4E75      		rts
 1160               	.LVL96:
 1161               	.L105:
 152:mtk_c.c       **** }
 1162               		.loc 1 152 3 is_stmt 1 discriminator 1 view .LVU365
 152:mtk_c.c       **** }
 1163               		.loc 1 152 8 discriminator 1 view .LVU366
 152:mtk_c.c       **** }
 1164               		.loc 1 152 3 discriminator 1 view .LVU367
 152:mtk_c.c       **** }
 1165               		.loc 1 152 8 discriminator 1 view .LVU368
 1166 04c4 60FE      		jra .L105
 1167               		.cfi_endproc
 1168               	.LFE14:
 1169               		.size	sched, .-sched
 1170               		.align	2
 1171               		.globl	sleep
 1172               		.type	sleep, @function
 1173               	sleep:
 1174               	.LVL97:
 1175               	.LFB15:
 156:mtk_c.c       ****     addq(&semaphore[ch].task_list, curr_task);
 1176               		.loc 1 156 19 view -0
 1177               		.cfi_startproc
 156:mtk_c.c       ****     addq(&semaphore[ch].task_list, curr_task);
 1178               		.loc 1 156 19 is_stmt 0 view .LVU370
 1179 04c6 2F02      		move.l %d2,-(%sp)
 1180               		.cfi_def_cfa_offset 8
 1181               		.cfi_offset 2, -8
 157:mtk_c.c       **** 	sched();


 1182               		.loc 1 157 5 is_stmt 1 view .LVU371
 1183 04c8 2439 0000 		move.l curr_task,%d2
 1183      0000 
 1184               	.LVL98:
 1185               	.LBB94:
 1186               	.LBI94:
 105:mtk_c.c       ****     TASK_ID_TYPE tmp = *ptr;
 1187               		.loc 1 105 6 view .LVU372
 1188               	.LBB95:
 106:mtk_c.c       ****     if (tmp == NULLTASKID)  *ptr=id;    //update the value of address of ptr to id
 1189               		.loc 1 106 5 view .LVU373
 106:mtk_c.c       ****     if (tmp == NULLTASKID)  *ptr=id;    //update the value of address of ptr to id
 1190               		.loc 1 106 18 is_stmt 0 view .LVU374
 1191 04ce 202F 0008 		move.l 8(%sp),%d0
 1192 04d2 E788      		lsl.l #3,%d0
 1193 04d4 0680 0000 		add.l #semaphore+4,%d0
 1193      0000 
 1194               	.LVL99:
 106:mtk_c.c       ****     if (tmp == NULLTASKID)  *ptr=id;    //update the value of address of ptr to id
 1195               		.loc 1 106 18 view .LVU375
 1196 04da 2040      		move.l %d0,%a0
 1197 04dc 2210      		move.l (%a0),%d1
 1198               	.LVL100:
 107:mtk_c.c       ****     else{
 1199               		.loc 1 107 5 is_stmt 1 view .LVU376
 107:mtk_c.c       ****     else{
 1200               		.loc 1 107 8 is_stmt 0 view .LVU377
 1201 04de 6644      		jne .L110
 107:mtk_c.c       ****     else{
 1202               		.loc 1 107 29 is_stmt 1 view .LVU378
 107:mtk_c.c       ****     else{
 1203               		.loc 1 107 33 is_stmt 0 view .LVU379
 1204 04e0 2082      		move.l %d2,(%a0)
 1205 04e2 43F9 0000 		lea task_tab,%a1
 1205      0000 
 116:mtk_c.c       **** }
 1206               		.loc 1 116 5 is_stmt 1 view .LVU380
 116:mtk_c.c       **** }
 1207               		.loc 1 116 23 is_stmt 0 view .LVU381
 1208 04e8 2002      		move.l %d2,%d0
 1209               	.LVL101:
 116:mtk_c.c       **** }
 1210               		.loc 1 116 23 view .LVU382
 1211 04ea D082      		add.l %d2,%d0
 1212 04ec D080      		add.l %d0,%d0
 1213 04ee D082      		add.l %d2,%d0
 1214 04f0 D080      		add.l %d0,%d0
 1215 04f2 D080      		add.l %d0,%d0
 1216 04f4 42B1 0810 		clr.l 16(%a1,%d0.l)
 1217               	.LVL102:
 116:mtk_c.c       **** }
 1218               		.loc 1 116 23 view .LVU383
 1219               	.LBE95:
 1220               	.LBE94:
 158:mtk_c.c       **** 	swtch();    //calling subroutine from asm
 1221               		.loc 1 158 2 is_stmt 1 view .LVU384
 1222               	.LBB98:


 1223               	.LBI98:
 148:mtk_c.c       **** {
 1224               		.loc 1 148 6 view .LVU385
 1225               	.LBB99:
 150:mtk_c.c       **** 	if(next_task == NULLTASKID)
 1226               		.loc 1 150 2 view .LVU386
 1227               	.LBB100:
 1228               	.LBI100:
 120:mtk_c.c       **** {
 1229               		.loc 1 120 14 view .LVU387
 1230               	.LBB101:
 122:mtk_c.c       **** 		return NULLTASKID;
 1231               		.loc 1 122 5 view .LVU388
 122:mtk_c.c       **** 		return NULLTASKID;
 1232               		.loc 1 122 8 is_stmt 0 view .LVU389
 1233 04f8 2239 0000 		move.l ready,%d1
 1233      0000 
 122:mtk_c.c       **** 		return NULLTASKID;
 1234               		.loc 1 122 7 view .LVU390
 1235 04fe 6602      		jne .L125
 1236               	.L114:
 1237               	.LBE101:
 1238               	.LBE100:
 152:mtk_c.c       **** }
 1239               		.loc 1 152 3 is_stmt 1 view .LVU391
 152:mtk_c.c       **** }
 1240               		.loc 1 152 8 view .LVU392
 152:mtk_c.c       **** }
 1241               		.loc 1 152 3 view .LVU393
 152:mtk_c.c       **** }
 1242               		.loc 1 152 8 view .LVU394
 1243 0500 60FE      		jra .L114
 1244               	.L125:
 1245               	.LBB105:
 1246               	.LBB103:
 1247               	.LBB102:
 125:mtk_c.c       **** 		*ptr = task_tab[top].next;
 1248               		.loc 1 125 3 view .LVU395
 1249               	.LVL103:
 126:mtk_c.c       **** 		return top;
 1250               		.loc 1 126 3 view .LVU396
 126:mtk_c.c       **** 		return top;
 1251               		.loc 1 126 23 is_stmt 0 view .LVU397
 1252 0502 2001      		move.l %d1,%d0
 1253 0504 D081      		add.l %d1,%d0
 1254 0506 D080      		add.l %d0,%d0
 1255 0508 D081      		add.l %d1,%d0
 1256 050a D080      		add.l %d0,%d0
 1257 050c D080      		add.l %d0,%d0
 126:mtk_c.c       **** 		return top;
 1258               		.loc 1 126 8 view .LVU398
 1259 050e 23F1 0810 		move.l 16(%a1,%d0.l),ready
 1259      0000 0000 
 127:mtk_c.c       **** 	}
 1260               		.loc 1 127 3 is_stmt 1 view .LVU399
 1261               	.LVL104:
 127:mtk_c.c       **** 	}


 1262               		.loc 1 127 3 is_stmt 0 view .LVU400
 1263               	.LBE102:
 1264               	.LBE103:
 1265               	.LBE105:
 150:mtk_c.c       **** 	if(next_task == NULLTASKID)
 1266               		.loc 1 150 12 view .LVU401
 1267 0516 23C1 0000 		move.l %d1,next_task
 1267      0000 
 151:mtk_c.c       **** 		while(1);   //if next_task is nulltaskid, infinite loop
 1268               		.loc 1 151 2 is_stmt 1 view .LVU402
 151:mtk_c.c       **** 		while(1);   //if next_task is nulltaskid, infinite loop
 1269               		.loc 1 151 2 is_stmt 0 view .LVU403
 1270               	.LBE99:
 1271               	.LBE98:
 159:mtk_c.c       **** }
 1272               		.loc 1 159 2 is_stmt 1 view .LVU404
 160:mtk_c.c       **** 
 1273               		.loc 1 160 1 is_stmt 0 view .LVU405
 1274 051c 241F      		move.l (%sp)+,%d2
 159:mtk_c.c       **** }
 1275               		.loc 1 159 2 view .LVU406
 1276 051e 4EF9 0000 		jra swtch
 1276      0000 
 1277               	.LVL105:
 1278               	.L110:
 1279               	.LBB108:
 1280               	.LBB97:
 1281               	.LBB96:
 109:mtk_c.c       ****         while(j!=NULLTASKID){
 1282               		.loc 1 109 9 is_stmt 1 view .LVU407
 109:mtk_c.c       ****         while(j!=NULLTASKID){
 1283               		.loc 1 109 22 is_stmt 0 view .LVU408
 1284 0524 43F9 0000 		lea task_tab,%a1
 1284      0000 
 1285 052a 2041      		move.l %d1,%a0
 1286 052c D1C1      		add.l %d1,%a0
 1287 052e 2008      		move.l %a0,%d0
 1288               	.LVL106:
 109:mtk_c.c       ****         while(j!=NULLTASKID){
 1289               		.loc 1 109 22 view .LVU409
 1290 0530 D088      		add.l %a0,%d0
 1291 0532 D081      		add.l %d1,%d0
 1292 0534 D080      		add.l %d0,%d0
 1293 0536 D080      		add.l %d0,%d0
 1294 0538 2031 0810 		move.l 16(%a1,%d0.l),%d0
 1295               	.LVL107:
 110:mtk_c.c       ****             tmp=j;
 1296               		.loc 1 110 9 is_stmt 1 view .LVU410
 110:mtk_c.c       ****             tmp=j;
 1297               		.loc 1 110 16 view .LVU411
 1298 053c 6716      		jeq .L112
 1299               	.L126:
 111:mtk_c.c       ****             j=task_tab[tmp].next;
 1300               		.loc 1 111 13 view .LVU412
 1301               	.LVL108:
 112:mtk_c.c       ****         }
 1302               		.loc 1 112 13 view .LVU413


 1303 053e 2200      		move.l %d0,%d1
 109:mtk_c.c       ****         while(j!=NULLTASKID){
 1304               		.loc 1 109 22 is_stmt 0 view .LVU414
 1305 0540 2041      		move.l %d1,%a0
 1306 0542 D1C1      		add.l %d1,%a0
 1307 0544 2008      		move.l %a0,%d0
 1308               	.LVL109:
 109:mtk_c.c       ****         while(j!=NULLTASKID){
 1309               		.loc 1 109 22 view .LVU415
 1310 0546 D088      		add.l %a0,%d0
 1311 0548 D081      		add.l %d1,%d0
 1312 054a D080      		add.l %d0,%d0
 1313 054c D080      		add.l %d0,%d0
 1314 054e 2031 0810 		move.l 16(%a1,%d0.l),%d0
 1315               	.LVL110:
 110:mtk_c.c       ****             tmp=j;
 1316               		.loc 1 110 9 is_stmt 1 view .LVU416
 110:mtk_c.c       ****             tmp=j;
 1317               		.loc 1 110 16 view .LVU417
 1318 0552 66EA      		jne .L126
 1319               	.L112:
 114:mtk_c.c       ****     }
 1320               		.loc 1 114 9 view .LVU418
 114:mtk_c.c       ****     }
 1321               		.loc 1 114 28 is_stmt 0 view .LVU419
 1322 0554 D1C8      		add.l %a0,%a0
 1323 0556 D1C1      		add.l %d1,%a0
 1324 0558 D1C8      		add.l %a0,%a0
 1325 055a D1C8      		add.l %a0,%a0
 1326 055c 2382 8810 		move.l %d2,16(%a1,%a0.l)
 1327               	.LBE96:
 116:mtk_c.c       **** }
 1328               		.loc 1 116 5 is_stmt 1 view .LVU420
 116:mtk_c.c       **** }
 1329               		.loc 1 116 23 is_stmt 0 view .LVU421
 1330 0560 2002      		move.l %d2,%d0
 1331               	.LVL111:
 116:mtk_c.c       **** }
 1332               		.loc 1 116 23 view .LVU422
 1333 0562 D082      		add.l %d2,%d0
 1334 0564 D080      		add.l %d0,%d0
 1335 0566 D082      		add.l %d2,%d0
 1336 0568 D080      		add.l %d0,%d0
 1337 056a D080      		add.l %d0,%d0
 1338 056c 42B1 0810 		clr.l 16(%a1,%d0.l)
 1339               	.LVL112:
 116:mtk_c.c       **** }
 1340               		.loc 1 116 23 view .LVU423
 1341               	.LBE97:
 1342               	.LBE108:
 158:mtk_c.c       **** 	swtch();    //calling subroutine from asm
 1343               		.loc 1 158 2 is_stmt 1 view .LVU424
 1344               	.LBB109:
 148:mtk_c.c       **** {
 1345               		.loc 1 148 6 view .LVU425
 1346               	.LBB107:
 150:mtk_c.c       **** 	if(next_task == NULLTASKID)


 1347               		.loc 1 150 2 view .LVU426
 1348               	.LBB106:
 120:mtk_c.c       **** {
 1349               		.loc 1 120 14 view .LVU427
 1350               	.LBB104:
 122:mtk_c.c       **** 		return NULLTASKID;
 1351               		.loc 1 122 5 view .LVU428
 122:mtk_c.c       **** 		return NULLTASKID;
 1352               		.loc 1 122 8 is_stmt 0 view .LVU429
 1353 0570 2239 0000 		move.l ready,%d1
 1353      0000 
 122:mtk_c.c       **** 		return NULLTASKID;
 1354               		.loc 1 122 7 view .LVU430
 1355 0576 6788      		jeq .L114
 1356 0578 6088      		jra .L125
 1357               	.LBE104:
 1358               	.LBE106:
 1359               	.LBE107:
 1360               	.LBE109:
 1361               		.cfi_endproc
 1362               	.LFE15:
 1363               		.size	sleep, .-sleep
 1364               		.align	2
 1365               		.globl	wakeup
 1366               		.type	wakeup, @function
 1367               	wakeup:
 1368               	.LVL113:
 1369               	.LFB16:
 163:mtk_c.c       ****     addq(&ready, removeq(&semaphore[ch].task_list));
 1370               		.loc 1 163 20 is_stmt 1 view -0
 1371               		.cfi_startproc
 163:mtk_c.c       ****     addq(&ready, removeq(&semaphore[ch].task_list));
 1372               		.loc 1 163 20 is_stmt 0 view .LVU432
 1373 057a 2F0A      		move.l %a2,-(%sp)
 1374               		.cfi_def_cfa_offset 8
 1375               		.cfi_offset 10, -8
 1376 057c 2F02      		move.l %d2,-(%sp)
 1377               		.cfi_def_cfa_offset 12
 1378               		.cfi_offset 2, -12
 1379               		.loc 1 164 5 is_stmt 1 view .LVU433
 1380               	.LVL114:
 1381               	.LBB116:
 1382               	.LBI116:
 120:mtk_c.c       **** {
 1383               		.loc 1 120 14 view .LVU434
 1384               	.LBB117:
 122:mtk_c.c       **** 		return NULLTASKID;
 1385               		.loc 1 122 5 view .LVU435
 122:mtk_c.c       **** 		return NULLTASKID;
 1386               		.loc 1 122 8 is_stmt 0 view .LVU436
 1387 057e 202F 000C 		move.l 12(%sp),%d0
 1388 0582 E788      		lsl.l #3,%d0
 1389 0584 2040      		move.l %d0,%a0
 1390 0586 D1FC 0000 		add.l #semaphore+4,%a0
 1390      0000 
 1391               	.LVL115:
 122:mtk_c.c       **** 		return NULLTASKID;


 1392               		.loc 1 122 8 view .LVU437
 1393 058c 2410      		move.l (%a0),%d2
 1394 058e 45F9 0000 		lea task_tab,%a2
 1394      0000 
 122:mtk_c.c       **** 		return NULLTASKID;
 1395               		.loc 1 122 7 view .LVU438
 1396 0594 666E      		jne .L139
 1397 0596 93C9      		sub.l %a1,%a1
 1398               	.L128:
 1399               	.LVL116:
 122:mtk_c.c       **** 		return NULLTASKID;
 1400               		.loc 1 122 7 view .LVU439
 1401               	.LBE117:
 1402               	.LBE116:
 1403               	.LBB120:
 1404               	.LBI120:
 105:mtk_c.c       ****     TASK_ID_TYPE tmp = *ptr;
 1405               		.loc 1 105 6 is_stmt 1 view .LVU440
 1406               	.LBB121:
 106:mtk_c.c       ****     if (tmp == NULLTASKID)  *ptr=id;    //update the value of address of ptr to id
 1407               		.loc 1 106 5 view .LVU441
 106:mtk_c.c       ****     if (tmp == NULLTASKID)  *ptr=id;    //update the value of address of ptr to id
 1408               		.loc 1 106 18 is_stmt 0 view .LVU442
 1409 0598 2079 0000 		move.l ready,%a0
 1409      0000 
 1410               	.LVL117:
 107:mtk_c.c       ****     else{
 1411               		.loc 1 107 5 is_stmt 1 view .LVU443
 107:mtk_c.c       ****     else{
 1412               		.loc 1 107 8 is_stmt 0 view .LVU444
 1413 059e B0FC 0000 		cmp.w #0,%a0
 1414 05a2 6618      		jne .L129
 107:mtk_c.c       ****     else{
 1415               		.loc 1 107 29 is_stmt 1 view .LVU445
 107:mtk_c.c       ****     else{
 1416               		.loc 1 107 33 is_stmt 0 view .LVU446
 1417 05a4 23C2 0000 		move.l %d2,ready
 1417      0000 
 116:mtk_c.c       **** }
 1418               		.loc 1 116 5 is_stmt 1 view .LVU447
 116:mtk_c.c       **** }
 1419               		.loc 1 116 23 is_stmt 0 view .LVU448
 1420 05aa D3C9      		add.l %a1,%a1
 1421 05ac D3C2      		add.l %d2,%a1
 1422 05ae D3C9      		add.l %a1,%a1
 1423 05b0 D3C9      		add.l %a1,%a1
 1424 05b2 42B2 9810 		clr.l 16(%a2,%a1.l)
 1425               	.LVL118:
 116:mtk_c.c       **** }
 1426               		.loc 1 116 23 view .LVU449
 1427               	.LBE121:
 1428               	.LBE120:
 165:mtk_c.c       **** }
 1429               		.loc 1 165 1 view .LVU450
 1430 05b6 241F      		move.l (%sp)+,%d2
 1431 05b8 245F      		move.l (%sp)+,%a2
 1432 05ba 4E75      		rts


 1433               	.LVL119:
 1434               	.L129:
 1435               	.LBB124:
 1436               	.LBB123:
 1437               	.LBB122:
 109:mtk_c.c       ****         while(j!=NULLTASKID){
 1438               		.loc 1 109 9 is_stmt 1 view .LVU451
 109:mtk_c.c       ****         while(j!=NULLTASKID){
 1439               		.loc 1 109 22 is_stmt 0 view .LVU452
 1440 05bc 2208      		move.l %a0,%d1
 1441 05be D288      		add.l %a0,%d1
 1442 05c0 2001      		move.l %d1,%d0
 1443 05c2 D081      		add.l %d1,%d0
 1444 05c4 D088      		add.l %a0,%d0
 1445 05c6 D080      		add.l %d0,%d0
 1446 05c8 D080      		add.l %d0,%d0
 1447 05ca 2032 0810 		move.l 16(%a2,%d0.l),%d0
 1448               	.LVL120:
 110:mtk_c.c       ****             tmp=j;
 1449               		.loc 1 110 9 is_stmt 1 view .LVU453
 110:mtk_c.c       ****             tmp=j;
 1450               		.loc 1 110 16 view .LVU454
 1451 05ce 6716      		jeq .L131
 1452               	.L142:
 111:mtk_c.c       ****             j=task_tab[tmp].next;
 1453               		.loc 1 111 13 view .LVU455
 1454               	.LVL121:
 112:mtk_c.c       ****         }
 1455               		.loc 1 112 13 view .LVU456
 1456 05d0 2040      		move.l %d0,%a0
 109:mtk_c.c       ****         while(j!=NULLTASKID){
 1457               		.loc 1 109 9 view .LVU457
 109:mtk_c.c       ****         while(j!=NULLTASKID){
 1458               		.loc 1 109 22 is_stmt 0 view .LVU458
 1459 05d2 2208      		move.l %a0,%d1
 1460 05d4 D288      		add.l %a0,%d1
 1461 05d6 2001      		move.l %d1,%d0
 1462               	.LVL122:
 109:mtk_c.c       ****         while(j!=NULLTASKID){
 1463               		.loc 1 109 22 view .LVU459
 1464 05d8 D081      		add.l %d1,%d0
 1465 05da D088      		add.l %a0,%d0
 1466 05dc D080      		add.l %d0,%d0
 1467 05de D080      		add.l %d0,%d0
 1468 05e0 2032 0810 		move.l 16(%a2,%d0.l),%d0
 1469               	.LVL123:
 110:mtk_c.c       ****             tmp=j;
 1470               		.loc 1 110 9 is_stmt 1 view .LVU460
 110:mtk_c.c       ****             tmp=j;
 1471               		.loc 1 110 16 view .LVU461
 1472 05e4 66EA      		jne .L142
 1473               	.L131:
 114:mtk_c.c       ****     }
 1474               		.loc 1 114 9 view .LVU462
 114:mtk_c.c       ****     }
 1475               		.loc 1 114 28 is_stmt 0 view .LVU463
 1476 05e6 D281      		add.l %d1,%d1


 1477 05e8 D288      		add.l %a0,%d1
 1478 05ea D281      		add.l %d1,%d1
 1479 05ec D281      		add.l %d1,%d1
 1480 05ee 2582 1810 		move.l %d2,16(%a2,%d1.l)
 1481               	.LBE122:
 116:mtk_c.c       **** }
 1482               		.loc 1 116 5 is_stmt 1 view .LVU464
 116:mtk_c.c       **** }
 1483               		.loc 1 116 23 is_stmt 0 view .LVU465
 1484 05f2 D3C9      		add.l %a1,%a1
 1485 05f4 D3C2      		add.l %d2,%a1
 1486 05f6 D3C9      		add.l %a1,%a1
 1487 05f8 D3C9      		add.l %a1,%a1
 1488 05fa 42B2 9810 		clr.l 16(%a2,%a1.l)
 1489               	.LVL124:
 116:mtk_c.c       **** }
 1490               		.loc 1 116 23 view .LVU466
 1491               	.LBE123:
 1492               	.LBE124:
 1493               		.loc 1 165 1 view .LVU467
 1494 05fe 241F      		move.l (%sp)+,%d2
 1495 0600 245F      		move.l (%sp)+,%a2
 1496 0602 4E75      		rts
 1497               	.LVL125:
 1498               	.L139:
 1499               	.LBB125:
 1500               	.LBB119:
 1501               	.LBB118:
 125:mtk_c.c       **** 		*ptr = task_tab[top].next;
 1502               		.loc 1 125 3 is_stmt 1 view .LVU468
 126:mtk_c.c       **** 		return top;
 1503               		.loc 1 126 3 view .LVU469
 126:mtk_c.c       **** 		return top;
 1504               		.loc 1 126 23 is_stmt 0 view .LVU470
 1505 0604 2242      		move.l %d2,%a1
 1506 0606 D3C2      		add.l %d2,%a1
 1507 0608 2009      		move.l %a1,%d0
 1508 060a D089      		add.l %a1,%d0
 1509 060c D082      		add.l %d2,%d0
 1510 060e D080      		add.l %d0,%d0
 1511 0610 D080      		add.l %d0,%d0
 126:mtk_c.c       **** 		return top;
 1512               		.loc 1 126 8 view .LVU471
 1513 0612 20B2 0810 		move.l 16(%a2,%d0.l),(%a0)
 127:mtk_c.c       **** 	}
 1514               		.loc 1 127 3 is_stmt 1 view .LVU472
 127:mtk_c.c       **** 	}
 1515               		.loc 1 127 10 is_stmt 0 view .LVU473
 1516 0616 6080      		jra .L128
 1517               	.LBE118:
 1518               	.LBE119:
 1519               	.LBE125:
 1520               		.cfi_endproc
 1521               	.LFE16:
 1522               		.size	wakeup, .-wakeup
 1523               		.globl	empty_task_tab
 1524               		.section	.rodata


 1525               		.align	2
 1526               		.type	empty_task_tab, @object
 1527               		.size	empty_task_tab, 20
 1528               	empty_task_tab:
 1529 0000 0000 0000 		.zero	20
 1529      0000 0000 
 1529      0000 0000 
 1529      0000 0000 
 1529      0000 0000 
 1530               		.globl	ready
 1531               		.section	.bss
 1532               		.align	2
 1533               		.type	ready, @object
 1534               		.size	ready, 4
 1535               	ready:
 1536 0000 0000 0000 		.zero	4
 1537               		.globl	new_task
 1538               		.align	2
 1539               		.type	new_task, @object
 1540               		.size	new_task, 4
 1541               	new_task:
 1542 0004 0000 0000 		.zero	4
 1543               		.globl	next_task
 1544               		.align	2
 1545               		.type	next_task, @object
 1546               		.size	next_task, 4
 1547               	next_task:
 1548 0008 0000 0000 		.zero	4
 1549               		.globl	curr_task
 1550               		.align	2
 1551               		.type	curr_task, @object
 1552               		.size	curr_task, 4
 1553               	curr_task:
 1554 000c 0000 0000 		.zero	4
 1555               		.globl	task_tab
 1556               		.align	2
 1557               		.type	task_tab, @object
 1558               		.size	task_tab, 120
 1559               	task_tab:
 1560 0010 0000 0000 		.zero	120
 1560      0000 0000 
 1560      0000 0000 
 1560      0000 0000 
 1560      0000 0000 
 1561               		.globl	stacks
 1562               		.type	stacks, @object
 1563               		.size	stacks, 10240
 1564               	stacks:
 1565 0088 0000 0000 		.zero	10240
 1565      0000 0000 
 1565      0000 0000 
 1565      0000 0000 
 1565      0000 0000 
 1566               		.globl	semaphore
 1567               		.align	2
 1568               		.type	semaphore, @object
 1569               		.size	semaphore, 40


 1570               	semaphore:
 1571 2888 0000 0000 		.zero	40
 1571      0000 0000 
 1571      0000 0000 
 1571      0000 0000 
 1571      0000 0000 
 1572               		.globl	comin
 1573               		.align	2
 1574               		.type	comin, @object
 1575               		.size	comin, 8
 1576               	comin:
 1577 28b0 0000 0000 		.zero	8
 1577      0000 0000 
 1578               		.globl	comout
 1579               		.align	2
 1580               		.type	comout, @object
 1581               		.size	comout, 8
 1582               	comout:
 1583 28b8 0000 0000 		.zero	8
 1583      0000 0000 
 1584               		.text
 1585               	.Letext0:
 1586               		.file 2 "/usr/local/lib/gcc/m68k-elf/11.4.0/include/stddef.h"
 1587               		.file 3 "/usr/local/m68k-elf/include/sys/_types.h"
 1588               		.file 4 "/usr/local/m68k-elf/include/sys/reent.h"
 1589               		.file 5 "/usr/local/m68k-elf/include/sys/lock.h"
 1590               		.file 6 "/usr/local/m68k-elf/include/stdio.h"
 1591               		.file 7 "mtk_c.h"
 1592               		.file 8 "/usr/local/m68k-elf/include/sys/_default_fcntl.h"
 1593               		.file 9 "<built-in>"
 1594               		.section	.debug_info,"",@progbits
 1595               	.Ldebug_info0:
 1596 0000 0000 1130 		.long	0x1130
 1597 0004 0005      		.word	0x5
 1598 0006 01        		.byte	0x1
 1599 0007 04        		.byte	0x4
 1600 0008 0000 0000 		.long	.Ldebug_abbrev0
 1601 000c 2B        		.uleb128 0x2b
 1602 000d 0000 0000 		.long	.LASF144
 1603 0011 1D        		.byte	0x1d
 1604 0012 0000 0000 		.long	.LASF145
 1605 0016 0000 0000 		.long	.LASF146
 1606 001a 0000 0000 		.long	.Ltext0
 1607 001e 0000 0618 		.long	.Letext0-.Ltext0
 1608 0022 0000 0000 		.long	.Ldebug_line0
 1609 0026 0A        		.uleb128 0xa
 1610 0027 01        		.byte	0x1
 1611 0028 06        		.byte	0x6
 1612 0029 0000 0000 		.long	.LASF0
 1613 002d 0A        		.uleb128 0xa
 1614 002e 01        		.byte	0x1
 1615 002f 08        		.byte	0x8
 1616 0030 0000 0000 		.long	.LASF1
 1617 0034 0A        		.uleb128 0xa
 1618 0035 02        		.byte	0x2
 1619 0036 05        		.byte	0x5
 1620 0037 0000 0000 		.long	.LASF2


 1621 003b 0A        		.uleb128 0xa
 1622 003c 02        		.byte	0x2
 1623 003d 07        		.byte	0x7
 1624 003e 0000 0000 		.long	.LASF3
 1625 0042 0A        		.uleb128 0xa
 1626 0043 04        		.byte	0x4
 1627 0044 05        		.byte	0x5
 1628 0045 0000 0000 		.long	.LASF4
 1629 0049 0A        		.uleb128 0xa
 1630 004a 04        		.byte	0x4
 1631 004b 07        		.byte	0x7
 1632 004c 0000 0000 		.long	.LASF5
 1633 0050 0A        		.uleb128 0xa
 1634 0051 08        		.byte	0x8
 1635 0052 05        		.byte	0x5
 1636 0053 0000 0000 		.long	.LASF6
 1637 0057 0A        		.uleb128 0xa
 1638 0058 08        		.byte	0x8
 1639 0059 07        		.byte	0x7
 1640 005a 0000 0000 		.long	.LASF7
 1641 005e 0A        		.uleb128 0xa
 1642 005f 0C        		.byte	0xc
 1643 0060 04        		.byte	0x4
 1644 0061 0000 0000 		.long	.LASF8
 1645 0065 22        		.uleb128 0x22
 1646 0066 0000 0000 		.long	.LASF10
 1647 006a 02        		.byte	0x2
 1648 006b 015E      		.word	0x15e
 1649 006d 17        		.byte	0x17
 1650 006e 0000 0072 		.long	0x72
 1651 0072 0A        		.uleb128 0xa
 1652 0073 04        		.byte	0x4
 1653 0074 07        		.byte	0x7
 1654 0075 0000 0000 		.long	.LASF9
 1655 0079 0B        		.uleb128 0xb
 1656 007a 0000 0000 		.long	.LASF11
 1657 007e 03        		.byte	0x3
 1658 007f 2E        		.byte	0x2e
 1659 0080 0E        		.byte	0xe
 1660 0081 0000 0042 		.long	0x42
 1661 0085 2C        		.uleb128 0x2c
 1662 0086 04        		.byte	0x4
 1663 0087 05        		.byte	0x5
 1664 0088 696E 7400 		.string	"int"
 1665 008c 0B        		.uleb128 0xb
 1666 008d 0000 0000 		.long	.LASF12
 1667 0091 03        		.byte	0x3
 1668 0092 74        		.byte	0x74
 1669 0093 0E        		.byte	0xe
 1670 0094 0000 0042 		.long	0x42
 1671 0098 0B        		.uleb128 0xb
 1672 0099 0000 0000 		.long	.LASF13
 1673 009d 03        		.byte	0x3
 1674 009e 93        		.byte	0x93
 1675 009f 17        		.byte	0x17
 1676 00a0 0000 0042 		.long	0x42
 1677 00a4 2D        		.uleb128 0x2d


 1678 00a5 04        		.byte	0x4
 1679 00a6 03        		.byte	0x3
 1680 00a7 A5        		.byte	0xa5
 1681 00a8 03        		.byte	0x3
 1682 00a9 0000 00C4 		.long	0xc4
 1683 00ad 23        		.uleb128 0x23
 1684 00ae 0000 0000 		.long	.LASF14
 1685 00b2 A7        		.byte	0xa7
 1686 00b3 0C        		.byte	0xc
 1687 00b4 0000 0065 		.long	0x65
 1688 00b8 23        		.uleb128 0x23
 1689 00b9 0000 0000 		.long	.LASF15
 1690 00bd A8        		.byte	0xa8
 1691 00be 13        		.byte	0x13
 1692 00bf 0000 00C4 		.long	0xc4
 1693 00c3 00        		.byte	0
 1694 00c4 07        		.uleb128 0x7
 1695 00c5 0000 002D 		.long	0x2d
 1696 00c9 0000 00D4 		.long	0xd4
 1697 00cd 08        		.uleb128 0x8
 1698 00ce 0000 0049 		.long	0x49
 1699 00d2 03        		.byte	0x3
 1700 00d3 00        		.byte	0
 1701 00d4 1D        		.uleb128 0x1d
 1702 00d5 08        		.byte	0x8
 1703 00d6 03        		.byte	0x3
 1704 00d7 A2        		.byte	0xa2
 1705 00d8 0000 00F7 		.long	0xf7
 1706 00dc 01        		.uleb128 0x1
 1707 00dd 0000 0000 		.long	.LASF16
 1708 00e1 03        		.byte	0x3
 1709 00e2 A4        		.byte	0xa4
 1710 00e3 07        		.byte	0x7
 1711 00e4 0000 0085 		.long	0x85
 1712 00e8 00        		.byte	0
 1713 00e9 01        		.uleb128 0x1
 1714 00ea 0000 0000 		.long	.LASF17
 1715 00ee 03        		.byte	0x3
 1716 00ef A9        		.byte	0xa9
 1717 00f0 05        		.byte	0x5
 1718 00f1 0000 00A4 		.long	0xa4
 1719 00f5 04        		.byte	0x4
 1720 00f6 00        		.byte	0
 1721 00f7 0B        		.uleb128 0xb
 1722 00f8 0000 0000 		.long	.LASF18
 1723 00fc 03        		.byte	0x3
 1724 00fd AA        		.byte	0xaa
 1725 00fe 03        		.byte	0x3
 1726 00ff 0000 00D4 		.long	0xd4
 1727 0103 2E        		.uleb128 0x2e
 1728 0104 04        		.byte	0x4
 1729 0105 0B        		.uleb128 0xb
 1730 0106 0000 0000 		.long	.LASF19
 1731 010a 04        		.byte	0x4
 1732 010b 16        		.byte	0x16
 1733 010c 19        		.byte	0x19
 1734 010d 0000 0049 		.long	0x49


 1735 0111 0B        		.uleb128 0xb
 1736 0112 0000 0000 		.long	.LASF20
 1737 0116 05        		.byte	0x5
 1738 0117 0C        		.byte	0xc
 1739 0118 0D        		.byte	0xd
 1740 0119 0000 0085 		.long	0x85
 1741 011d 0B        		.uleb128 0xb
 1742 011e 0000 0000 		.long	.LASF21
 1743 0122 04        		.byte	0x4
 1744 0123 23        		.byte	0x23
 1745 0124 1B        		.byte	0x1b
 1746 0125 0000 0111 		.long	0x111
 1747 0129 1A        		.uleb128 0x1a
 1748 012a 0000 0000 		.long	.LASF26
 1749 012e 18        		.byte	0x18
 1750 012f 34        		.byte	0x34
 1751 0130 0000 017F 		.long	0x17f
 1752 0134 01        		.uleb128 0x1
 1753 0135 0000 0000 		.long	.LASF22
 1754 0139 04        		.byte	0x4
 1755 013a 36        		.byte	0x36
 1756 013b 13        		.byte	0x13
 1757 013c 0000 017F 		.long	0x17f
 1758 0140 00        		.byte	0
 1759 0141 0C        		.uleb128 0xc
 1760 0142 5F6B 00   		.string	"_k"
 1761 0145 37        		.byte	0x37
 1762 0146 07        		.byte	0x7
 1763 0147 0000 0085 		.long	0x85
 1764 014b 04        		.byte	0x4
 1765 014c 01        		.uleb128 0x1
 1766 014d 0000 0000 		.long	.LASF23
 1767 0151 04        		.byte	0x4
 1768 0152 37        		.byte	0x37
 1769 0153 0B        		.byte	0xb
 1770 0154 0000 0085 		.long	0x85
 1771 0158 08        		.byte	0x8
 1772 0159 01        		.uleb128 0x1
 1773 015a 0000 0000 		.long	.LASF24
 1774 015e 04        		.byte	0x4
 1775 015f 37        		.byte	0x37
 1776 0160 14        		.byte	0x14
 1777 0161 0000 0085 		.long	0x85
 1778 0165 0C        		.byte	0xc
 1779 0166 01        		.uleb128 0x1
 1780 0167 0000 0000 		.long	.LASF25
 1781 016b 04        		.byte	0x4
 1782 016c 37        		.byte	0x37
 1783 016d 1B        		.byte	0x1b
 1784 016e 0000 0085 		.long	0x85
 1785 0172 10        		.byte	0x10
 1786 0173 0C        		.uleb128 0xc
 1787 0174 5F78 00   		.string	"_x"
 1788 0177 38        		.byte	0x38
 1789 0178 0B        		.byte	0xb
 1790 0179 0000 0184 		.long	0x184
 1791 017d 14        		.byte	0x14


 1792 017e 00        		.byte	0
 1793 017f 04        		.uleb128 0x4
 1794 0180 0000 0129 		.long	0x129
 1795 0184 07        		.uleb128 0x7
 1796 0185 0000 0105 		.long	0x105
 1797 0189 0000 0194 		.long	0x194
 1798 018d 08        		.uleb128 0x8
 1799 018e 0000 0049 		.long	0x49
 1800 0192 00        		.byte	0
 1801 0193 00        		.byte	0
 1802 0194 1A        		.uleb128 0x1a
 1803 0195 0000 0000 		.long	.LASF27
 1804 0199 24        		.byte	0x24
 1805 019a 3C        		.byte	0x3c
 1806 019b 0000 0215 		.long	0x215
 1807 019f 01        		.uleb128 0x1
 1808 01a0 0000 0000 		.long	.LASF28
 1809 01a4 04        		.byte	0x4
 1810 01a5 3E        		.byte	0x3e
 1811 01a6 09        		.byte	0x9
 1812 01a7 0000 0085 		.long	0x85
 1813 01ab 00        		.byte	0
 1814 01ac 01        		.uleb128 0x1
 1815 01ad 0000 0000 		.long	.LASF29
 1816 01b1 04        		.byte	0x4
 1817 01b2 3F        		.byte	0x3f
 1818 01b3 09        		.byte	0x9
 1819 01b4 0000 0085 		.long	0x85
 1820 01b8 04        		.byte	0x4
 1821 01b9 01        		.uleb128 0x1
 1822 01ba 0000 0000 		.long	.LASF30
 1823 01be 04        		.byte	0x4
 1824 01bf 40        		.byte	0x40
 1825 01c0 09        		.byte	0x9
 1826 01c1 0000 0085 		.long	0x85
 1827 01c5 08        		.byte	0x8
 1828 01c6 01        		.uleb128 0x1
 1829 01c7 0000 0000 		.long	.LASF31
 1830 01cb 04        		.byte	0x4
 1831 01cc 41        		.byte	0x41
 1832 01cd 09        		.byte	0x9
 1833 01ce 0000 0085 		.long	0x85
 1834 01d2 0C        		.byte	0xc
 1835 01d3 01        		.uleb128 0x1
 1836 01d4 0000 0000 		.long	.LASF32
 1837 01d8 04        		.byte	0x4
 1838 01d9 42        		.byte	0x42
 1839 01da 09        		.byte	0x9
 1840 01db 0000 0085 		.long	0x85
 1841 01df 10        		.byte	0x10
 1842 01e0 01        		.uleb128 0x1
 1843 01e1 0000 0000 		.long	.LASF33
 1844 01e5 04        		.byte	0x4
 1845 01e6 43        		.byte	0x43
 1846 01e7 09        		.byte	0x9
 1847 01e8 0000 0085 		.long	0x85
 1848 01ec 14        		.byte	0x14


 1849 01ed 01        		.uleb128 0x1
 1850 01ee 0000 0000 		.long	.LASF34
 1851 01f2 04        		.byte	0x4
 1852 01f3 44        		.byte	0x44
 1853 01f4 09        		.byte	0x9
 1854 01f5 0000 0085 		.long	0x85
 1855 01f9 18        		.byte	0x18
 1856 01fa 01        		.uleb128 0x1
 1857 01fb 0000 0000 		.long	.LASF35
 1858 01ff 04        		.byte	0x4
 1859 0200 45        		.byte	0x45
 1860 0201 09        		.byte	0x9
 1861 0202 0000 0085 		.long	0x85
 1862 0206 1C        		.byte	0x1c
 1863 0207 01        		.uleb128 0x1
 1864 0208 0000 0000 		.long	.LASF36
 1865 020c 04        		.byte	0x4
 1866 020d 46        		.byte	0x46
 1867 020e 09        		.byte	0x9
 1868 020f 0000 0085 		.long	0x85
 1869 0213 20        		.byte	0x20
 1870 0214 00        		.byte	0
 1871 0215 1A        		.uleb128 0x1a
 1872 0216 0000 0000 		.long	.LASF37
 1873 021a 08        		.byte	0x8
 1874 021b 73        		.byte	0x73
 1875 021c 0000 023B 		.long	0x23b
 1876 0220 01        		.uleb128 0x1
 1877 0221 0000 0000 		.long	.LASF38
 1878 0225 04        		.byte	0x4
 1879 0226 74        		.byte	0x74
 1880 0227 11        		.byte	0x11
 1881 0228 0000 023B 		.long	0x23b
 1882 022c 00        		.byte	0
 1883 022d 01        		.uleb128 0x1
 1884 022e 0000 0000 		.long	.LASF39
 1885 0232 04        		.byte	0x4
 1886 0233 75        		.byte	0x75
 1887 0234 06        		.byte	0x6
 1888 0235 0000 0085 		.long	0x85
 1889 0239 04        		.byte	0x4
 1890 023a 00        		.byte	0
 1891 023b 04        		.uleb128 0x4
 1892 023c 0000 002D 		.long	0x2d
 1893 0240 1A        		.uleb128 0x1a
 1894 0241 0000 0000 		.long	.LASF40
 1895 0245 68        		.byte	0x68
 1896 0246 98        		.byte	0x98
 1897 0247 0000 0379 		.long	0x379
 1898 024b 0C        		.uleb128 0xc
 1899 024c 5F70 00   		.string	"_p"
 1900 024f 99        		.byte	0x99
 1901 0250 12        		.byte	0x12
 1902 0251 0000 023B 		.long	0x23b
 1903 0255 00        		.byte	0
 1904 0256 0C        		.uleb128 0xc
 1905 0257 5F72 00   		.string	"_r"


 1906 025a 9A        		.byte	0x9a
 1907 025b 07        		.byte	0x7
 1908 025c 0000 0085 		.long	0x85
 1909 0260 04        		.byte	0x4
 1910 0261 0C        		.uleb128 0xc
 1911 0262 5F77 00   		.string	"_w"
 1912 0265 9B        		.byte	0x9b
 1913 0266 07        		.byte	0x7
 1914 0267 0000 0085 		.long	0x85
 1915 026b 08        		.byte	0x8
 1916 026c 01        		.uleb128 0x1
 1917 026d 0000 0000 		.long	.LASF41
 1918 0271 04        		.byte	0x4
 1919 0272 9C        		.byte	0x9c
 1920 0273 09        		.byte	0x9
 1921 0274 0000 0034 		.long	0x34
 1922 0278 0C        		.byte	0xc
 1923 0279 01        		.uleb128 0x1
 1924 027a 0000 0000 		.long	.LASF42
 1925 027e 04        		.byte	0x4
 1926 027f 9D        		.byte	0x9d
 1927 0280 09        		.byte	0x9
 1928 0281 0000 0034 		.long	0x34
 1929 0285 0E        		.byte	0xe
 1930 0286 0C        		.uleb128 0xc
 1931 0287 5F62 6600 		.string	"_bf"
 1932 028b 9E        		.byte	0x9e
 1933 028c 11        		.byte	0x11
 1934 028d 0000 0215 		.long	0x215
 1935 0291 10        		.byte	0x10
 1936 0292 01        		.uleb128 0x1
 1937 0293 0000 0000 		.long	.LASF43
 1938 0297 04        		.byte	0x4
 1939 0298 9F        		.byte	0x9f
 1940 0299 07        		.byte	0x7
 1941 029a 0000 0085 		.long	0x85
 1942 029e 18        		.byte	0x18
 1943 029f 01        		.uleb128 0x1
 1944 02a0 0000 0000 		.long	.LASF44
 1945 02a4 04        		.byte	0x4
 1946 02a5 A6        		.byte	0xa6
 1947 02a6 0A        		.byte	0xa
 1948 02a7 0000 0103 		.long	0x103
 1949 02ab 1C        		.byte	0x1c
 1950 02ac 01        		.uleb128 0x1
 1951 02ad 0000 0000 		.long	.LASF45
 1952 02b1 04        		.byte	0x4
 1953 02b2 A8        		.byte	0xa8
 1954 02b3 1D        		.byte	0x1d
 1955 02b4 0000 048F 		.long	0x48f
 1956 02b8 20        		.byte	0x20
 1957 02b9 01        		.uleb128 0x1
 1958 02ba 0000 0000 		.long	.LASF46
 1959 02be 04        		.byte	0x4
 1960 02bf AA        		.byte	0xaa
 1961 02c0 1D        		.byte	0x1d
 1962 02c1 0000 04B7 		.long	0x4b7


 1963 02c5 24        		.byte	0x24
 1964 02c6 01        		.uleb128 0x1
 1965 02c7 0000 0000 		.long	.LASF47
 1966 02cb 04        		.byte	0x4
 1967 02cc AD        		.byte	0xad
 1968 02cd 0D        		.byte	0xd
 1969 02ce 0000 04DA 		.long	0x4da
 1970 02d2 28        		.byte	0x28
 1971 02d3 01        		.uleb128 0x1
 1972 02d4 0000 0000 		.long	.LASF48
 1973 02d8 04        		.byte	0x4
 1974 02d9 AE        		.byte	0xae
 1975 02da 09        		.byte	0x9
 1976 02db 0000 04F3 		.long	0x4f3
 1977 02df 2C        		.byte	0x2c
 1978 02e0 0C        		.uleb128 0xc
 1979 02e1 5F75 6200 		.string	"_ub"
 1980 02e5 B1        		.byte	0xb1
 1981 02e6 11        		.byte	0x11
 1982 02e7 0000 0215 		.long	0x215
 1983 02eb 30        		.byte	0x30
 1984 02ec 0C        		.uleb128 0xc
 1985 02ed 5F75 7000 		.string	"_up"
 1986 02f1 B2        		.byte	0xb2
 1987 02f2 12        		.byte	0x12
 1988 02f3 0000 023B 		.long	0x23b
 1989 02f7 38        		.byte	0x38
 1990 02f8 0C        		.uleb128 0xc
 1991 02f9 5F75 7200 		.string	"_ur"
 1992 02fd B3        		.byte	0xb3
 1993 02fe 07        		.byte	0x7
 1994 02ff 0000 0085 		.long	0x85
 1995 0303 3C        		.byte	0x3c
 1996 0304 01        		.uleb128 0x1
 1997 0305 0000 0000 		.long	.LASF49
 1998 0309 04        		.byte	0x4
 1999 030a B6        		.byte	0xb6
 2000 030b 11        		.byte	0x11
 2001 030c 0000 04F8 		.long	0x4f8
 2002 0310 40        		.byte	0x40
 2003 0311 01        		.uleb128 0x1
 2004 0312 0000 0000 		.long	.LASF50
 2005 0316 04        		.byte	0x4
 2006 0317 B7        		.byte	0xb7
 2007 0318 11        		.byte	0x11
 2008 0319 0000 0508 		.long	0x508
 2009 031d 43        		.byte	0x43
 2010 031e 0C        		.uleb128 0xc
 2011 031f 5F6C 6200 		.string	"_lb"
 2012 0323 BA        		.byte	0xba
 2013 0324 11        		.byte	0x11
 2014 0325 0000 0215 		.long	0x215
 2015 0329 44        		.byte	0x44
 2016 032a 01        		.uleb128 0x1
 2017 032b 0000 0000 		.long	.LASF51
 2018 032f 04        		.byte	0x4
 2019 0330 BD        		.byte	0xbd


 2020 0331 07        		.byte	0x7
 2021 0332 0000 0085 		.long	0x85
 2022 0336 4C        		.byte	0x4c
 2023 0337 01        		.uleb128 0x1
 2024 0338 0000 0000 		.long	.LASF52
 2025 033c 04        		.byte	0x4
 2026 033d BE        		.byte	0xbe
 2027 033e 0A        		.byte	0xa
 2028 033f 0000 0079 		.long	0x79
 2029 0343 50        		.byte	0x50
 2030 0344 01        		.uleb128 0x1
 2031 0345 0000 0000 		.long	.LASF53
 2032 0349 04        		.byte	0x4
 2033 034a C1        		.byte	0xc1
 2034 034b 12        		.byte	0x12
 2035 034c 0000 0397 		.long	0x397
 2036 0350 54        		.byte	0x54
 2037 0351 01        		.uleb128 0x1
 2038 0352 0000 0000 		.long	.LASF54
 2039 0356 04        		.byte	0x4
 2040 0357 C5        		.byte	0xc5
 2041 0358 0C        		.byte	0xc
 2042 0359 0000 011D 		.long	0x11d
 2043 035d 58        		.byte	0x58
 2044 035e 01        		.uleb128 0x1
 2045 035f 0000 0000 		.long	.LASF55
 2046 0363 04        		.byte	0x4
 2047 0364 C7        		.byte	0xc7
 2048 0365 0E        		.byte	0xe
 2049 0366 0000 00F7 		.long	0xf7
 2050 036a 5C        		.byte	0x5c
 2051 036b 01        		.uleb128 0x1
 2052 036c 0000 0000 		.long	.LASF56
 2053 0370 04        		.byte	0x4
 2054 0371 C8        		.byte	0xc8
 2055 0372 09        		.byte	0x9
 2056 0373 0000 0085 		.long	0x85
 2057 0377 64        		.byte	0x64
 2058 0378 00        		.byte	0
 2059 0379 1B        		.uleb128 0x1b
 2060 037a 0000 0098 		.long	0x98
 2061 037e 0000 0397 		.long	0x397
 2062 0382 05        		.uleb128 0x5
 2063 0383 0000 0397 		.long	0x397
 2064 0387 05        		.uleb128 0x5
 2065 0388 0000 0103 		.long	0x103
 2066 038c 05        		.uleb128 0x5
 2067 038d 0000 047E 		.long	0x47e
 2068 0391 05        		.uleb128 0x5
 2069 0392 0000 0085 		.long	0x85
 2070 0396 00        		.byte	0
 2071 0397 04        		.uleb128 0x4
 2072 0398 0000 039C 		.long	0x39c
 2073 039c 2F        		.uleb128 0x2f
 2074 039d 0000 0000 		.long	.LASF57
 2075 03a1 0116      		.word	0x116
 2076 03a3 04        		.byte	0x4


 2077 03a4 0237      		.word	0x237
 2078 03a6 08        		.byte	0x8
 2079 03a7 0000 047E 		.long	0x47e
 2080 03ab 02        		.uleb128 0x2
 2081 03ac 0000 0000 		.long	.LASF58
 2082 03b0 0239      		.word	0x239
 2083 03b2 07        		.byte	0x7
 2084 03b3 0000 0085 		.long	0x85
 2085 03b7 00        		.byte	0
 2086 03b8 02        		.uleb128 0x2
 2087 03b9 0000 0000 		.long	.LASF59
 2088 03bd 023E      		.word	0x23e
 2089 03bf 0B        		.byte	0xb
 2090 03c0 0000 0525 		.long	0x525
 2091 03c4 04        		.byte	0x4
 2092 03c5 02        		.uleb128 0x2
 2093 03c6 0000 0000 		.long	.LASF60
 2094 03ca 023E      		.word	0x23e
 2095 03cc 14        		.byte	0x14
 2096 03cd 0000 0525 		.long	0x525
 2097 03d1 08        		.byte	0x8
 2098 03d2 02        		.uleb128 0x2
 2099 03d3 0000 0000 		.long	.LASF61
 2100 03d7 023E      		.word	0x23e
 2101 03d9 1E        		.byte	0x1e
 2102 03da 0000 0525 		.long	0x525
 2103 03de 0C        		.byte	0xc
 2104 03df 02        		.uleb128 0x2
 2105 03e0 0000 0000 		.long	.LASF62
 2106 03e4 0240      		.word	0x240
 2107 03e6 08        		.byte	0x8
 2108 03e7 0000 0085 		.long	0x85
 2109 03eb 10        		.byte	0x10
 2110 03ec 02        		.uleb128 0x2
 2111 03ed 0000 0000 		.long	.LASF63
 2112 03f1 0241      		.word	0x241
 2113 03f3 08        		.byte	0x8
 2114 03f4 0000 06AD 		.long	0x6ad
 2115 03f8 14        		.byte	0x14
 2116 03f9 02        		.uleb128 0x2
 2117 03fa 0000 0000 		.long	.LASF64
 2118 03fe 0246      		.word	0x246
 2119 0400 16        		.byte	0x16
 2120 0401 0000 06C2 		.long	0x6c2
 2121 0405 2E        		.byte	0x2e
 2122 0406 02        		.uleb128 0x2
 2123 0407 0000 0000 		.long	.LASF65
 2124 040b 024C      		.word	0x24c
 2125 040d 0A        		.byte	0xa
 2126 040e 0000 06D2 		.long	0x6d2
 2127 0412 32        		.byte	0x32
 2128 0413 02        		.uleb128 0x2
 2129 0414 0000 0000 		.long	.LASF66
 2130 0418 024F      		.word	0x24f
 2131 041a 13        		.byte	0x13
 2132 041b 0000 017F 		.long	0x17f
 2133 041f 36        		.byte	0x36


 2134 0420 02        		.uleb128 0x2
 2135 0421 0000 0000 		.long	.LASF67
 2136 0425 0250      		.word	0x250
 2137 0427 07        		.byte	0x7
 2138 0428 0000 0085 		.long	0x85
 2139 042c 3A        		.byte	0x3a
 2140 042d 02        		.uleb128 0x2
 2141 042e 0000 0000 		.long	.LASF68
 2142 0432 0251      		.word	0x251
 2143 0434 13        		.byte	0x13
 2144 0435 0000 017F 		.long	0x17f
 2145 0439 3E        		.byte	0x3e
 2146 043a 02        		.uleb128 0x2
 2147 043b 0000 0000 		.long	.LASF69
 2148 043f 0252      		.word	0x252
 2149 0441 14        		.byte	0x14
 2150 0442 0000 06D7 		.long	0x6d7
 2151 0446 42        		.byte	0x42
 2152 0447 02        		.uleb128 0x2
 2153 0448 0000 0000 		.long	.LASF70
 2154 044c 0255      		.word	0x255
 2155 044e 07        		.byte	0x7
 2156 044f 0000 0085 		.long	0x85
 2157 0453 46        		.byte	0x46
 2158 0454 02        		.uleb128 0x2
 2159 0455 0000 0000 		.long	.LASF71
 2160 0459 0256      		.word	0x256
 2161 045b 09        		.byte	0x9
 2162 045c 0000 047E 		.long	0x47e
 2163 0460 4A        		.byte	0x4a
 2164 0461 02        		.uleb128 0x2
 2165 0462 0000 0000 		.long	.LASF72
 2166 0466 0279      		.word	0x279
 2167 0468 07        		.byte	0x7
 2168 0469 0000 0695 		.long	0x695
 2169 046d 4E        		.byte	0x4e
 2170 046e 30        		.uleb128 0x30
 2171 046f 0000 0000 		.long	.LASF73
 2172 0473 04        		.byte	0x4
 2173 0474 0281      		.word	0x281
 2174 0476 0B        		.byte	0xb
 2175 0477 0000 06E7 		.long	0x6e7
 2176 047b 0112      		.word	0x112
 2177 047d 00        		.byte	0
 2178 047e 04        		.uleb128 0x4
 2179 047f 0000 0483 		.long	0x483
 2180 0483 0A        		.uleb128 0xa
 2181 0484 01        		.byte	0x1
 2182 0485 06        		.byte	0x6
 2183 0486 0000 0000 		.long	.LASF74
 2184 048a 24        		.uleb128 0x24
 2185 048b 0000 0483 		.long	0x483
 2186 048f 04        		.uleb128 0x4
 2187 0490 0000 0379 		.long	0x379
 2188 0494 1B        		.uleb128 0x1b
 2189 0495 0000 0098 		.long	0x98
 2190 0499 0000 04B2 		.long	0x4b2


 2191 049d 05        		.uleb128 0x5
 2192 049e 0000 0397 		.long	0x397
 2193 04a2 05        		.uleb128 0x5
 2194 04a3 0000 0103 		.long	0x103
 2195 04a7 05        		.uleb128 0x5
 2196 04a8 0000 04B2 		.long	0x4b2
 2197 04ac 05        		.uleb128 0x5
 2198 04ad 0000 0085 		.long	0x85
 2199 04b1 00        		.byte	0
 2200 04b2 04        		.uleb128 0x4
 2201 04b3 0000 048A 		.long	0x48a
 2202 04b7 04        		.uleb128 0x4
 2203 04b8 0000 0494 		.long	0x494
 2204 04bc 1B        		.uleb128 0x1b
 2205 04bd 0000 008C 		.long	0x8c
 2206 04c1 0000 04DA 		.long	0x4da
 2207 04c5 05        		.uleb128 0x5
 2208 04c6 0000 0397 		.long	0x397
 2209 04ca 05        		.uleb128 0x5
 2210 04cb 0000 0103 		.long	0x103
 2211 04cf 05        		.uleb128 0x5
 2212 04d0 0000 008C 		.long	0x8c
 2213 04d4 05        		.uleb128 0x5
 2214 04d5 0000 0085 		.long	0x85
 2215 04d9 00        		.byte	0
 2216 04da 04        		.uleb128 0x4
 2217 04db 0000 04BC 		.long	0x4bc
 2218 04df 1B        		.uleb128 0x1b
 2219 04e0 0000 0085 		.long	0x85
 2220 04e4 0000 04F3 		.long	0x4f3
 2221 04e8 05        		.uleb128 0x5
 2222 04e9 0000 0397 		.long	0x397
 2223 04ed 05        		.uleb128 0x5
 2224 04ee 0000 0103 		.long	0x103
 2225 04f2 00        		.byte	0
 2226 04f3 04        		.uleb128 0x4
 2227 04f4 0000 04DF 		.long	0x4df
 2228 04f8 07        		.uleb128 0x7
 2229 04f9 0000 002D 		.long	0x2d
 2230 04fd 0000 0508 		.long	0x508
 2231 0501 08        		.uleb128 0x8
 2232 0502 0000 0049 		.long	0x49
 2233 0506 02        		.byte	0x2
 2234 0507 00        		.byte	0
 2235 0508 07        		.uleb128 0x7
 2236 0509 0000 002D 		.long	0x2d
 2237 050d 0000 0518 		.long	0x518
 2238 0511 08        		.uleb128 0x8
 2239 0512 0000 0049 		.long	0x49
 2240 0516 00        		.byte	0
 2241 0517 00        		.byte	0
 2242 0518 22        		.uleb128 0x22
 2243 0519 0000 0000 		.long	.LASF75
 2244 051d 04        		.byte	0x4
 2245 051e 010D      		.word	0x10d
 2246 0520 1A        		.byte	0x1a
 2247 0521 0000 0240 		.long	0x240


 2248 0525 04        		.uleb128 0x4
 2249 0526 0000 0518 		.long	0x518
 2250 052a 31        		.uleb128 0x31
 2251 052b 0000 0000 		.long	.LASF76
 2252 052f 0E        		.byte	0xe
 2253 0530 04        		.byte	0x4
 2254 0531 0131      		.word	0x131
 2255 0533 08        		.byte	0x8
 2256 0534 0000 0560 		.long	0x560
 2257 0538 02        		.uleb128 0x2
 2258 0539 0000 0000 		.long	.LASF77
 2259 053d 0132      		.word	0x132
 2260 053f 12        		.byte	0x12
 2261 0540 0000 0560 		.long	0x560
 2262 0544 00        		.byte	0
 2263 0545 02        		.uleb128 0x2
 2264 0546 0000 0000 		.long	.LASF78
 2265 054a 0133      		.word	0x133
 2266 054c 12        		.byte	0x12
 2267 054d 0000 0560 		.long	0x560
 2268 0551 06        		.byte	0x6
 2269 0552 02        		.uleb128 0x2
 2270 0553 0000 0000 		.long	.LASF79
 2271 0557 0134      		.word	0x134
 2272 0559 12        		.byte	0x12
 2273 055a 0000 003B 		.long	0x3b
 2274 055e 0C        		.byte	0xc
 2275 055f 00        		.byte	0
 2276 0560 07        		.uleb128 0x7
 2277 0561 0000 003B 		.long	0x3b
 2278 0565 0000 0570 		.long	0x570
 2279 0569 08        		.uleb128 0x8
 2280 056a 0000 0049 		.long	0x49
 2281 056e 02        		.byte	0x2
 2282 056f 00        		.byte	0
 2283 0570 32        		.uleb128 0x32
 2284 0571 C4        		.byte	0xc4
 2285 0572 04        		.byte	0x4
 2286 0573 025A      		.word	0x25a
 2287 0575 07        		.byte	0x7
 2288 0576 0000 0665 		.long	0x665
 2289 057a 02        		.uleb128 0x2
 2290 057b 0000 0000 		.long	.LASF80
 2291 057f 025F      		.word	0x25f
 2292 0581 12        		.byte	0x12
 2293 0582 0000 047E 		.long	0x47e
 2294 0586 00        		.byte	0
 2295 0587 02        		.uleb128 0x2
 2296 0588 0000 0000 		.long	.LASF81
 2297 058c 0260      		.word	0x260
 2298 058e 10        		.byte	0x10
 2299 058f 0000 0665 		.long	0x665
 2300 0593 04        		.byte	0x4
 2301 0594 02        		.uleb128 0x2
 2302 0595 0000 0000 		.long	.LASF82
 2303 0599 0261      		.word	0x261
 2304 059b 17        		.byte	0x17


 2305 059c 0000 0194 		.long	0x194
 2306 05a0 1E        		.byte	0x1e
 2307 05a1 02        		.uleb128 0x2
 2308 05a2 0000 0000 		.long	.LASF83
 2309 05a6 0262      		.word	0x262
 2310 05a8 0F        		.byte	0xf
 2311 05a9 0000 0085 		.long	0x85
 2312 05ad 42        		.byte	0x42
 2313 05ae 02        		.uleb128 0x2
 2314 05af 0000 0000 		.long	.LASF84
 2315 05b3 0263      		.word	0x263
 2316 05b5 2C        		.byte	0x2c
 2317 05b6 0000 0057 		.long	0x57
 2318 05ba 46        		.byte	0x46
 2319 05bb 02        		.uleb128 0x2
 2320 05bc 0000 0000 		.long	.LASF85
 2321 05c0 0264      		.word	0x264
 2322 05c2 1A        		.byte	0x1a
 2323 05c3 0000 052A 		.long	0x52a
 2324 05c7 4E        		.byte	0x4e
 2325 05c8 02        		.uleb128 0x2
 2326 05c9 0000 0000 		.long	.LASF86
 2327 05cd 0265      		.word	0x265
 2328 05cf 16        		.byte	0x16
 2329 05d0 0000 00F7 		.long	0xf7
 2330 05d4 5C        		.byte	0x5c
 2331 05d5 02        		.uleb128 0x2
 2332 05d6 0000 0000 		.long	.LASF87
 2333 05da 0266      		.word	0x266
 2334 05dc 16        		.byte	0x16
 2335 05dd 0000 00F7 		.long	0xf7
 2336 05e1 64        		.byte	0x64
 2337 05e2 02        		.uleb128 0x2
 2338 05e3 0000 0000 		.long	.LASF88
 2339 05e7 0267      		.word	0x267
 2340 05e9 16        		.byte	0x16
 2341 05ea 0000 00F7 		.long	0xf7
 2342 05ee 6C        		.byte	0x6c
 2343 05ef 02        		.uleb128 0x2
 2344 05f0 0000 0000 		.long	.LASF89
 2345 05f4 0268      		.word	0x268
 2346 05f6 10        		.byte	0x10
 2347 05f7 0000 0675 		.long	0x675
 2348 05fb 74        		.byte	0x74
 2349 05fc 02        		.uleb128 0x2
 2350 05fd 0000 0000 		.long	.LASF90
 2351 0601 0269      		.word	0x269
 2352 0603 10        		.byte	0x10
 2353 0604 0000 0685 		.long	0x685
 2354 0608 7C        		.byte	0x7c
 2355 0609 02        		.uleb128 0x2
 2356 060a 0000 0000 		.long	.LASF91
 2357 060e 026A      		.word	0x26a
 2358 0610 0F        		.byte	0xf
 2359 0611 0000 0085 		.long	0x85
 2360 0615 94        		.byte	0x94
 2361 0616 02        		.uleb128 0x2


 2362 0617 0000 0000 		.long	.LASF92
 2363 061b 026B      		.word	0x26b
 2364 061d 16        		.byte	0x16
 2365 061e 0000 00F7 		.long	0xf7
 2366 0622 98        		.byte	0x98
 2367 0623 02        		.uleb128 0x2
 2368 0624 0000 0000 		.long	.LASF93
 2369 0628 026C      		.word	0x26c
 2370 062a 16        		.byte	0x16
 2371 062b 0000 00F7 		.long	0xf7
 2372 062f A0        		.byte	0xa0
 2373 0630 02        		.uleb128 0x2
 2374 0631 0000 0000 		.long	.LASF94
 2375 0635 026D      		.word	0x26d
 2376 0637 16        		.byte	0x16
 2377 0638 0000 00F7 		.long	0xf7
 2378 063c A8        		.byte	0xa8
 2379 063d 02        		.uleb128 0x2
 2380 063e 0000 0000 		.long	.LASF95
 2381 0642 026E      		.word	0x26e
 2382 0644 16        		.byte	0x16
 2383 0645 0000 00F7 		.long	0xf7
 2384 0649 B0        		.byte	0xb0
 2385 064a 02        		.uleb128 0x2
 2386 064b 0000 0000 		.long	.LASF96
 2387 064f 026F      		.word	0x26f
 2388 0651 16        		.byte	0x16
 2389 0652 0000 00F7 		.long	0xf7
 2390 0656 B8        		.byte	0xb8
 2391 0657 02        		.uleb128 0x2
 2392 0658 0000 0000 		.long	.LASF97
 2393 065c 0270      		.word	0x270
 2394 065e 08        		.byte	0x8
 2395 065f 0000 0085 		.long	0x85
 2396 0663 C0        		.byte	0xc0
 2397 0664 00        		.byte	0
 2398 0665 07        		.uleb128 0x7
 2399 0666 0000 0483 		.long	0x483
 2400 066a 0000 0675 		.long	0x675
 2401 066e 08        		.uleb128 0x8
 2402 066f 0000 0049 		.long	0x49
 2403 0673 19        		.byte	0x19
 2404 0674 00        		.byte	0
 2405 0675 07        		.uleb128 0x7
 2406 0676 0000 0483 		.long	0x483
 2407 067a 0000 0685 		.long	0x685
 2408 067e 08        		.uleb128 0x8
 2409 067f 0000 0049 		.long	0x49
 2410 0683 07        		.byte	0x7
 2411 0684 00        		.byte	0
 2412 0685 07        		.uleb128 0x7
 2413 0686 0000 0483 		.long	0x483
 2414 068a 0000 0695 		.long	0x695
 2415 068e 08        		.uleb128 0x8
 2416 068f 0000 0049 		.long	0x49
 2417 0693 17        		.byte	0x17
 2418 0694 00        		.byte	0


 2419 0695 33        		.uleb128 0x33
 2420 0696 C4        		.byte	0xc4
 2421 0697 04        		.byte	0x4
 2422 0698 0258      		.word	0x258
 2423 069a 03        		.byte	0x3
 2424 069b 0000 06AD 		.long	0x6ad
 2425 069f 34        		.uleb128 0x34
 2426 06a0 0000 0000 		.long	.LASF57
 2427 06a4 04        		.byte	0x4
 2428 06a5 0271      		.word	0x271
 2429 06a7 0B        		.byte	0xb
 2430 06a8 0000 0570 		.long	0x570
 2431 06ac 00        		.byte	0
 2432 06ad 07        		.uleb128 0x7
 2433 06ae 0000 0483 		.long	0x483
 2434 06b2 0000 06BD 		.long	0x6bd
 2435 06b6 08        		.uleb128 0x8
 2436 06b7 0000 0049 		.long	0x49
 2437 06bb 18        		.byte	0x18
 2438 06bc 00        		.byte	0
 2439 06bd 35        		.uleb128 0x35
 2440 06be 0000 0000 		.long	.LASF147
 2441 06c2 04        		.uleb128 0x4
 2442 06c3 0000 06BD 		.long	0x6bd
 2443 06c7 25        		.uleb128 0x25
 2444 06c8 0000 06D2 		.long	0x6d2
 2445 06cc 05        		.uleb128 0x5
 2446 06cd 0000 0397 		.long	0x397
 2447 06d1 00        		.byte	0
 2448 06d2 04        		.uleb128 0x4
 2449 06d3 0000 06C7 		.long	0x6c7
 2450 06d7 04        		.uleb128 0x4
 2451 06d8 0000 017F 		.long	0x17f
 2452 06dc 25        		.uleb128 0x25
 2453 06dd 0000 06E7 		.long	0x6e7
 2454 06e1 05        		.uleb128 0x5
 2455 06e2 0000 0085 		.long	0x85
 2456 06e6 00        		.byte	0
 2457 06e7 04        		.uleb128 0x4
 2458 06e8 0000 06EC 		.long	0x6ec
 2459 06ec 04        		.uleb128 0x4
 2460 06ed 0000 06DC 		.long	0x6dc
 2461 06f1 0B        		.uleb128 0xb
 2462 06f2 0000 0000 		.long	.LASF98
 2463 06f6 06        		.byte	0x6
 2464 06f7 42        		.byte	0x42
 2465 06f8 10        		.byte	0x10
 2466 06f9 0000 0518 		.long	0x518
 2467 06fd 0B        		.uleb128 0xb
 2468 06fe 0000 0000 		.long	.LASF99
 2469 0702 07        		.byte	0x7
 2470 0703 0B        		.byte	0xb
 2471 0704 0D        		.byte	0xd
 2472 0705 0000 0085 		.long	0x85
 2473 0709 1D        		.uleb128 0x1d
 2474 070a 08        		.byte	0x8
 2475 070b 07        		.byte	0x7


 2476 070c 0D        		.byte	0xd
 2477 070d 0000 072C 		.long	0x72c
 2478 0711 01        		.uleb128 0x1
 2479 0712 0000 0000 		.long	.LASF100
 2480 0716 07        		.byte	0x7
 2481 0717 0E        		.byte	0xe
 2482 0718 09        		.byte	0x9
 2483 0719 0000 0085 		.long	0x85
 2484 071d 00        		.byte	0
 2485 071e 01        		.uleb128 0x1
 2486 071f 0000 0000 		.long	.LASF101
 2487 0723 07        		.byte	0x7
 2488 0724 0F        		.byte	0xf
 2489 0725 12        		.byte	0x12
 2490 0726 0000 06FD 		.long	0x6fd
 2491 072a 04        		.byte	0x4
 2492 072b 00        		.byte	0
 2493 072c 0B        		.uleb128 0xb
 2494 072d 0000 0000 		.long	.LASF102
 2495 0731 07        		.byte	0x7
 2496 0732 10        		.byte	0x10
 2497 0733 03        		.byte	0x3
 2498 0734 0000 0709 		.long	0x709
 2499 0738 36        		.uleb128 0x36
 2500 0739 0800      		.word	0x800
 2501 073b 07        		.byte	0x7
 2502 073c 12        		.byte	0x12
 2503 073d 09        		.byte	0x9
 2504 073e 0000 075E 		.long	0x75e
 2505 0742 01        		.uleb128 0x1
 2506 0743 0000 0000 		.long	.LASF103
 2507 0747 07        		.byte	0x7
 2508 0748 13        		.byte	0x13
 2509 0749 0A        		.byte	0xa
 2510 074a 0000 075E 		.long	0x75e
 2511 074e 00        		.byte	0
 2512 074f 37        		.uleb128 0x37
 2513 0750 0000 0000 		.long	.LASF104
 2514 0754 07        		.byte	0x7
 2515 0755 14        		.byte	0x14
 2516 0756 0A        		.byte	0xa
 2517 0757 0000 075E 		.long	0x75e
 2518 075b 0400      		.word	0x400
 2519 075d 00        		.byte	0
 2520 075e 07        		.uleb128 0x7
 2521 075f 0000 0483 		.long	0x483
 2522 0763 0000 076F 		.long	0x76f
 2523 0767 38        		.uleb128 0x38
 2524 0768 0000 0049 		.long	0x49
 2525 076c 03FF      		.word	0x3ff
 2526 076e 00        		.byte	0
 2527 076f 0B        		.uleb128 0xb
 2528 0770 0000 0000 		.long	.LASF105
 2529 0774 07        		.byte	0x7
 2530 0775 15        		.byte	0x15
 2531 0776 03        		.byte	0x3
 2532 0777 0000 0738 		.long	0x738


 2533 077b 1D        		.uleb128 0x1d
 2534 077c 14        		.byte	0x14
 2535 077d 07        		.byte	0x7
 2536 077e 17        		.byte	0x17
 2537 077f 0000 07C5 		.long	0x7c5
 2538 0783 01        		.uleb128 0x1
 2539 0784 0000 0000 		.long	.LASF106
 2540 0788 07        		.byte	0x7
 2541 0789 18        		.byte	0x18
 2542 078a 0C        		.byte	0xc
 2543 078b 0000 07CC 		.long	0x7cc
 2544 078f 00        		.byte	0
 2545 0790 01        		.uleb128 0x1
 2546 0791 0000 0000 		.long	.LASF107
 2547 0795 07        		.byte	0x7
 2548 0796 19        		.byte	0x19
 2549 0797 0B        		.byte	0xb
 2550 0798 0000 0103 		.long	0x103
 2551 079c 04        		.byte	0x4
 2552 079d 01        		.uleb128 0x1
 2553 079e 0000 0000 		.long	.LASF108
 2554 07a2 07        		.byte	0x7
 2555 07a3 1A        		.byte	0x1a
 2556 07a4 09        		.byte	0x9
 2557 07a5 0000 0085 		.long	0x85
 2558 07a9 08        		.byte	0x8
 2559 07aa 01        		.uleb128 0x1
 2560 07ab 0000 0000 		.long	.LASF109
 2561 07af 07        		.byte	0x7
 2562 07b0 1B        		.byte	0x1b
 2563 07b1 09        		.byte	0x9
 2564 07b2 0000 0085 		.long	0x85
 2565 07b6 0C        		.byte	0xc
 2566 07b7 01        		.uleb128 0x1
 2567 07b8 0000 0000 		.long	.LASF110
 2568 07bc 07        		.byte	0x7
 2569 07bd 1C        		.byte	0x1c
 2570 07be 12        		.byte	0x12
 2571 07bf 0000 06FD 		.long	0x6fd
 2572 07c3 10        		.byte	0x10
 2573 07c4 00        		.byte	0
 2574 07c5 39        		.uleb128 0x39
 2575 07c6 0000 07CC 		.long	0x7cc
 2576 07ca 12        		.uleb128 0x12
 2577 07cb 00        		.byte	0
 2578 07cc 04        		.uleb128 0x4
 2579 07cd 0000 07C5 		.long	0x7c5
 2580 07d1 0B        		.uleb128 0xb
 2581 07d2 0000 0000 		.long	.LASF111
 2582 07d6 07        		.byte	0x7
 2583 07d7 1D        		.byte	0x1d
 2584 07d8 03        		.byte	0x3
 2585 07d9 0000 077B 		.long	0x77b
 2586 07dd 24        		.uleb128 0x24
 2587 07de 0000 07D1 		.long	0x7d1
 2588 07e2 07        		.uleb128 0x7
 2589 07e3 0000 07F2 		.long	0x7f2


 2590 07e7 0000 07F2 		.long	0x7f2
 2591 07eb 08        		.uleb128 0x8
 2592 07ec 0000 0049 		.long	0x49
 2593 07f0 01        		.byte	0x1
 2594 07f1 00        		.byte	0
 2595 07f2 04        		.uleb128 0x4
 2596 07f3 0000 06F1 		.long	0x6f1
 2597 07f7 0D        		.uleb128 0xd
 2598 07f8 0000 0000 		.long	.LASF112
 2599 07fc 2A        		.byte	0x2a
 2600 07fd 0E        		.byte	0xe
 2601 07fe 0000 07E2 		.long	0x7e2
 2602 0802 0D        		.uleb128 0xd
 2603 0803 0000 0000 		.long	.LASF113
 2604 0807 2B        		.byte	0x2b
 2605 0808 0E        		.byte	0xe
 2606 0809 0000 07E2 		.long	0x7e2
 2607 080d 07        		.uleb128 0x7
 2608 080e 0000 072C 		.long	0x72c
 2609 0812 0000 081D 		.long	0x81d
 2610 0816 08        		.uleb128 0x8
 2611 0817 0000 0049 		.long	0x49
 2612 081b 04        		.byte	0x4
 2613 081c 00        		.byte	0
 2614 081d 0D        		.uleb128 0xd
 2615 081e 0000 0000 		.long	.LASF114
 2616 0822 2C        		.byte	0x2c
 2617 0823 17        		.byte	0x17
 2618 0824 0000 080D 		.long	0x80d
 2619 0828 07        		.uleb128 0x7
 2620 0829 0000 076F 		.long	0x76f
 2621 082d 0000 0838 		.long	0x838
 2622 0831 08        		.uleb128 0x8
 2623 0832 0000 0049 		.long	0x49
 2624 0836 04        		.byte	0x4
 2625 0837 00        		.byte	0
 2626 0838 0D        		.uleb128 0xd
 2627 0839 0000 0000 		.long	.LASF115
 2628 083d 2D        		.byte	0x2d
 2629 083e 13        		.byte	0x13
 2630 083f 0000 0828 		.long	0x828
 2631 0843 07        		.uleb128 0x7
 2632 0844 0000 07D1 		.long	0x7d1
 2633 0848 0000 0853 		.long	0x853
 2634 084c 08        		.uleb128 0x8
 2635 084d 0000 0049 		.long	0x49
 2636 0851 05        		.byte	0x5
 2637 0852 00        		.byte	0
 2638 0853 0D        		.uleb128 0xd
 2639 0854 0000 0000 		.long	.LASF116
 2640 0858 2E        		.byte	0x2e
 2641 0859 11        		.byte	0x11
 2642 085a 0000 0843 		.long	0x843
 2643 085e 0D        		.uleb128 0xd
 2644 085f 0000 0000 		.long	.LASF117
 2645 0863 30        		.byte	0x30
 2646 0864 15        		.byte	0x15


 2647 0865 0000 06FD 		.long	0x6fd
 2648 0869 0D        		.uleb128 0xd
 2649 086a 0000 0000 		.long	.LASF118
 2650 086e 31        		.byte	0x31
 2651 086f 15        		.byte	0x15
 2652 0870 0000 06FD 		.long	0x6fd
 2653 0874 0D        		.uleb128 0xd
 2654 0875 0000 0000 		.long	.LASF119
 2655 0879 32        		.byte	0x32
 2656 087a 15        		.byte	0x15
 2657 087b 0000 06FD 		.long	0x6fd
 2658 087f 0D        		.uleb128 0xd
 2659 0880 0000 0000 		.long	.LASF120
 2660 0884 33        		.byte	0x33
 2661 0885 15        		.byte	0x15
 2662 0886 0000 06FD 		.long	0x6fd
 2663 088a 0E        		.uleb128 0xe
 2664 088b 0000 07F7 		.long	0x7f7
 2665 088f 0A        		.byte	0xa
 2666 0890 07        		.byte	0x7
 2667 0891 05        		.uleb128 0x5
 2668 0892 03        		.byte	0x3
 2669 0893 0000 0000 		.long	comout
 2670 0897 0E        		.uleb128 0xe
 2671 0898 0000 0802 		.long	0x802
 2672 089c 0B        		.byte	0xb
 2673 089d 07        		.byte	0x7
 2674 089e 05        		.uleb128 0x5
 2675 089f 03        		.byte	0x3
 2676 08a0 0000 0000 		.long	comin
 2677 08a4 0E        		.uleb128 0xe
 2678 08a5 0000 081D 		.long	0x81d
 2679 08a9 0C        		.byte	0xc
 2680 08aa 10        		.byte	0x10
 2681 08ab 05        		.uleb128 0x5
 2682 08ac 03        		.byte	0x3
 2683 08ad 0000 0000 		.long	semaphore
 2684 08b1 0E        		.uleb128 0xe
 2685 08b2 0000 0838 		.long	0x838
 2686 08b6 0D        		.byte	0xd
 2687 08b7 0C        		.byte	0xc
 2688 08b8 05        		.uleb128 0x5
 2689 08b9 03        		.byte	0x3
 2690 08ba 0000 0000 		.long	stacks
 2691 08be 0E        		.uleb128 0xe
 2692 08bf 0000 0853 		.long	0x853
 2693 08c3 0E        		.byte	0xe
 2694 08c4 0A        		.byte	0xa
 2695 08c5 05        		.uleb128 0x5
 2696 08c6 03        		.byte	0x3
 2697 08c7 0000 0000 		.long	task_tab
 2698 08cb 0E        		.uleb128 0xe
 2699 08cc 0000 085E 		.long	0x85e
 2700 08d0 10        		.byte	0x10
 2701 08d1 0E        		.byte	0xe
 2702 08d2 05        		.uleb128 0x5
 2703 08d3 03        		.byte	0x3


 2704 08d4 0000 0000 		.long	curr_task
 2705 08d8 0E        		.uleb128 0xe
 2706 08d9 0000 0869 		.long	0x869
 2707 08dd 11        		.byte	0x11
 2708 08de 0E        		.byte	0xe
 2709 08df 05        		.uleb128 0x5
 2710 08e0 03        		.byte	0x3
 2711 08e1 0000 0000 		.long	next_task
 2712 08e5 0E        		.uleb128 0xe
 2713 08e6 0000 0874 		.long	0x874
 2714 08ea 12        		.byte	0x12
 2715 08eb 0E        		.byte	0xe
 2716 08ec 05        		.uleb128 0x5
 2717 08ed 03        		.byte	0x3
 2718 08ee 0000 0000 		.long	new_task
 2719 08f2 0E        		.uleb128 0xe
 2720 08f3 0000 087F 		.long	0x87f
 2721 08f7 13        		.byte	0x13
 2722 08f8 0E        		.byte	0xe
 2723 08f9 05        		.uleb128 0x5
 2724 08fa 03        		.byte	0x3
 2725 08fb 0000 0000 		.long	ready
 2726 08ff 3A        		.uleb128 0x3a
 2727 0900 0000 0000 		.long	.LASF121
 2728 0904 01        		.byte	0x1
 2729 0905 15        		.byte	0x15
 2730 0906 10        		.byte	0x10
 2731 0907 0000 07DD 		.long	0x7dd
 2732 090b 05        		.uleb128 0x5
 2733 090c 03        		.byte	0x3
 2734 090d 0000 0000 		.long	empty_task_tab
 2735 0911 1C        		.uleb128 0x1c
 2736 0912 0000 0000 		.long	.LASF122
 2737 0916 26        		.byte	0x26
 2738 0917 0000 091D 		.long	0x91d
 2739 091b 12        		.uleb128 0x12
 2740 091c 00        		.byte	0
 2741 091d 1C        		.uleb128 0x1c
 2742 091e 0000 0000 		.long	.LASF123
 2743 0922 27        		.byte	0x27
 2744 0923 0000 0929 		.long	0x929
 2745 0927 12        		.uleb128 0x12
 2746 0928 00        		.byte	0
 2747 0929 1C        		.uleb128 0x1c
 2748 092a 0000 0000 		.long	.LASF124
 2749 092e 25        		.byte	0x25
 2750 092f 0000 0935 		.long	0x935
 2751 0933 12        		.uleb128 0x12
 2752 0934 00        		.byte	0
 2753 0935 3B        		.uleb128 0x3b
 2754 0936 0000 0000 		.long	.LASF126
 2755 093a 06        		.byte	0x6
 2756 093b 0159      		.word	0x159
 2757 093d 08        		.byte	0x8
 2758 093e 0000 07F2 		.long	0x7f2
 2759 0942 0000 0951 		.long	0x951
 2760 0946 05        		.uleb128 0x5


 2761 0947 0000 0085 		.long	0x85
 2762 094b 05        		.uleb128 0x5
 2763 094c 0000 04B2 		.long	0x4b2
 2764 0950 00        		.byte	0
 2765 0951 1C        		.uleb128 0x1c
 2766 0952 0000 0000 		.long	.LASF125
 2767 0956 24        		.byte	0x24
 2768 0957 0000 095D 		.long	0x95d
 2769 095b 12        		.uleb128 0x12
 2770 095c 00        		.byte	0
 2771 095d 3C        		.uleb128 0x3c
 2772 095e 0000 0000 		.long	.LASF127
 2773 0962 01        		.byte	0x1
 2774 0963 18        		.byte	0x18
 2775 0964 0D        		.byte	0xd
 2776 0965 0000 0483 		.long	0x483
 2777 0969 0000 0973 		.long	0x973
 2778 096d 05        		.uleb128 0x5
 2779 096e 0000 0973 		.long	0x973
 2780 0972 00        		.byte	0
 2781 0973 0A        		.uleb128 0xa
 2782 0974 01        		.byte	0x1
 2783 0975 02        		.byte	0x2
 2784 0976 0000 0000 		.long	.LASF128
 2785 097a 1E        		.uleb128 0x1e
 2786 097b 0000 0000 		.long	.LASF129
 2787 097f A3        		.byte	0xa3
 2788 0980 0000 098F 		.long	0x98f
 2789 0984 13        		.uleb128 0x13
 2790 0985 6368 00   		.string	"ch"
 2791 0988 A3        		.byte	0xa3
 2792 0989 11        		.byte	0x11
 2793 098a 0000 0085 		.long	0x85
 2794 098e 00        		.byte	0
 2795 098f 1E        		.uleb128 0x1e
 2796 0990 0000 0000 		.long	.LASF130
 2797 0994 9C        		.byte	0x9c
 2798 0995 0000 09A4 		.long	0x9a4
 2799 0999 13        		.uleb128 0x13
 2800 099a 6368 00   		.string	"ch"
 2801 099d 9C        		.byte	0x9c
 2802 099e 10        		.byte	0x10
 2803 099f 0000 0085 		.long	0x85
 2804 09a3 00        		.byte	0
 2805 09a4 3D        		.uleb128 0x3d
 2806 09a5 0000 0000 		.long	.LASF148
 2807 09a9 01        		.byte	0x1
 2808 09aa 94        		.byte	0x94
 2809 09ab 06        		.byte	0x6
 2810 09ac 01        		.byte	0x1
 2811 09ad 1F        		.uleb128 0x1f
 2812 09ae 0000 0000 		.long	.LASF131
 2813 09b2 8C        		.byte	0x8c
 2814 09b3 0000 0000 		.long	.LFB13
 2815 09b7 0000 00B8 		.long	.LFE13-.LFB13
 2816 09bb 01        		.uleb128 0x1
 2817 09bc 9C        		.byte	0x9c


 2818 09bd 0000 0A83 		.long	0xa83
 2819 09c1 16        		.uleb128 0x16
 2820 09c2 6964 00   		.string	"id"
 2821 09c5 8C        		.byte	0x8c
 2822 09c6 11        		.byte	0x11
 2823 09c7 0000 0085 		.long	0x85
 2824 09cb 02        		.uleb128 0x2
 2825 09cc 91        		.byte	0x91
 2826 09cd 00        		.sleb128 0
 2827 09ce 10        		.uleb128 0x10
 2828 09cf 0000 097A 		.long	0x97a
 2829 09d3 0000 0000 		.long	.LBI68
 2830 09d7 01        		.byte	.LVU305
 2831 09d8 0000 0000 		.long	.LLRL32
 2832 09dc 8F        		.byte	0x8f
 2833 09dd 09        		.byte	0x9
 2834 09de 06        		.uleb128 0x6
 2835 09df 0000 0984 		.long	0x984
 2836 09e3 0000 0000 		.long	.LLST33
 2837 09e7 0000 0000 		.long	.LVUS33
 2838 09eb 14        		.uleb128 0x14
 2839 09ec 0000 0B77 		.long	0xb77
 2840 09f0 0000 0000 		.long	.LBI69
 2841 09f4 03        		.byte	.LVU307
 2842 09f5 0000 0000 		.long	.LLRL34
 2843 09f9 A4        		.byte	0xa4
 2844 09fa 05        		.byte	0x5
 2845 09fb 0000 0A28 		.long	0xa28
 2846 09ff 06        		.uleb128 0x6
 2847 0a00 0000 0B86 		.long	0xb86
 2848 0a04 0000 0000 		.long	.LLST35
 2849 0a08 0000 0000 		.long	.LVUS35
 2850 0a0c 09        		.uleb128 0x9
 2851 0a0d 0000 0B91 		.long	0xb91
 2852 0a11 0000 0000 		.long	.LBB71
 2853 0a15 0000 0012 		.long	.LBE71-.LBB71
 2854 0a19 03        		.uleb128 0x3
 2855 0a1a 0000 0B92 		.long	0xb92
 2856 0a1e 0000 0000 		.long	.LLST36
 2857 0a22 0000 0000 		.long	.LVUS36
 2858 0a26 00        		.byte	0
 2859 0a27 00        		.byte	0
 2860 0a28 10        		.uleb128 0x10
 2861 0a29 0000 0BA4 		.long	0xba4
 2862 0a2d 0000 0000 		.long	.LBI73
 2863 0a31 01        		.byte	.LVU312
 2864 0a32 0000 0000 		.long	.LLRL37
 2865 0a36 A4        		.byte	0xa4
 2866 0a37 05        		.byte	0x5
 2867 0a38 06        		.uleb128 0x6
 2868 0a39 0000 0BB9 		.long	0xbb9
 2869 0a3d 0000 0000 		.long	.LLST38
 2870 0a41 0000 0000 		.long	.LVUS38
 2871 0a45 06        		.uleb128 0x6
 2872 0a46 0000 0BAE 		.long	0xbae
 2873 0a4a 0000 0000 		.long	.LLST39
 2874 0a4e 0000 0000 		.long	.LVUS39


 2875 0a52 17        		.uleb128 0x17
 2876 0a53 0000 0000 		.long	.LLRL37
 2877 0a57 03        		.uleb128 0x3
 2878 0a58 0000 0BC3 		.long	0xbc3
 2879 0a5c 0000 0000 		.long	.LLST40
 2880 0a60 0000 0000 		.long	.LVUS40
 2881 0a64 09        		.uleb128 0x9
 2882 0a65 0000 0BCE 		.long	0xbce
 2883 0a69 0000 0000 		.long	.LBB75
 2884 0a6d 0000 0036 		.long	.LBE75-.LBB75
 2885 0a71 03        		.uleb128 0x3
 2886 0a72 0000 0BCF 		.long	0xbcf
 2887 0a76 0000 0000 		.long	.LLST41
 2888 0a7a 0000 0000 		.long	.LVUS41
 2889 0a7e 00        		.byte	0
 2890 0a7f 00        		.byte	0
 2891 0a80 00        		.byte	0
 2892 0a81 00        		.byte	0
 2893 0a82 00        		.byte	0
 2894 0a83 1F        		.uleb128 0x1f
 2895 0a84 0000 0000 		.long	.LASF132
 2896 0a88 84        		.byte	0x84
 2897 0a89 0000 0000 		.long	.LFB12
 2898 0a8d 0000 00C4 		.long	.LFE12-.LFB12
 2899 0a91 01        		.uleb128 0x1
 2900 0a92 9C        		.byte	0x9c
 2901 0a93 0000 0B77 		.long	0xb77
 2902 0a97 16        		.uleb128 0x16
 2903 0a98 6964 00   		.string	"id"
 2904 0a9b 84        		.byte	0x84
 2905 0a9c 11        		.byte	0x11
 2906 0a9d 0000 0085 		.long	0x85
 2907 0aa1 02        		.uleb128 0x2
 2908 0aa2 91        		.byte	0x91
 2909 0aa3 00        		.sleb128 0
 2910 0aa4 10        		.uleb128 0x10
 2911 0aa5 0000 098F 		.long	0x98f
 2912 0aa9 0000 0000 		.long	.LBI42
 2913 0aad 01        		.byte	.LVU236
 2914 0aae 0000 0000 		.long	.LLRL21
 2915 0ab2 87        		.byte	0x87
 2916 0ab3 09        		.byte	0x9
 2917 0ab4 06        		.uleb128 0x6
 2918 0ab5 0000 0999 		.long	0x999
 2919 0ab9 0000 0000 		.long	.LLST22
 2920 0abd 0000 0000 		.long	.LVUS22
 2921 0ac1 14        		.uleb128 0x14
 2922 0ac2 0000 0BA4 		.long	0xba4
 2923 0ac6 0000 0000 		.long	.LBI44
 2924 0aca 00        		.byte	.LVU238
 2925 0acb 0000 0000 		.long	.LLRL23
 2926 0acf 9D        		.byte	0x9d
 2927 0ad0 05        		.byte	0x5
 2928 0ad1 0000 0B1E 		.long	0xb1e
 2929 0ad5 06        		.uleb128 0x6
 2930 0ad6 0000 0BB9 		.long	0xbb9
 2931 0ada 0000 0000 		.long	.LLST24


 2932 0ade 0000 0000 		.long	.LVUS24
 2933 0ae2 06        		.uleb128 0x6
 2934 0ae3 0000 0BAE 		.long	0xbae
 2935 0ae7 0000 0000 		.long	.LLST25
 2936 0aeb 0000 0000 		.long	.LVUS25
 2937 0aef 17        		.uleb128 0x17
 2938 0af0 0000 0000 		.long	.LLRL23
 2939 0af4 03        		.uleb128 0x3
 2940 0af5 0000 0BC3 		.long	0xbc3
 2941 0af9 0000 0000 		.long	.LLST26
 2942 0afd 0000 0000 		.long	.LVUS26
 2943 0b01 09        		.uleb128 0x9
 2944 0b02 0000 0BCE 		.long	0xbce
 2945 0b06 0000 0000 		.long	.LBB46
 2946 0b0a 0000 003C 		.long	.LBE46-.LBB46
 2947 0b0e 03        		.uleb128 0x3
 2948 0b0f 0000 0BCF 		.long	0xbcf
 2949 0b13 0000 0000 		.long	.LLST27
 2950 0b17 0000 0000 		.long	.LVUS27
 2951 0b1b 00        		.byte	0
 2952 0b1c 00        		.byte	0
 2953 0b1d 00        		.byte	0
 2954 0b1e 14        		.uleb128 0x14
 2955 0b1f 0000 09A4 		.long	0x9a4
 2956 0b23 0000 0000 		.long	.LBI48
 2957 0b27 02        		.byte	.LVU249
 2958 0b28 0000 0000 		.long	.LLRL28
 2959 0b2c 9E        		.byte	0x9e
 2960 0b2d 02        		.byte	0x2
 2961 0b2e 0000 0B6C 		.long	0xb6c
 2962 0b32 10        		.uleb128 0x10
 2963 0b33 0000 0B77 		.long	0xb77
 2964 0b37 0000 0000 		.long	.LBI50
 2965 0b3b 04        		.byte	.LVU251
 2966 0b3c 0000 0000 		.long	.LLRL29
 2967 0b40 96        		.byte	0x96
 2968 0b41 0E        		.byte	0xe
 2969 0b42 06        		.uleb128 0x6
 2970 0b43 0000 0B86 		.long	0xb86
 2971 0b47 0000 0000 		.long	.LLST30
 2972 0b4b 0000 0000 		.long	.LVUS30
 2973 0b4f 09        		.uleb128 0x9
 2974 0b50 0000 0B91 		.long	0xb91
 2975 0b54 0000 0000 		.long	.LBB52
 2976 0b58 0000 0014 		.long	.LBE52-.LBB52
 2977 0b5c 03        		.uleb128 0x3
 2978 0b5d 0000 0B92 		.long	0xb92
 2979 0b61 0000 0000 		.long	.LLST31
 2980 0b65 0000 0000 		.long	.LVUS31
 2981 0b69 00        		.byte	0
 2982 0b6a 00        		.byte	0
 2983 0b6b 00        		.byte	0
 2984 0b6c 20        		.uleb128 0x20
 2985 0b6d 0000 0000 		.long	.LVL78
 2986 0b71 0000 0911 		.long	0x911
 2987 0b75 00        		.byte	0
 2988 0b76 00        		.byte	0


 2989 0b77 26        		.uleb128 0x26
 2990 0b78 0000 0000 		.long	.LASF133
 2991 0b7c 78        		.byte	0x78
 2992 0b7d 0E        		.byte	0xe
 2993 0b7e 0000 06FD 		.long	0x6fd
 2994 0b82 0000 0B9F 		.long	0xb9f
 2995 0b86 13        		.uleb128 0x13
 2996 0b87 7074 7200 		.string	"ptr"
 2997 0b8b 78        		.byte	0x78
 2998 0b8c 24        		.byte	0x24
 2999 0b8d 0000 0B9F 		.long	0xb9f
 3000 0b91 27        		.uleb128 0x27
 3001 0b92 18        		.uleb128 0x18
 3002 0b93 746F 7000 		.string	"top"
 3003 0b97 7D        		.byte	0x7d
 3004 0b98 10        		.byte	0x10
 3005 0b99 0000 06FD 		.long	0x6fd
 3006 0b9d 00        		.byte	0
 3007 0b9e 00        		.byte	0
 3008 0b9f 04        		.uleb128 0x4
 3009 0ba0 0000 06FD 		.long	0x6fd
 3010 0ba4 1E        		.uleb128 0x1e
 3011 0ba5 0000 0000 		.long	.LASF134
 3012 0ba9 69        		.byte	0x69
 3013 0baa 0000 0BDA 		.long	0xbda
 3014 0bae 13        		.uleb128 0x13
 3015 0baf 7074 7200 		.string	"ptr"
 3016 0bb3 69        		.byte	0x69
 3017 0bb4 19        		.byte	0x19
 3018 0bb5 0000 0B9F 		.long	0xb9f
 3019 0bb9 13        		.uleb128 0x13
 3020 0bba 6964 00   		.string	"id"
 3021 0bbd 69        		.byte	0x69
 3022 0bbe 2B        		.byte	0x2b
 3023 0bbf 0000 06FD 		.long	0x6fd
 3024 0bc3 18        		.uleb128 0x18
 3025 0bc4 746D 7000 		.string	"tmp"
 3026 0bc8 6A        		.byte	0x6a
 3027 0bc9 12        		.byte	0x12
 3028 0bca 0000 06FD 		.long	0x6fd
 3029 0bce 27        		.uleb128 0x27
 3030 0bcf 18        		.uleb128 0x18
 3031 0bd0 6A00      		.string	"j"
 3032 0bd2 6D        		.byte	0x6d
 3033 0bd3 16        		.byte	0x16
 3034 0bd4 0000 06FD 		.long	0x6fd
 3035 0bd8 00        		.byte	0
 3036 0bd9 00        		.byte	0
 3037 0bda 21        		.uleb128 0x21
 3038 0bdb 0000 0000 		.long	.LASF139
 3039 0bdf 62        		.byte	0x62
 3040 0be0 0000 0000 		.long	.LFB9
 3041 0be4 0000 0034 		.long	.LFE9-.LFB9
 3042 0be8 01        		.uleb128 0x1
 3043 0be9 9C        		.byte	0x9c
 3044 0bea 0000 0C42 		.long	0xc42
 3045 0bee 28        		.uleb128 0x28


 3046 0bef 0000 0B77 		.long	0xb77
 3047 0bf3 0000 0000 		.long	.LBI26
 3048 0bf7 02        		.byte	.LVU173
 3049 0bf8 0000 0000 		.long	.LBB26
 3050 0bfc 0000 0022 		.long	.LBE26-.LBB26
 3051 0c00 63        		.byte	0x63
 3052 0c01 11        		.byte	0x11
 3053 0c02 0000 0C2F 		.long	0xc2f
 3054 0c06 06        		.uleb128 0x6
 3055 0c07 0000 0B86 		.long	0xb86
 3056 0c0b 0000 0000 		.long	.LLST16
 3057 0c0f 0000 0000 		.long	.LVUS16
 3058 0c13 09        		.uleb128 0x9
 3059 0c14 0000 0B91 		.long	0xb91
 3060 0c18 0000 0000 		.long	.LBB28
 3061 0c1c 0000 001A 		.long	.LBE28-.LBB28
 3062 0c20 03        		.uleb128 0x3
 3063 0c21 0000 0B92 		.long	0xb92
 3064 0c25 0000 0000 		.long	.LLST17
 3065 0c29 0000 0000 		.long	.LVUS17
 3066 0c2d 00        		.byte	0
 3067 0c2e 00        		.byte	0
 3068 0c2f 0F        		.uleb128 0xf
 3069 0c30 0000 0000 		.long	.LVL52
 3070 0c34 0000 0929 		.long	0x929
 3071 0c38 20        		.uleb128 0x20
 3072 0c39 0000 0000 		.long	.LVL53
 3073 0c3d 0000 091D 		.long	0x91d
 3074 0c41 00        		.byte	0
 3075 0c42 26        		.uleb128 0x26
 3076 0c43 0000 0000 		.long	.LASF135
 3077 0c47 4C        		.byte	0x4c
 3078 0c48 07        		.byte	0x7
 3079 0c49 0000 0103 		.long	0x103
 3080 0c4d 0000 0C7C 		.long	0xc7c
 3081 0c51 13        		.uleb128 0x13
 3082 0c52 6964 00   		.string	"id"
 3083 0c55 4C        		.byte	0x4c
 3084 0c56 1F        		.byte	0x1f
 3085 0c57 0000 06FD 		.long	0x6fd
 3086 0c5b 18        		.uleb128 0x18
 3087 0c5c 7373 7000 		.string	"ssp"
 3088 0c60 4E        		.byte	0x4e
 3089 0c61 07        		.byte	0x7
 3090 0c62 0000 0C7C 		.long	0xc7c
 3091 0c66 3E        		.uleb128 0x3e
 3092 0c67 0000 0000 		.long	.LASF136
 3093 0c6b 01        		.byte	0x1
 3094 0c6c 4F        		.byte	0x4f
 3095 0c6d 16        		.byte	0x16
 3096 0c6e 0000 0C81 		.long	0xc81
 3097 0c72 18        		.uleb128 0x18
 3098 0c73 6900      		.string	"i"
 3099 0c75 50        		.byte	0x50
 3100 0c76 06        		.byte	0x6
 3101 0c77 0000 0085 		.long	0x85
 3102 0c7b 00        		.byte	0


 3103 0c7c 04        		.uleb128 0x4
 3104 0c7d 0000 0085 		.long	0x85
 3105 0c81 04        		.uleb128 0x4
 3106 0c82 0000 003B 		.long	0x3b
 3107 0c86 1F        		.uleb128 0x1f
 3108 0c87 0000 0000 		.long	.LASF137
 3109 0c8b 3B        		.byte	0x3b
 3110 0c8c 0000 0000 		.long	.LFB7
 3111 0c90 0000 00F2 		.long	.LFE7-.LFB7
 3112 0c94 01        		.uleb128 0x1
 3113 0c95 9C        		.byte	0x9c
 3114 0c96 0000 0D69 		.long	0xd69
 3115 0c9a 3F        		.uleb128 0x3f
 3116 0c9b 0000 0000 		.long	.LASF138
 3117 0c9f 01        		.byte	0x1
 3118 0ca0 3B        		.byte	0x3b
 3119 0ca1 15        		.byte	0x15
 3120 0ca2 0000 0103 		.long	0x103
 3121 0ca6 02        		.uleb128 0x2
 3122 0ca7 91        		.byte	0x91
 3123 0ca8 00        		.sleb128 0
 3124 0ca9 19        		.uleb128 0x19
 3125 0caa 6900      		.string	"i"
 3126 0cac 3C        		.byte	0x3c
 3127 0cad 09        		.byte	0x9
 3128 0cae 0000 0085 		.long	0x85
 3129 0cb2 0000 0000 		.long	.LLST4
 3130 0cb6 0000 0000 		.long	.LVUS4
 3131 0cba 28        		.uleb128 0x28
 3132 0cbb 0000 0C42 		.long	0xc42
 3133 0cbf 0000 0000 		.long	.LBI19
 3134 0cc3 01        		.byte	.LVU102
 3135 0cc4 0000 0000 		.long	.LBB19
 3136 0cc8 0000 003A 		.long	.LBE19-.LBB19
 3137 0ccc 42        		.byte	0x42
 3138 0ccd 2C        		.byte	0x2c
 3139 0cce 0000 0D10 		.long	0xd10
 3140 0cd2 06        		.uleb128 0x6
 3141 0cd3 0000 0C51 		.long	0xc51
 3142 0cd7 0000 0000 		.long	.LLST5
 3143 0cdb 0000 0000 		.long	.LVUS5
 3144 0cdf 03        		.uleb128 0x3
 3145 0ce0 0000 0C5B 		.long	0xc5b
 3146 0ce4 0000 0000 		.long	.LLST6
 3147 0ce8 0000 0000 		.long	.LVUS6
 3148 0cec 03        		.uleb128 0x3
 3149 0ced 0000 0C66 		.long	0xc66
 3150 0cf1 0000 0000 		.long	.LLST7
 3151 0cf5 0000 0000 		.long	.LVUS7
 3152 0cf9 03        		.uleb128 0x3
 3153 0cfa 0000 0C72 		.long	0xc72
 3154 0cfe 0000 0000 		.long	.LLST8
 3155 0d02 0000 0000 		.long	.LVUS8
 3156 0d06 0F        		.uleb128 0xf
 3157 0d07 0000 0000 		.long	.LVL31
 3158 0d0b 0000 1128 		.long	0x1128
 3159 0d0f 00        		.byte	0


 3160 0d10 10        		.uleb128 0x10
 3161 0d11 0000 0BA4 		.long	0xba4
 3162 0d15 0000 0000 		.long	.LBI21
 3163 0d19 01        		.byte	.LVU121
 3164 0d1a 0000 0000 		.long	.LLRL9
 3165 0d1e 43        		.byte	0x43
 3166 0d1f 0D        		.byte	0xd
 3167 0d20 06        		.uleb128 0x6
 3168 0d21 0000 0BB9 		.long	0xbb9
 3169 0d25 0000 0000 		.long	.LLST10
 3170 0d29 0000 0000 		.long	.LVUS10
 3171 0d2d 11        		.uleb128 0x11
 3172 0d2e 0000 0BAE 		.long	0xbae
 3173 0d32 06        		.uleb128 0x6
 3174 0d33 03        		.byte	0x3
 3175 0d34 0000 0000 		.long	ready
 3176 0d38 9F        		.byte	0x9f
 3177 0d39 17        		.uleb128 0x17
 3178 0d3a 0000 0000 		.long	.LLRL9
 3179 0d3e 03        		.uleb128 0x3
 3180 0d3f 0000 0BC3 		.long	0xbc3
 3181 0d43 0000 0000 		.long	.LLST11
 3182 0d47 0000 0000 		.long	.LVUS11
 3183 0d4b 09        		.uleb128 0x9
 3184 0d4c 0000 0BCE 		.long	0xbce
 3185 0d50 0000 0000 		.long	.LBB23
 3186 0d54 0000 0036 		.long	.LBE23-.LBB23
 3187 0d58 03        		.uleb128 0x3
 3188 0d59 0000 0BCF 		.long	0xbcf
 3189 0d5d 0000 0000 		.long	.LLST12
 3190 0d61 0000 0000 		.long	.LVUS12
 3191 0d65 00        		.byte	0
 3192 0d66 00        		.byte	0
 3193 0d67 00        		.byte	0
 3194 0d68 00        		.byte	0
 3195 0d69 21        		.uleb128 0x21
 3196 0d6a 0000 0000 		.long	.LASF140
 3197 0d6e 32        		.byte	0x32
 3198 0d6f 0000 0000 		.long	.LFB6
 3199 0d73 0000 0058 		.long	.LFE6-.LFB6
 3200 0d77 01        		.uleb128 0x1
 3201 0d78 9C        		.byte	0x9c
 3202 0d79 0000 0DBD 		.long	0xdbd
 3203 0d7d 29        		.uleb128 0x29
 3204 0d7e 0000 0000 		.long	.LBB13
 3205 0d82 0000 004E 		.long	.LBE13-.LBB13
 3206 0d86 19        		.uleb128 0x19
 3207 0d87 6900      		.string	"i"
 3208 0d89 34        		.byte	0x34
 3209 0d8a 0D        		.byte	0xd
 3210 0d8b 0000 0085 		.long	0x85
 3211 0d8f 0000 0000 		.long	.LLST3
 3212 0d93 0000 0000 		.long	.LVUS3
 3213 0d97 0F        		.uleb128 0xf
 3214 0d98 0000 0000 		.long	.LVL15
 3215 0d9c 0000 0935 		.long	0x935
 3216 0da0 0F        		.uleb128 0xf


 3217 0da1 0000 0000 		.long	.LVL16
 3218 0da5 0000 0935 		.long	0x935
 3219 0da9 0F        		.uleb128 0xf
 3220 0daa 0000 0000 		.long	.LVL18
 3221 0dae 0000 0935 		.long	0x935
 3222 0db2 0F        		.uleb128 0xf
 3223 0db3 0000 0000 		.long	.LVL19
 3224 0db7 0000 0935 		.long	0x935
 3225 0dbb 00        		.byte	0
 3226 0dbc 00        		.byte	0
 3227 0dbd 21        		.uleb128 0x21
 3228 0dbe 0000 0000 		.long	.LASF141
 3229 0dc2 26        		.byte	0x26
 3230 0dc3 0000 0000 		.long	.LFB5
 3231 0dc7 0000 0072 		.long	.LFE5-.LFB5
 3232 0dcb 01        		.uleb128 0x1
 3233 0dcc 9C        		.byte	0x9c
 3234 0dcd 0000 0E0C 		.long	0xe0c
 3235 0dd1 40        		.uleb128 0x40
 3236 0dd2 0000 0000 		.long	.LBB11
 3237 0dd6 0000 0024 		.long	.LBE11-.LBB11
 3238 0dda 0000 0DF0 		.long	0xdf0
 3239 0dde 19        		.uleb128 0x19
 3240 0ddf 6900      		.string	"i"
 3241 0de1 27        		.byte	0x27
 3242 0de2 0D        		.byte	0xd
 3243 0de3 0000 0085 		.long	0x85
 3244 0de7 0000 0000 		.long	.LLST1
 3245 0deb 0000 0000 		.long	.LVUS1
 3246 0def 00        		.byte	0
 3247 0df0 29        		.uleb128 0x29
 3248 0df1 0000 0000 		.long	.LBB12
 3249 0df5 0000 003E 		.long	.LBE12-.LBB12
 3250 0df9 19        		.uleb128 0x19
 3251 0dfa 6A00      		.string	"j"
 3252 0dfc 2C        		.byte	0x2c
 3253 0dfd 0D        		.byte	0xd
 3254 0dfe 0000 0085 		.long	0x85
 3255 0e02 0000 0000 		.long	.LLST2
 3256 0e06 0000 0000 		.long	.LVUS2
 3257 0e0a 00        		.byte	0
 3258 0e0b 00        		.byte	0
 3259 0e0c 2A        		.uleb128 0x2a
 3260 0e0d 0000 0000 		.long	.LASF142
 3261 0e11 08        		.byte	0x8
 3262 0e12 DA        		.byte	0xda
 3263 0e13 0C        		.byte	0xc
 3264 0e14 0000 0085 		.long	0x85
 3265 0e18 0000 0000 		.long	.LFB4
 3266 0e1c 0000 0012 		.long	.LFE4-.LFB4
 3267 0e20 01        		.uleb128 0x1
 3268 0e21 9C        		.byte	0x9c
 3269 0e22 0000 0E43 		.long	0xe43
 3270 0e26 16        		.uleb128 0x16
 3271 0e27 6664 00   		.string	"fd"
 3272 0e2a 21        		.byte	0x21
 3273 0e2b 0F        		.byte	0xf


 3274 0e2c 0000 0085 		.long	0x85
 3275 0e30 02        		.uleb128 0x2
 3276 0e31 91        		.byte	0x91
 3277 0e32 00        		.sleb128 0
 3278 0e33 16        		.uleb128 0x16
 3279 0e34 636D 6400 		.string	"cmd"
 3280 0e38 21        		.byte	0x21
 3281 0e39 17        		.byte	0x17
 3282 0e3a 0000 0085 		.long	0x85
 3283 0e3e 02        		.uleb128 0x2
 3284 0e3f 91        		.byte	0x91
 3285 0e40 04        		.sleb128 4
 3286 0e41 12        		.uleb128 0x12
 3287 0e42 00        		.byte	0
 3288 0e43 2A        		.uleb128 0x2a
 3289 0e44 0000 0000 		.long	.LASF143
 3290 0e48 01        		.byte	0x1
 3291 0e49 1A        		.byte	0x1a
 3292 0e4a 05        		.byte	0x5
 3293 0e4b 0000 0085 		.long	0x85
 3294 0e4f 0000 0000 		.long	.LFB3
 3295 0e53 0000 0024 		.long	.LFE3-.LFB3
 3296 0e57 01        		.uleb128 0x1
 3297 0e58 9C        		.byte	0x9c
 3298 0e59 0000 0E85 		.long	0xe85
 3299 0e5d 16        		.uleb128 0x16
 3300 0e5e 6368 00   		.string	"ch"
 3301 0e61 1A        		.byte	0x1a
 3302 0e62 10        		.byte	0x10
 3303 0e63 0000 0973 		.long	0x973
 3304 0e67 02        		.uleb128 0x2
 3305 0e68 91        		.byte	0x91
 3306 0e69 03        		.sleb128 3
 3307 0e6a 19        		.uleb128 0x19
 3308 0e6b 6300      		.string	"c"
 3309 0e6d 1B        		.byte	0x1b
 3310 0e6e 09        		.byte	0x9
 3311 0e6f 0000 0085 		.long	0x85
 3312 0e73 0000 0000 		.long	.LLST0
 3313 0e77 0000 0000 		.long	.LVUS0
 3314 0e7b 0F        		.uleb128 0xf
 3315 0e7c 0000 0000 		.long	.LVL1
 3316 0e80 0000 095D 		.long	0x95d
 3317 0e84 00        		.byte	0
 3318 0e85 15        		.uleb128 0x15
 3319 0e86 0000 0C42 		.long	0xc42
 3320 0e8a 0000 0000 		.long	.LFB8
 3321 0e8e 0000 005A 		.long	.LFE8-.LFB8
 3322 0e92 01        		.uleb128 0x1
 3323 0e93 9C        		.byte	0x9c
 3324 0e94 0000 0ED1 		.long	0xed1
 3325 0e98 11        		.uleb128 0x11
 3326 0e99 0000 0C51 		.long	0xc51
 3327 0e9d 02        		.uleb128 0x2
 3328 0e9e 91        		.byte	0x91
 3329 0e9f 00        		.sleb128 0
 3330 0ea0 03        		.uleb128 0x3


 3331 0ea1 0000 0C5B 		.long	0xc5b
 3332 0ea5 0000 0000 		.long	.LLST13
 3333 0ea9 0000 0000 		.long	.LVUS13
 3334 0ead 03        		.uleb128 0x3
 3335 0eae 0000 0C66 		.long	0xc66
 3336 0eb2 0000 0000 		.long	.LLST14
 3337 0eb6 0000 0000 		.long	.LVUS14
 3338 0eba 03        		.uleb128 0x3
 3339 0ebb 0000 0C72 		.long	0xc72
 3340 0ebf 0000 0000 		.long	.LLST15
 3341 0ec3 0000 0000 		.long	.LVUS15
 3342 0ec7 0F        		.uleb128 0xf
 3343 0ec8 0000 0000 		.long	.LVL46
 3344 0ecc 0000 1128 		.long	0x1128
 3345 0ed0 00        		.byte	0
 3346 0ed1 15        		.uleb128 0x15
 3347 0ed2 0000 0BA4 		.long	0xba4
 3348 0ed6 0000 0000 		.long	.LFB10
 3349 0eda 0000 007E 		.long	.LFE10-.LFB10
 3350 0ede 01        		.uleb128 0x1
 3351 0edf 9C        		.byte	0x9c
 3352 0ee0 0000 0F1D 		.long	0xf1d
 3353 0ee4 11        		.uleb128 0x11
 3354 0ee5 0000 0BAE 		.long	0xbae
 3355 0ee9 02        		.uleb128 0x2
 3356 0eea 91        		.byte	0x91
 3357 0eeb 00        		.sleb128 0
 3358 0eec 11        		.uleb128 0x11
 3359 0eed 0000 0BB9 		.long	0xbb9
 3360 0ef1 02        		.uleb128 0x2
 3361 0ef2 91        		.byte	0x91
 3362 0ef3 04        		.sleb128 4
 3363 0ef4 03        		.uleb128 0x3
 3364 0ef5 0000 0BC3 		.long	0xbc3
 3365 0ef9 0000 0000 		.long	.LLST18
 3366 0efd 0000 0000 		.long	.LVUS18
 3367 0f01 09        		.uleb128 0x9
 3368 0f02 0000 0BCE 		.long	0xbce
 3369 0f06 0000 0000 		.long	.LBB30
 3370 0f0a 0000 003C 		.long	.LBE30-.LBB30
 3371 0f0e 03        		.uleb128 0x3
 3372 0f0f 0000 0BCF 		.long	0xbcf
 3373 0f13 0000 0000 		.long	.LLST19
 3374 0f17 0000 0000 		.long	.LVUS19
 3375 0f1b 00        		.byte	0
 3376 0f1c 00        		.byte	0
 3377 0f1d 15        		.uleb128 0x15
 3378 0f1e 0000 0B77 		.long	0xb77
 3379 0f22 0000 0000 		.long	.LFB11
 3380 0f26 0000 0020 		.long	.LFE11-.LFB11
 3381 0f2a 01        		.uleb128 0x1
 3382 0f2b 9C        		.byte	0x9c
 3383 0f2c 0000 0F54 		.long	0xf54
 3384 0f30 11        		.uleb128 0x11
 3385 0f31 0000 0B86 		.long	0xb86
 3386 0f35 02        		.uleb128 0x2
 3387 0f36 91        		.byte	0x91


 3388 0f37 00        		.sleb128 0
 3389 0f38 09        		.uleb128 0x9
 3390 0f39 0000 0B91 		.long	0xb91
 3391 0f3d 0000 0000 		.long	.LBB31
 3392 0f41 0000 0016 		.long	.LBE31-.LBB31
 3393 0f45 03        		.uleb128 0x3
 3394 0f46 0000 0B92 		.long	0xb92
 3395 0f4a 0000 0000 		.long	.LLST20
 3396 0f4e 0000 0000 		.long	.LVUS20
 3397 0f52 00        		.byte	0
 3398 0f53 00        		.byte	0
 3399 0f54 15        		.uleb128 0x15
 3400 0f55 0000 09A4 		.long	0x9a4
 3401 0f59 0000 0000 		.long	.LFB14
 3402 0f5d 0000 002C 		.long	.LFE14-.LFB14
 3403 0f61 01        		.uleb128 0x1
 3404 0f62 9C        		.byte	0x9c
 3405 0f63 0000 0FA6 		.long	0xfa6
 3406 0f67 41        		.uleb128 0x41
 3407 0f68 0000 0B77 		.long	0xb77
 3408 0f6c 0000 0000 		.long	.LBI83
 3409 0f70 02        		.byte	.LVU352
 3410 0f71 0000 0000 		.long	.LBB83
 3411 0f75 0000 0022 		.long	.LBE83-.LBB83
 3412 0f79 01        		.byte	0x1
 3413 0f7a 96        		.byte	0x96
 3414 0f7b 0E        		.byte	0xe
 3415 0f7c 06        		.uleb128 0x6
 3416 0f7d 0000 0B86 		.long	0xb86
 3417 0f81 0000 0000 		.long	.LLST42
 3418 0f85 0000 0000 		.long	.LVUS42
 3419 0f89 09        		.uleb128 0x9
 3420 0f8a 0000 0B91 		.long	0xb91
 3421 0f8e 0000 0000 		.long	.LBB85
 3422 0f92 0000 001A 		.long	.LBE85-.LBB85
 3423 0f96 03        		.uleb128 0x3
 3424 0f97 0000 0B92 		.long	0xb92
 3425 0f9b 0000 0000 		.long	.LLST43
 3426 0f9f 0000 0000 		.long	.LVUS43
 3427 0fa3 00        		.byte	0
 3428 0fa4 00        		.byte	0
 3429 0fa5 00        		.byte	0
 3430 0fa6 15        		.uleb128 0x15
 3431 0fa7 0000 098F 		.long	0x98f
 3432 0fab 0000 0000 		.long	.LFB15
 3433 0faf 0000 00B4 		.long	.LFE15-.LFB15
 3434 0fb3 01        		.uleb128 0x1
 3435 0fb4 9C        		.byte	0x9c
 3436 0fb5 0000 1076 		.long	0x1076
 3437 0fb9 11        		.uleb128 0x11
 3438 0fba 0000 0999 		.long	0x999
 3439 0fbe 02        		.uleb128 0x2
 3440 0fbf 91        		.byte	0x91
 3441 0fc0 00        		.sleb128 0
 3442 0fc1 14        		.uleb128 0x14
 3443 0fc2 0000 0BA4 		.long	0xba4
 3444 0fc6 0000 0000 		.long	.LBI94


 3445 0fca 00        		.byte	.LVU372
 3446 0fcb 0000 0000 		.long	.LLRL44
 3447 0fcf 9D        		.byte	0x9d
 3448 0fd0 05        		.byte	0x5
 3449 0fd1 0000 101E 		.long	0x101e
 3450 0fd5 06        		.uleb128 0x6
 3451 0fd6 0000 0BB9 		.long	0xbb9
 3452 0fda 0000 0000 		.long	.LLST45
 3453 0fde 0000 0000 		.long	.LVUS45
 3454 0fe2 06        		.uleb128 0x6
 3455 0fe3 0000 0BAE 		.long	0xbae
 3456 0fe7 0000 0000 		.long	.LLST46
 3457 0feb 0000 0000 		.long	.LVUS46
 3458 0fef 17        		.uleb128 0x17
 3459 0ff0 0000 0000 		.long	.LLRL44
 3460 0ff4 03        		.uleb128 0x3
 3461 0ff5 0000 0BC3 		.long	0xbc3
 3462 0ff9 0000 0000 		.long	.LLST47
 3463 0ffd 0000 0000 		.long	.LVUS47
 3464 1001 09        		.uleb128 0x9
 3465 1002 0000 0BCE 		.long	0xbce
 3466 1006 0000 0000 		.long	.LBB96
 3467 100a 0000 003C 		.long	.LBE96-.LBB96
 3468 100e 03        		.uleb128 0x3
 3469 100f 0000 0BCF 		.long	0xbcf
 3470 1013 0000 0000 		.long	.LLST48
 3471 1017 0000 0000 		.long	.LVUS48
 3472 101b 00        		.byte	0
 3473 101c 00        		.byte	0
 3474 101d 00        		.byte	0
 3475 101e 14        		.uleb128 0x14
 3476 101f 0000 09A4 		.long	0x9a4
 3477 1023 0000 0000 		.long	.LBI98
 3478 1027 02        		.byte	.LVU385
 3479 1028 0000 0000 		.long	.LLRL49
 3480 102c 9E        		.byte	0x9e
 3481 102d 02        		.byte	0x2
 3482 102e 0000 106C 		.long	0x106c
 3483 1032 10        		.uleb128 0x10
 3484 1033 0000 0B77 		.long	0xb77
 3485 1037 0000 0000 		.long	.LBI100
 3486 103b 04        		.byte	.LVU387
 3487 103c 0000 0000 		.long	.LLRL50
 3488 1040 96        		.byte	0x96
 3489 1041 0E        		.byte	0xe
 3490 1042 06        		.uleb128 0x6
 3491 1043 0000 0B86 		.long	0xb86
 3492 1047 0000 0000 		.long	.LLST51
 3493 104b 0000 0000 		.long	.LVUS51
 3494 104f 09        		.uleb128 0x9
 3495 1050 0000 0B91 		.long	0xb91
 3496 1054 0000 0000 		.long	.LBB102
 3497 1058 0000 0014 		.long	.LBE102-.LBB102
 3498 105c 03        		.uleb128 0x3
 3499 105d 0000 0B92 		.long	0xb92
 3500 1061 0000 0000 		.long	.LLST52
 3501 1065 0000 0000 		.long	.LVUS52


 3502 1069 00        		.byte	0
 3503 106a 00        		.byte	0
 3504 106b 00        		.byte	0
 3505 106c 20        		.uleb128 0x20
 3506 106d 0000 0000 		.long	.LVL105
 3507 1071 0000 0911 		.long	0x911
 3508 1075 00        		.byte	0
 3509 1076 15        		.uleb128 0x15
 3510 1077 0000 097A 		.long	0x97a
 3511 107b 0000 0000 		.long	.LFB16
 3512 107f 0000 009E 		.long	.LFE16-.LFB16
 3513 1083 01        		.uleb128 0x1
 3514 1084 9C        		.byte	0x9c
 3515 1085 0000 1128 		.long	0x1128
 3516 1089 11        		.uleb128 0x11
 3517 108a 0000 0984 		.long	0x984
 3518 108e 02        		.uleb128 0x2
 3519 108f 91        		.byte	0x91
 3520 1090 00        		.sleb128 0
 3521 1091 14        		.uleb128 0x14
 3522 1092 0000 0B77 		.long	0xb77
 3523 1096 0000 0000 		.long	.LBI116
 3524 109a 01        		.byte	.LVU434
 3525 109b 0000 0000 		.long	.LLRL53
 3526 109f A4        		.byte	0xa4
 3527 10a0 05        		.byte	0x5
 3528 10a1 0000 10CE 		.long	0x10ce
 3529 10a5 06        		.uleb128 0x6
 3530 10a6 0000 0B86 		.long	0xb86
 3531 10aa 0000 0000 		.long	.LLST54
 3532 10ae 0000 0000 		.long	.LVUS54
 3533 10b2 09        		.uleb128 0x9
 3534 10b3 0000 0B91 		.long	0xb91
 3535 10b7 0000 0000 		.long	.LBB118
 3536 10bb 0000 0014 		.long	.LBE118-.LBB118
 3537 10bf 03        		.uleb128 0x3
 3538 10c0 0000 0B92 		.long	0xb92
 3539 10c4 0000 0000 		.long	.LLST55
 3540 10c8 0000 0000 		.long	.LVUS55
 3541 10cc 00        		.byte	0
 3542 10cd 00        		.byte	0
 3543 10ce 10        		.uleb128 0x10
 3544 10cf 0000 0BA4 		.long	0xba4
 3545 10d3 0000 0000 		.long	.LBI120
 3546 10d7 01        		.byte	.LVU440
 3547 10d8 0000 0000 		.long	.LLRL56
 3548 10dc A4        		.byte	0xa4
 3549 10dd 05        		.byte	0x5
 3550 10de 06        		.uleb128 0x6
 3551 10df 0000 0BB9 		.long	0xbb9
 3552 10e3 0000 0000 		.long	.LLST57
 3553 10e7 0000 0000 		.long	.LVUS57
 3554 10eb 06        		.uleb128 0x6
 3555 10ec 0000 0BAE 		.long	0xbae
 3556 10f0 0000 0000 		.long	.LLST58
 3557 10f4 0000 0000 		.long	.LVUS58
 3558 10f8 17        		.uleb128 0x17


 3559 10f9 0000 0000 		.long	.LLRL56
 3560 10fd 03        		.uleb128 0x3
 3561 10fe 0000 0BC3 		.long	0xbc3
 3562 1102 0000 0000 		.long	.LLST59
 3563 1106 0000 0000 		.long	.LVUS59
 3564 110a 09        		.uleb128 0x9
 3565 110b 0000 0BCE 		.long	0xbce
 3566 110f 0000 0000 		.long	.LBB122
 3567 1113 0000 0036 		.long	.LBE122-.LBB122
 3568 1117 03        		.uleb128 0x3
 3569 1118 0000 0BCF 		.long	0xbcf
 3570 111c 0000 0000 		.long	.LLST60
 3571 1120 0000 0000 		.long	.LVUS60
 3572 1124 00        		.byte	0
 3573 1125 00        		.byte	0
 3574 1126 00        		.byte	0
 3575 1127 00        		.byte	0
 3576 1128 42        		.uleb128 0x42
 3577 1129 0000 0000 		.long	.LASF149
 3578 112d 0000 0000 		.long	.LASF150
 3579 1131 09        		.byte	0x9
 3580 1132 00        		.byte	0
 3581 1133 00        		.byte	0
 3582               		.section	.debug_abbrev,"",@progbits
 3583               	.Ldebug_abbrev0:
 3584 0000 01        		.uleb128 0x1
 3585 0001 0D        		.uleb128 0xd
 3586 0002 00        		.byte	0
 3587 0003 03        		.uleb128 0x3
 3588 0004 0E        		.uleb128 0xe
 3589 0005 3A        		.uleb128 0x3a
 3590 0006 0B        		.uleb128 0xb
 3591 0007 3B        		.uleb128 0x3b
 3592 0008 0B        		.uleb128 0xb
 3593 0009 39        		.uleb128 0x39
 3594 000a 0B        		.uleb128 0xb
 3595 000b 49        		.uleb128 0x49
 3596 000c 13        		.uleb128 0x13
 3597 000d 38        		.uleb128 0x38
 3598 000e 0B        		.uleb128 0xb
 3599 000f 00        		.byte	0
 3600 0010 00        		.byte	0
 3601 0011 02        		.uleb128 0x2
 3602 0012 0D        		.uleb128 0xd
 3603 0013 00        		.byte	0
 3604 0014 03        		.uleb128 0x3
 3605 0015 0E        		.uleb128 0xe
 3606 0016 3A        		.uleb128 0x3a
 3607 0017 21        		.uleb128 0x21
 3608 0018 04        		.sleb128 4
 3609 0019 3B        		.uleb128 0x3b
 3610 001a 05        		.uleb128 0x5
 3611 001b 39        		.uleb128 0x39
 3612 001c 0B        		.uleb128 0xb
 3613 001d 49        		.uleb128 0x49
 3614 001e 13        		.uleb128 0x13
 3615 001f 38        		.uleb128 0x38


 3616 0020 0B        		.uleb128 0xb
 3617 0021 00        		.byte	0
 3618 0022 00        		.byte	0
 3619 0023 03        		.uleb128 0x3
 3620 0024 34        		.uleb128 0x34
 3621 0025 00        		.byte	0
 3622 0026 31        		.uleb128 0x31
 3623 0027 13        		.uleb128 0x13
 3624 0028 02        		.uleb128 0x2
 3625 0029 17        		.uleb128 0x17
 3626 002a B742      		.uleb128 0x2137
 3627 002c 17        		.uleb128 0x17
 3628 002d 00        		.byte	0
 3629 002e 00        		.byte	0
 3630 002f 04        		.uleb128 0x4
 3631 0030 0F        		.uleb128 0xf
 3632 0031 00        		.byte	0
 3633 0032 0B        		.uleb128 0xb
 3634 0033 21        		.uleb128 0x21
 3635 0034 04        		.sleb128 4
 3636 0035 49        		.uleb128 0x49
 3637 0036 13        		.uleb128 0x13
 3638 0037 00        		.byte	0
 3639 0038 00        		.byte	0
 3640 0039 05        		.uleb128 0x5
 3641 003a 05        		.uleb128 0x5
 3642 003b 00        		.byte	0
 3643 003c 49        		.uleb128 0x49
 3644 003d 13        		.uleb128 0x13
 3645 003e 00        		.byte	0
 3646 003f 00        		.byte	0
 3647 0040 06        		.uleb128 0x6
 3648 0041 05        		.uleb128 0x5
 3649 0042 00        		.byte	0
 3650 0043 31        		.uleb128 0x31
 3651 0044 13        		.uleb128 0x13
 3652 0045 02        		.uleb128 0x2
 3653 0046 17        		.uleb128 0x17
 3654 0047 B742      		.uleb128 0x2137
 3655 0049 17        		.uleb128 0x17
 3656 004a 00        		.byte	0
 3657 004b 00        		.byte	0
 3658 004c 07        		.uleb128 0x7
 3659 004d 01        		.uleb128 0x1
 3660 004e 01        		.byte	0x1
 3661 004f 49        		.uleb128 0x49
 3662 0050 13        		.uleb128 0x13
 3663 0051 01        		.uleb128 0x1
 3664 0052 13        		.uleb128 0x13
 3665 0053 00        		.byte	0
 3666 0054 00        		.byte	0
 3667 0055 08        		.uleb128 0x8
 3668 0056 21        		.uleb128 0x21
 3669 0057 00        		.byte	0
 3670 0058 49        		.uleb128 0x49
 3671 0059 13        		.uleb128 0x13
 3672 005a 2F        		.uleb128 0x2f


 3673 005b 0B        		.uleb128 0xb
 3674 005c 00        		.byte	0
 3675 005d 00        		.byte	0
 3676 005e 09        		.uleb128 0x9
 3677 005f 0B        		.uleb128 0xb
 3678 0060 01        		.byte	0x1
 3679 0061 31        		.uleb128 0x31
 3680 0062 13        		.uleb128 0x13
 3681 0063 11        		.uleb128 0x11
 3682 0064 01        		.uleb128 0x1
 3683 0065 12        		.uleb128 0x12
 3684 0066 06        		.uleb128 0x6
 3685 0067 00        		.byte	0
 3686 0068 00        		.byte	0
 3687 0069 0A        		.uleb128 0xa
 3688 006a 24        		.uleb128 0x24
 3689 006b 00        		.byte	0
 3690 006c 0B        		.uleb128 0xb
 3691 006d 0B        		.uleb128 0xb
 3692 006e 3E        		.uleb128 0x3e
 3693 006f 0B        		.uleb128 0xb
 3694 0070 03        		.uleb128 0x3
 3695 0071 0E        		.uleb128 0xe
 3696 0072 00        		.byte	0
 3697 0073 00        		.byte	0
 3698 0074 0B        		.uleb128 0xb
 3699 0075 16        		.uleb128 0x16
 3700 0076 00        		.byte	0
 3701 0077 03        		.uleb128 0x3
 3702 0078 0E        		.uleb128 0xe
 3703 0079 3A        		.uleb128 0x3a
 3704 007a 0B        		.uleb128 0xb
 3705 007b 3B        		.uleb128 0x3b
 3706 007c 0B        		.uleb128 0xb
 3707 007d 39        		.uleb128 0x39
 3708 007e 0B        		.uleb128 0xb
 3709 007f 49        		.uleb128 0x49
 3710 0080 13        		.uleb128 0x13
 3711 0081 00        		.byte	0
 3712 0082 00        		.byte	0
 3713 0083 0C        		.uleb128 0xc
 3714 0084 0D        		.uleb128 0xd
 3715 0085 00        		.byte	0
 3716 0086 03        		.uleb128 0x3
 3717 0087 08        		.uleb128 0x8
 3718 0088 3A        		.uleb128 0x3a
 3719 0089 21        		.uleb128 0x21
 3720 008a 04        		.sleb128 4
 3721 008b 3B        		.uleb128 0x3b
 3722 008c 0B        		.uleb128 0xb
 3723 008d 39        		.uleb128 0x39
 3724 008e 0B        		.uleb128 0xb
 3725 008f 49        		.uleb128 0x49
 3726 0090 13        		.uleb128 0x13
 3727 0091 38        		.uleb128 0x38
 3728 0092 0B        		.uleb128 0xb
 3729 0093 00        		.byte	0


 3730 0094 00        		.byte	0
 3731 0095 0D        		.uleb128 0xd
 3732 0096 34        		.uleb128 0x34
 3733 0097 00        		.byte	0
 3734 0098 03        		.uleb128 0x3
 3735 0099 0E        		.uleb128 0xe
 3736 009a 3A        		.uleb128 0x3a
 3737 009b 21        		.uleb128 0x21
 3738 009c 07        		.sleb128 7
 3739 009d 3B        		.uleb128 0x3b
 3740 009e 0B        		.uleb128 0xb
 3741 009f 39        		.uleb128 0x39
 3742 00a0 0B        		.uleb128 0xb
 3743 00a1 49        		.uleb128 0x49
 3744 00a2 13        		.uleb128 0x13
 3745 00a3 3F        		.uleb128 0x3f
 3746 00a4 19        		.uleb128 0x19
 3747 00a5 3C        		.uleb128 0x3c
 3748 00a6 19        		.uleb128 0x19
 3749 00a7 00        		.byte	0
 3750 00a8 00        		.byte	0
 3751 00a9 0E        		.uleb128 0xe
 3752 00aa 34        		.uleb128 0x34
 3753 00ab 00        		.byte	0
 3754 00ac 47        		.uleb128 0x47
 3755 00ad 13        		.uleb128 0x13
 3756 00ae 3A        		.uleb128 0x3a
 3757 00af 21        		.uleb128 0x21
 3758 00b0 01        		.sleb128 1
 3759 00b1 3B        		.uleb128 0x3b
 3760 00b2 0B        		.uleb128 0xb
 3761 00b3 39        		.uleb128 0x39
 3762 00b4 0B        		.uleb128 0xb
 3763 00b5 02        		.uleb128 0x2
 3764 00b6 18        		.uleb128 0x18
 3765 00b7 00        		.byte	0
 3766 00b8 00        		.byte	0
 3767 00b9 0F        		.uleb128 0xf
 3768 00ba 48        		.uleb128 0x48
 3769 00bb 00        		.byte	0
 3770 00bc 7D        		.uleb128 0x7d
 3771 00bd 01        		.uleb128 0x1
 3772 00be 7F        		.uleb128 0x7f
 3773 00bf 13        		.uleb128 0x13
 3774 00c0 00        		.byte	0
 3775 00c1 00        		.byte	0
 3776 00c2 10        		.uleb128 0x10
 3777 00c3 1D        		.uleb128 0x1d
 3778 00c4 01        		.byte	0x1
 3779 00c5 31        		.uleb128 0x31
 3780 00c6 13        		.uleb128 0x13
 3781 00c7 52        		.uleb128 0x52
 3782 00c8 01        		.uleb128 0x1
 3783 00c9 B842      		.uleb128 0x2138
 3784 00cb 0B        		.uleb128 0xb
 3785 00cc 55        		.uleb128 0x55
 3786 00cd 17        		.uleb128 0x17


 3787 00ce 58        		.uleb128 0x58
 3788 00cf 21        		.uleb128 0x21
 3789 00d0 01        		.sleb128 1
 3790 00d1 59        		.uleb128 0x59
 3791 00d2 0B        		.uleb128 0xb
 3792 00d3 57        		.uleb128 0x57
 3793 00d4 0B        		.uleb128 0xb
 3794 00d5 00        		.byte	0
 3795 00d6 00        		.byte	0
 3796 00d7 11        		.uleb128 0x11
 3797 00d8 05        		.uleb128 0x5
 3798 00d9 00        		.byte	0
 3799 00da 31        		.uleb128 0x31
 3800 00db 13        		.uleb128 0x13
 3801 00dc 02        		.uleb128 0x2
 3802 00dd 18        		.uleb128 0x18
 3803 00de 00        		.byte	0
 3804 00df 00        		.byte	0
 3805 00e0 12        		.uleb128 0x12
 3806 00e1 18        		.uleb128 0x18
 3807 00e2 00        		.byte	0
 3808 00e3 00        		.byte	0
 3809 00e4 00        		.byte	0
 3810 00e5 13        		.uleb128 0x13
 3811 00e6 05        		.uleb128 0x5
 3812 00e7 00        		.byte	0
 3813 00e8 03        		.uleb128 0x3
 3814 00e9 08        		.uleb128 0x8
 3815 00ea 3A        		.uleb128 0x3a
 3816 00eb 21        		.uleb128 0x21
 3817 00ec 01        		.sleb128 1
 3818 00ed 3B        		.uleb128 0x3b
 3819 00ee 0B        		.uleb128 0xb
 3820 00ef 39        		.uleb128 0x39
 3821 00f0 0B        		.uleb128 0xb
 3822 00f1 49        		.uleb128 0x49
 3823 00f2 13        		.uleb128 0x13
 3824 00f3 00        		.byte	0
 3825 00f4 00        		.byte	0
 3826 00f5 14        		.uleb128 0x14
 3827 00f6 1D        		.uleb128 0x1d
 3828 00f7 01        		.byte	0x1
 3829 00f8 31        		.uleb128 0x31
 3830 00f9 13        		.uleb128 0x13
 3831 00fa 52        		.uleb128 0x52
 3832 00fb 01        		.uleb128 0x1
 3833 00fc B842      		.uleb128 0x2138
 3834 00fe 0B        		.uleb128 0xb
 3835 00ff 55        		.uleb128 0x55
 3836 0100 17        		.uleb128 0x17
 3837 0101 58        		.uleb128 0x58
 3838 0102 21        		.uleb128 0x21
 3839 0103 01        		.sleb128 1
 3840 0104 59        		.uleb128 0x59
 3841 0105 0B        		.uleb128 0xb
 3842 0106 57        		.uleb128 0x57
 3843 0107 0B        		.uleb128 0xb


 3844 0108 01        		.uleb128 0x1
 3845 0109 13        		.uleb128 0x13
 3846 010a 00        		.byte	0
 3847 010b 00        		.byte	0
 3848 010c 15        		.uleb128 0x15
 3849 010d 2E        		.uleb128 0x2e
 3850 010e 01        		.byte	0x1
 3851 010f 31        		.uleb128 0x31
 3852 0110 13        		.uleb128 0x13
 3853 0111 11        		.uleb128 0x11
 3854 0112 01        		.uleb128 0x1
 3855 0113 12        		.uleb128 0x12
 3856 0114 06        		.uleb128 0x6
 3857 0115 40        		.uleb128 0x40
 3858 0116 18        		.uleb128 0x18
 3859 0117 7A        		.uleb128 0x7a
 3860 0118 19        		.uleb128 0x19
 3861 0119 01        		.uleb128 0x1
 3862 011a 13        		.uleb128 0x13
 3863 011b 00        		.byte	0
 3864 011c 00        		.byte	0
 3865 011d 16        		.uleb128 0x16
 3866 011e 05        		.uleb128 0x5
 3867 011f 00        		.byte	0
 3868 0120 03        		.uleb128 0x3
 3869 0121 08        		.uleb128 0x8
 3870 0122 3A        		.uleb128 0x3a
 3871 0123 21        		.uleb128 0x21
 3872 0124 01        		.sleb128 1
 3873 0125 3B        		.uleb128 0x3b
 3874 0126 0B        		.uleb128 0xb
 3875 0127 39        		.uleb128 0x39
 3876 0128 0B        		.uleb128 0xb
 3877 0129 49        		.uleb128 0x49
 3878 012a 13        		.uleb128 0x13
 3879 012b 02        		.uleb128 0x2
 3880 012c 18        		.uleb128 0x18
 3881 012d 00        		.byte	0
 3882 012e 00        		.byte	0
 3883 012f 17        		.uleb128 0x17
 3884 0130 0B        		.uleb128 0xb
 3885 0131 01        		.byte	0x1
 3886 0132 55        		.uleb128 0x55
 3887 0133 17        		.uleb128 0x17
 3888 0134 00        		.byte	0
 3889 0135 00        		.byte	0
 3890 0136 18        		.uleb128 0x18
 3891 0137 34        		.uleb128 0x34
 3892 0138 00        		.byte	0
 3893 0139 03        		.uleb128 0x3
 3894 013a 08        		.uleb128 0x8
 3895 013b 3A        		.uleb128 0x3a
 3896 013c 21        		.uleb128 0x21
 3897 013d 01        		.sleb128 1
 3898 013e 3B        		.uleb128 0x3b
 3899 013f 0B        		.uleb128 0xb
 3900 0140 39        		.uleb128 0x39


 3901 0141 0B        		.uleb128 0xb
 3902 0142 49        		.uleb128 0x49
 3903 0143 13        		.uleb128 0x13
 3904 0144 00        		.byte	0
 3905 0145 00        		.byte	0
 3906 0146 19        		.uleb128 0x19
 3907 0147 34        		.uleb128 0x34
 3908 0148 00        		.byte	0
 3909 0149 03        		.uleb128 0x3
 3910 014a 08        		.uleb128 0x8
 3911 014b 3A        		.uleb128 0x3a
 3912 014c 21        		.uleb128 0x21
 3913 014d 01        		.sleb128 1
 3914 014e 3B        		.uleb128 0x3b
 3915 014f 0B        		.uleb128 0xb
 3916 0150 39        		.uleb128 0x39
 3917 0151 0B        		.uleb128 0xb
 3918 0152 49        		.uleb128 0x49
 3919 0153 13        		.uleb128 0x13
 3920 0154 02        		.uleb128 0x2
 3921 0155 17        		.uleb128 0x17
 3922 0156 B742      		.uleb128 0x2137
 3923 0158 17        		.uleb128 0x17
 3924 0159 00        		.byte	0
 3925 015a 00        		.byte	0
 3926 015b 1A        		.uleb128 0x1a
 3927 015c 13        		.uleb128 0x13
 3928 015d 01        		.byte	0x1
 3929 015e 03        		.uleb128 0x3
 3930 015f 0E        		.uleb128 0xe
 3931 0160 0B        		.uleb128 0xb
 3932 0161 0B        		.uleb128 0xb
 3933 0162 3A        		.uleb128 0x3a
 3934 0163 21        		.uleb128 0x21
 3935 0164 04        		.sleb128 4
 3936 0165 3B        		.uleb128 0x3b
 3937 0166 0B        		.uleb128 0xb
 3938 0167 39        		.uleb128 0x39
 3939 0168 21        		.uleb128 0x21
 3940 0169 08        		.sleb128 8
 3941 016a 01        		.uleb128 0x1
 3942 016b 13        		.uleb128 0x13
 3943 016c 00        		.byte	0
 3944 016d 00        		.byte	0
 3945 016e 1B        		.uleb128 0x1b
 3946 016f 15        		.uleb128 0x15
 3947 0170 01        		.byte	0x1
 3948 0171 27        		.uleb128 0x27
 3949 0172 19        		.uleb128 0x19
 3950 0173 49        		.uleb128 0x49
 3951 0174 13        		.uleb128 0x13
 3952 0175 01        		.uleb128 0x1
 3953 0176 13        		.uleb128 0x13
 3954 0177 00        		.byte	0
 3955 0178 00        		.byte	0
 3956 0179 1C        		.uleb128 0x1c
 3957 017a 2E        		.uleb128 0x2e


 3958 017b 01        		.byte	0x1
 3959 017c 3F        		.uleb128 0x3f
 3960 017d 19        		.uleb128 0x19
 3961 017e 03        		.uleb128 0x3
 3962 017f 0E        		.uleb128 0xe
 3963 0180 3A        		.uleb128 0x3a
 3964 0181 21        		.uleb128 0x21
 3965 0182 07        		.sleb128 7
 3966 0183 3B        		.uleb128 0x3b
 3967 0184 0B        		.uleb128 0xb
 3968 0185 39        		.uleb128 0x39
 3969 0186 21        		.uleb128 0x21
 3970 0187 0D        		.sleb128 13
 3971 0188 3C        		.uleb128 0x3c
 3972 0189 19        		.uleb128 0x19
 3973 018a 01        		.uleb128 0x1
 3974 018b 13        		.uleb128 0x13
 3975 018c 00        		.byte	0
 3976 018d 00        		.byte	0
 3977 018e 1D        		.uleb128 0x1d
 3978 018f 13        		.uleb128 0x13
 3979 0190 01        		.byte	0x1
 3980 0191 0B        		.uleb128 0xb
 3981 0192 0B        		.uleb128 0xb
 3982 0193 3A        		.uleb128 0x3a
 3983 0194 0B        		.uleb128 0xb
 3984 0195 3B        		.uleb128 0x3b
 3985 0196 0B        		.uleb128 0xb
 3986 0197 39        		.uleb128 0x39
 3987 0198 21        		.uleb128 0x21
 3988 0199 09        		.sleb128 9
 3989 019a 01        		.uleb128 0x1
 3990 019b 13        		.uleb128 0x13
 3991 019c 00        		.byte	0
 3992 019d 00        		.byte	0
 3993 019e 1E        		.uleb128 0x1e
 3994 019f 2E        		.uleb128 0x2e
 3995 01a0 01        		.byte	0x1
 3996 01a1 3F        		.uleb128 0x3f
 3997 01a2 19        		.uleb128 0x19
 3998 01a3 03        		.uleb128 0x3
 3999 01a4 0E        		.uleb128 0xe
 4000 01a5 3A        		.uleb128 0x3a
 4001 01a6 21        		.uleb128 0x21
 4002 01a7 01        		.sleb128 1
 4003 01a8 3B        		.uleb128 0x3b
 4004 01a9 0B        		.uleb128 0xb
 4005 01aa 39        		.uleb128 0x39
 4006 01ab 21        		.uleb128 0x21
 4007 01ac 06        		.sleb128 6
 4008 01ad 27        		.uleb128 0x27
 4009 01ae 19        		.uleb128 0x19
 4010 01af 20        		.uleb128 0x20
 4011 01b0 21        		.uleb128 0x21
 4012 01b1 01        		.sleb128 1
 4013 01b2 01        		.uleb128 0x1
 4014 01b3 13        		.uleb128 0x13


 4015 01b4 00        		.byte	0
 4016 01b5 00        		.byte	0
 4017 01b6 1F        		.uleb128 0x1f
 4018 01b7 2E        		.uleb128 0x2e
 4019 01b8 01        		.byte	0x1
 4020 01b9 3F        		.uleb128 0x3f
 4021 01ba 19        		.uleb128 0x19
 4022 01bb 03        		.uleb128 0x3
 4023 01bc 0E        		.uleb128 0xe
 4024 01bd 3A        		.uleb128 0x3a
 4025 01be 21        		.uleb128 0x21
 4026 01bf 01        		.sleb128 1
 4027 01c0 3B        		.uleb128 0x3b
 4028 01c1 0B        		.uleb128 0xb
 4029 01c2 39        		.uleb128 0x39
 4030 01c3 21        		.uleb128 0x21
 4031 01c4 06        		.sleb128 6
 4032 01c5 27        		.uleb128 0x27
 4033 01c6 19        		.uleb128 0x19
 4034 01c7 11        		.uleb128 0x11
 4035 01c8 01        		.uleb128 0x1
 4036 01c9 12        		.uleb128 0x12
 4037 01ca 06        		.uleb128 0x6
 4038 01cb 40        		.uleb128 0x40
 4039 01cc 18        		.uleb128 0x18
 4040 01cd 7A        		.uleb128 0x7a
 4041 01ce 19        		.uleb128 0x19
 4042 01cf 01        		.uleb128 0x1
 4043 01d0 13        		.uleb128 0x13
 4044 01d1 00        		.byte	0
 4045 01d2 00        		.byte	0
 4046 01d3 20        		.uleb128 0x20
 4047 01d4 48        		.uleb128 0x48
 4048 01d5 00        		.byte	0
 4049 01d6 7D        		.uleb128 0x7d
 4050 01d7 01        		.uleb128 0x1
 4051 01d8 8201      		.uleb128 0x82
 4052 01da 19        		.uleb128 0x19
 4053 01db 7F        		.uleb128 0x7f
 4054 01dc 13        		.uleb128 0x13
 4055 01dd 00        		.byte	0
 4056 01de 00        		.byte	0
 4057 01df 21        		.uleb128 0x21
 4058 01e0 2E        		.uleb128 0x2e
 4059 01e1 01        		.byte	0x1
 4060 01e2 3F        		.uleb128 0x3f
 4061 01e3 19        		.uleb128 0x19
 4062 01e4 03        		.uleb128 0x3
 4063 01e5 0E        		.uleb128 0xe
 4064 01e6 3A        		.uleb128 0x3a
 4065 01e7 21        		.uleb128 0x21
 4066 01e8 01        		.sleb128 1
 4067 01e9 3B        		.uleb128 0x3b
 4068 01ea 0B        		.uleb128 0xb
 4069 01eb 39        		.uleb128 0x39
 4070 01ec 21        		.uleb128 0x21
 4071 01ed 06        		.sleb128 6


 4072 01ee 11        		.uleb128 0x11
 4073 01ef 01        		.uleb128 0x1
 4074 01f0 12        		.uleb128 0x12
 4075 01f1 06        		.uleb128 0x6
 4076 01f2 40        		.uleb128 0x40
 4077 01f3 18        		.uleb128 0x18
 4078 01f4 7A        		.uleb128 0x7a
 4079 01f5 19        		.uleb128 0x19
 4080 01f6 01        		.uleb128 0x1
 4081 01f7 13        		.uleb128 0x13
 4082 01f8 00        		.byte	0
 4083 01f9 00        		.byte	0
 4084 01fa 22        		.uleb128 0x22
 4085 01fb 16        		.uleb128 0x16
 4086 01fc 00        		.byte	0
 4087 01fd 03        		.uleb128 0x3
 4088 01fe 0E        		.uleb128 0xe
 4089 01ff 3A        		.uleb128 0x3a
 4090 0200 0B        		.uleb128 0xb
 4091 0201 3B        		.uleb128 0x3b
 4092 0202 05        		.uleb128 0x5
 4093 0203 39        		.uleb128 0x39
 4094 0204 0B        		.uleb128 0xb
 4095 0205 49        		.uleb128 0x49
 4096 0206 13        		.uleb128 0x13
 4097 0207 00        		.byte	0
 4098 0208 00        		.byte	0
 4099 0209 23        		.uleb128 0x23
 4100 020a 0D        		.uleb128 0xd
 4101 020b 00        		.byte	0
 4102 020c 03        		.uleb128 0x3
 4103 020d 0E        		.uleb128 0xe
 4104 020e 3A        		.uleb128 0x3a
 4105 020f 21        		.uleb128 0x21
 4106 0210 03        		.sleb128 3
 4107 0211 3B        		.uleb128 0x3b
 4108 0212 0B        		.uleb128 0xb
 4109 0213 39        		.uleb128 0x39
 4110 0214 0B        		.uleb128 0xb
 4111 0215 49        		.uleb128 0x49
 4112 0216 13        		.uleb128 0x13
 4113 0217 00        		.byte	0
 4114 0218 00        		.byte	0
 4115 0219 24        		.uleb128 0x24
 4116 021a 26        		.uleb128 0x26
 4117 021b 00        		.byte	0
 4118 021c 49        		.uleb128 0x49
 4119 021d 13        		.uleb128 0x13
 4120 021e 00        		.byte	0
 4121 021f 00        		.byte	0
 4122 0220 25        		.uleb128 0x25
 4123 0221 15        		.uleb128 0x15
 4124 0222 01        		.byte	0x1
 4125 0223 27        		.uleb128 0x27
 4126 0224 19        		.uleb128 0x19
 4127 0225 01        		.uleb128 0x1
 4128 0226 13        		.uleb128 0x13


 4129 0227 00        		.byte	0
 4130 0228 00        		.byte	0
 4131 0229 26        		.uleb128 0x26
 4132 022a 2E        		.uleb128 0x2e
 4133 022b 01        		.byte	0x1
 4134 022c 3F        		.uleb128 0x3f
 4135 022d 19        		.uleb128 0x19
 4136 022e 03        		.uleb128 0x3
 4137 022f 0E        		.uleb128 0xe
 4138 0230 3A        		.uleb128 0x3a
 4139 0231 21        		.uleb128 0x21
 4140 0232 01        		.sleb128 1
 4141 0233 3B        		.uleb128 0x3b
 4142 0234 0B        		.uleb128 0xb
 4143 0235 39        		.uleb128 0x39
 4144 0236 0B        		.uleb128 0xb
 4145 0237 27        		.uleb128 0x27
 4146 0238 19        		.uleb128 0x19
 4147 0239 49        		.uleb128 0x49
 4148 023a 13        		.uleb128 0x13
 4149 023b 20        		.uleb128 0x20
 4150 023c 21        		.uleb128 0x21
 4151 023d 01        		.sleb128 1
 4152 023e 01        		.uleb128 0x1
 4153 023f 13        		.uleb128 0x13
 4154 0240 00        		.byte	0
 4155 0241 00        		.byte	0
 4156 0242 27        		.uleb128 0x27
 4157 0243 0B        		.uleb128 0xb
 4158 0244 01        		.byte	0x1
 4159 0245 00        		.byte	0
 4160 0246 00        		.byte	0
 4161 0247 28        		.uleb128 0x28
 4162 0248 1D        		.uleb128 0x1d
 4163 0249 01        		.byte	0x1
 4164 024a 31        		.uleb128 0x31
 4165 024b 13        		.uleb128 0x13
 4166 024c 52        		.uleb128 0x52
 4167 024d 01        		.uleb128 0x1
 4168 024e B842      		.uleb128 0x2138
 4169 0250 0B        		.uleb128 0xb
 4170 0251 11        		.uleb128 0x11
 4171 0252 01        		.uleb128 0x1
 4172 0253 12        		.uleb128 0x12
 4173 0254 06        		.uleb128 0x6
 4174 0255 58        		.uleb128 0x58
 4175 0256 21        		.uleb128 0x21
 4176 0257 01        		.sleb128 1
 4177 0258 59        		.uleb128 0x59
 4178 0259 0B        		.uleb128 0xb
 4179 025a 57        		.uleb128 0x57
 4180 025b 0B        		.uleb128 0xb
 4181 025c 01        		.uleb128 0x1
 4182 025d 13        		.uleb128 0x13
 4183 025e 00        		.byte	0
 4184 025f 00        		.byte	0
 4185 0260 29        		.uleb128 0x29


 4186 0261 0B        		.uleb128 0xb
 4187 0262 01        		.byte	0x1
 4188 0263 11        		.uleb128 0x11
 4189 0264 01        		.uleb128 0x1
 4190 0265 12        		.uleb128 0x12
 4191 0266 06        		.uleb128 0x6
 4192 0267 00        		.byte	0
 4193 0268 00        		.byte	0
 4194 0269 2A        		.uleb128 0x2a
 4195 026a 2E        		.uleb128 0x2e
 4196 026b 01        		.byte	0x1
 4197 026c 3F        		.uleb128 0x3f
 4198 026d 19        		.uleb128 0x19
 4199 026e 03        		.uleb128 0x3
 4200 026f 0E        		.uleb128 0xe
 4201 0270 3A        		.uleb128 0x3a
 4202 0271 0B        		.uleb128 0xb
 4203 0272 3B        		.uleb128 0x3b
 4204 0273 0B        		.uleb128 0xb
 4205 0274 39        		.uleb128 0x39
 4206 0275 0B        		.uleb128 0xb
 4207 0276 27        		.uleb128 0x27
 4208 0277 19        		.uleb128 0x19
 4209 0278 49        		.uleb128 0x49
 4210 0279 13        		.uleb128 0x13
 4211 027a 11        		.uleb128 0x11
 4212 027b 01        		.uleb128 0x1
 4213 027c 12        		.uleb128 0x12
 4214 027d 06        		.uleb128 0x6
 4215 027e 40        		.uleb128 0x40
 4216 027f 18        		.uleb128 0x18
 4217 0280 7A        		.uleb128 0x7a
 4218 0281 19        		.uleb128 0x19
 4219 0282 01        		.uleb128 0x1
 4220 0283 13        		.uleb128 0x13
 4221 0284 00        		.byte	0
 4222 0285 00        		.byte	0
 4223 0286 2B        		.uleb128 0x2b
 4224 0287 11        		.uleb128 0x11
 4225 0288 01        		.byte	0x1
 4226 0289 25        		.uleb128 0x25
 4227 028a 0E        		.uleb128 0xe
 4228 028b 13        		.uleb128 0x13
 4229 028c 0B        		.uleb128 0xb
 4230 028d 03        		.uleb128 0x3
 4231 028e 0E        		.uleb128 0xe
 4232 028f 1B        		.uleb128 0x1b
 4233 0290 0E        		.uleb128 0xe
 4234 0291 11        		.uleb128 0x11
 4235 0292 01        		.uleb128 0x1
 4236 0293 12        		.uleb128 0x12
 4237 0294 06        		.uleb128 0x6
 4238 0295 10        		.uleb128 0x10
 4239 0296 17        		.uleb128 0x17
 4240 0297 00        		.byte	0
 4241 0298 00        		.byte	0
 4242 0299 2C        		.uleb128 0x2c


 4243 029a 24        		.uleb128 0x24
 4244 029b 00        		.byte	0
 4245 029c 0B        		.uleb128 0xb
 4246 029d 0B        		.uleb128 0xb
 4247 029e 3E        		.uleb128 0x3e
 4248 029f 0B        		.uleb128 0xb
 4249 02a0 03        		.uleb128 0x3
 4250 02a1 08        		.uleb128 0x8
 4251 02a2 00        		.byte	0
 4252 02a3 00        		.byte	0
 4253 02a4 2D        		.uleb128 0x2d
 4254 02a5 17        		.uleb128 0x17
 4255 02a6 01        		.byte	0x1
 4256 02a7 0B        		.uleb128 0xb
 4257 02a8 0B        		.uleb128 0xb
 4258 02a9 3A        		.uleb128 0x3a
 4259 02aa 0B        		.uleb128 0xb
 4260 02ab 3B        		.uleb128 0x3b
 4261 02ac 0B        		.uleb128 0xb
 4262 02ad 39        		.uleb128 0x39
 4263 02ae 0B        		.uleb128 0xb
 4264 02af 01        		.uleb128 0x1
 4265 02b0 13        		.uleb128 0x13
 4266 02b1 00        		.byte	0
 4267 02b2 00        		.byte	0
 4268 02b3 2E        		.uleb128 0x2e
 4269 02b4 0F        		.uleb128 0xf
 4270 02b5 00        		.byte	0
 4271 02b6 0B        		.uleb128 0xb
 4272 02b7 0B        		.uleb128 0xb
 4273 02b8 00        		.byte	0
 4274 02b9 00        		.byte	0
 4275 02ba 2F        		.uleb128 0x2f
 4276 02bb 13        		.uleb128 0x13
 4277 02bc 01        		.byte	0x1
 4278 02bd 03        		.uleb128 0x3
 4279 02be 0E        		.uleb128 0xe
 4280 02bf 0B        		.uleb128 0xb
 4281 02c0 05        		.uleb128 0x5
 4282 02c1 3A        		.uleb128 0x3a
 4283 02c2 0B        		.uleb128 0xb
 4284 02c3 3B        		.uleb128 0x3b
 4285 02c4 05        		.uleb128 0x5
 4286 02c5 39        		.uleb128 0x39
 4287 02c6 0B        		.uleb128 0xb
 4288 02c7 01        		.uleb128 0x1
 4289 02c8 13        		.uleb128 0x13
 4290 02c9 00        		.byte	0
 4291 02ca 00        		.byte	0
 4292 02cb 30        		.uleb128 0x30
 4293 02cc 0D        		.uleb128 0xd
 4294 02cd 00        		.byte	0
 4295 02ce 03        		.uleb128 0x3
 4296 02cf 0E        		.uleb128 0xe
 4297 02d0 3A        		.uleb128 0x3a
 4298 02d1 0B        		.uleb128 0xb
 4299 02d2 3B        		.uleb128 0x3b


 4300 02d3 05        		.uleb128 0x5
 4301 02d4 39        		.uleb128 0x39
 4302 02d5 0B        		.uleb128 0xb
 4303 02d6 49        		.uleb128 0x49
 4304 02d7 13        		.uleb128 0x13
 4305 02d8 38        		.uleb128 0x38
 4306 02d9 05        		.uleb128 0x5
 4307 02da 00        		.byte	0
 4308 02db 00        		.byte	0
 4309 02dc 31        		.uleb128 0x31
 4310 02dd 13        		.uleb128 0x13
 4311 02de 01        		.byte	0x1
 4312 02df 03        		.uleb128 0x3
 4313 02e0 0E        		.uleb128 0xe
 4314 02e1 0B        		.uleb128 0xb
 4315 02e2 0B        		.uleb128 0xb
 4316 02e3 3A        		.uleb128 0x3a
 4317 02e4 0B        		.uleb128 0xb
 4318 02e5 3B        		.uleb128 0x3b
 4319 02e6 05        		.uleb128 0x5
 4320 02e7 39        		.uleb128 0x39
 4321 02e8 0B        		.uleb128 0xb
 4322 02e9 01        		.uleb128 0x1
 4323 02ea 13        		.uleb128 0x13
 4324 02eb 00        		.byte	0
 4325 02ec 00        		.byte	0
 4326 02ed 32        		.uleb128 0x32
 4327 02ee 13        		.uleb128 0x13
 4328 02ef 01        		.byte	0x1
 4329 02f0 0B        		.uleb128 0xb
 4330 02f1 0B        		.uleb128 0xb
 4331 02f2 3A        		.uleb128 0x3a
 4332 02f3 0B        		.uleb128 0xb
 4333 02f4 3B        		.uleb128 0x3b
 4334 02f5 05        		.uleb128 0x5
 4335 02f6 39        		.uleb128 0x39
 4336 02f7 0B        		.uleb128 0xb
 4337 02f8 01        		.uleb128 0x1
 4338 02f9 13        		.uleb128 0x13
 4339 02fa 00        		.byte	0
 4340 02fb 00        		.byte	0
 4341 02fc 33        		.uleb128 0x33
 4342 02fd 17        		.uleb128 0x17
 4343 02fe 01        		.byte	0x1
 4344 02ff 0B        		.uleb128 0xb
 4345 0300 0B        		.uleb128 0xb
 4346 0301 3A        		.uleb128 0x3a
 4347 0302 0B        		.uleb128 0xb
 4348 0303 3B        		.uleb128 0x3b
 4349 0304 05        		.uleb128 0x5
 4350 0305 39        		.uleb128 0x39
 4351 0306 0B        		.uleb128 0xb
 4352 0307 01        		.uleb128 0x1
 4353 0308 13        		.uleb128 0x13
 4354 0309 00        		.byte	0
 4355 030a 00        		.byte	0
 4356 030b 34        		.uleb128 0x34


 4357 030c 0D        		.uleb128 0xd
 4358 030d 00        		.byte	0
 4359 030e 03        		.uleb128 0x3
 4360 030f 0E        		.uleb128 0xe
 4361 0310 3A        		.uleb128 0x3a
 4362 0311 0B        		.uleb128 0xb
 4363 0312 3B        		.uleb128 0x3b
 4364 0313 05        		.uleb128 0x5
 4365 0314 39        		.uleb128 0x39
 4366 0315 0B        		.uleb128 0xb
 4367 0316 49        		.uleb128 0x49
 4368 0317 13        		.uleb128 0x13
 4369 0318 00        		.byte	0
 4370 0319 00        		.byte	0
 4371 031a 35        		.uleb128 0x35
 4372 031b 13        		.uleb128 0x13
 4373 031c 00        		.byte	0
 4374 031d 03        		.uleb128 0x3
 4375 031e 0E        		.uleb128 0xe
 4376 031f 3C        		.uleb128 0x3c
 4377 0320 19        		.uleb128 0x19
 4378 0321 00        		.byte	0
 4379 0322 00        		.byte	0
 4380 0323 36        		.uleb128 0x36
 4381 0324 13        		.uleb128 0x13
 4382 0325 01        		.byte	0x1
 4383 0326 0B        		.uleb128 0xb
 4384 0327 05        		.uleb128 0x5
 4385 0328 3A        		.uleb128 0x3a
 4386 0329 0B        		.uleb128 0xb
 4387 032a 3B        		.uleb128 0x3b
 4388 032b 0B        		.uleb128 0xb
 4389 032c 39        		.uleb128 0x39
 4390 032d 0B        		.uleb128 0xb
 4391 032e 01        		.uleb128 0x1
 4392 032f 13        		.uleb128 0x13
 4393 0330 00        		.byte	0
 4394 0331 00        		.byte	0
 4395 0332 37        		.uleb128 0x37
 4396 0333 0D        		.uleb128 0xd
 4397 0334 00        		.byte	0
 4398 0335 03        		.uleb128 0x3
 4399 0336 0E        		.uleb128 0xe
 4400 0337 3A        		.uleb128 0x3a
 4401 0338 0B        		.uleb128 0xb
 4402 0339 3B        		.uleb128 0x3b
 4403 033a 0B        		.uleb128 0xb
 4404 033b 39        		.uleb128 0x39
 4405 033c 0B        		.uleb128 0xb
 4406 033d 49        		.uleb128 0x49
 4407 033e 13        		.uleb128 0x13
 4408 033f 38        		.uleb128 0x38
 4409 0340 05        		.uleb128 0x5
 4410 0341 00        		.byte	0
 4411 0342 00        		.byte	0
 4412 0343 38        		.uleb128 0x38
 4413 0344 21        		.uleb128 0x21


 4414 0345 00        		.byte	0
 4415 0346 49        		.uleb128 0x49
 4416 0347 13        		.uleb128 0x13
 4417 0348 2F        		.uleb128 0x2f
 4418 0349 05        		.uleb128 0x5
 4419 034a 00        		.byte	0
 4420 034b 00        		.byte	0
 4421 034c 39        		.uleb128 0x39
 4422 034d 15        		.uleb128 0x15
 4423 034e 01        		.byte	0x1
 4424 034f 01        		.uleb128 0x1
 4425 0350 13        		.uleb128 0x13
 4426 0351 00        		.byte	0
 4427 0352 00        		.byte	0
 4428 0353 3A        		.uleb128 0x3a
 4429 0354 34        		.uleb128 0x34
 4430 0355 00        		.byte	0
 4431 0356 03        		.uleb128 0x3
 4432 0357 0E        		.uleb128 0xe
 4433 0358 3A        		.uleb128 0x3a
 4434 0359 0B        		.uleb128 0xb
 4435 035a 3B        		.uleb128 0x3b
 4436 035b 0B        		.uleb128 0xb
 4437 035c 39        		.uleb128 0x39
 4438 035d 0B        		.uleb128 0xb
 4439 035e 49        		.uleb128 0x49
 4440 035f 13        		.uleb128 0x13
 4441 0360 3F        		.uleb128 0x3f
 4442 0361 19        		.uleb128 0x19
 4443 0362 02        		.uleb128 0x2
 4444 0363 18        		.uleb128 0x18
 4445 0364 00        		.byte	0
 4446 0365 00        		.byte	0
 4447 0366 3B        		.uleb128 0x3b
 4448 0367 2E        		.uleb128 0x2e
 4449 0368 01        		.byte	0x1
 4450 0369 3F        		.uleb128 0x3f
 4451 036a 19        		.uleb128 0x19
 4452 036b 03        		.uleb128 0x3
 4453 036c 0E        		.uleb128 0xe
 4454 036d 3A        		.uleb128 0x3a
 4455 036e 0B        		.uleb128 0xb
 4456 036f 3B        		.uleb128 0x3b
 4457 0370 05        		.uleb128 0x5
 4458 0371 39        		.uleb128 0x39
 4459 0372 0B        		.uleb128 0xb
 4460 0373 27        		.uleb128 0x27
 4461 0374 19        		.uleb128 0x19
 4462 0375 49        		.uleb128 0x49
 4463 0376 13        		.uleb128 0x13
 4464 0377 3C        		.uleb128 0x3c
 4465 0378 19        		.uleb128 0x19
 4466 0379 01        		.uleb128 0x1
 4467 037a 13        		.uleb128 0x13
 4468 037b 00        		.byte	0
 4469 037c 00        		.byte	0
 4470 037d 3C        		.uleb128 0x3c


 4471 037e 2E        		.uleb128 0x2e
 4472 037f 01        		.byte	0x1
 4473 0380 3F        		.uleb128 0x3f
 4474 0381 19        		.uleb128 0x19
 4475 0382 03        		.uleb128 0x3
 4476 0383 0E        		.uleb128 0xe
 4477 0384 3A        		.uleb128 0x3a
 4478 0385 0B        		.uleb128 0xb
 4479 0386 3B        		.uleb128 0x3b
 4480 0387 0B        		.uleb128 0xb
 4481 0388 39        		.uleb128 0x39
 4482 0389 0B        		.uleb128 0xb
 4483 038a 27        		.uleb128 0x27
 4484 038b 19        		.uleb128 0x19
 4485 038c 49        		.uleb128 0x49
 4486 038d 13        		.uleb128 0x13
 4487 038e 3C        		.uleb128 0x3c
 4488 038f 19        		.uleb128 0x19
 4489 0390 01        		.uleb128 0x1
 4490 0391 13        		.uleb128 0x13
 4491 0392 00        		.byte	0
 4492 0393 00        		.byte	0
 4493 0394 3D        		.uleb128 0x3d
 4494 0395 2E        		.uleb128 0x2e
 4495 0396 00        		.byte	0
 4496 0397 3F        		.uleb128 0x3f
 4497 0398 19        		.uleb128 0x19
 4498 0399 03        		.uleb128 0x3
 4499 039a 0E        		.uleb128 0xe
 4500 039b 3A        		.uleb128 0x3a
 4501 039c 0B        		.uleb128 0xb
 4502 039d 3B        		.uleb128 0x3b
 4503 039e 0B        		.uleb128 0xb
 4504 039f 39        		.uleb128 0x39
 4505 03a0 0B        		.uleb128 0xb
 4506 03a1 20        		.uleb128 0x20
 4507 03a2 0B        		.uleb128 0xb
 4508 03a3 00        		.byte	0
 4509 03a4 00        		.byte	0
 4510 03a5 3E        		.uleb128 0x3e
 4511 03a6 34        		.uleb128 0x34
 4512 03a7 00        		.byte	0
 4513 03a8 03        		.uleb128 0x3
 4514 03a9 0E        		.uleb128 0xe
 4515 03aa 3A        		.uleb128 0x3a
 4516 03ab 0B        		.uleb128 0xb
 4517 03ac 3B        		.uleb128 0x3b
 4518 03ad 0B        		.uleb128 0xb
 4519 03ae 39        		.uleb128 0x39
 4520 03af 0B        		.uleb128 0xb
 4521 03b0 49        		.uleb128 0x49
 4522 03b1 13        		.uleb128 0x13
 4523 03b2 00        		.byte	0
 4524 03b3 00        		.byte	0
 4525 03b4 3F        		.uleb128 0x3f
 4526 03b5 05        		.uleb128 0x5
 4527 03b6 00        		.byte	0


 4528 03b7 03        		.uleb128 0x3
 4529 03b8 0E        		.uleb128 0xe
 4530 03b9 3A        		.uleb128 0x3a
 4531 03ba 0B        		.uleb128 0xb
 4532 03bb 3B        		.uleb128 0x3b
 4533 03bc 0B        		.uleb128 0xb
 4534 03bd 39        		.uleb128 0x39
 4535 03be 0B        		.uleb128 0xb
 4536 03bf 49        		.uleb128 0x49
 4537 03c0 13        		.uleb128 0x13
 4538 03c1 02        		.uleb128 0x2
 4539 03c2 18        		.uleb128 0x18
 4540 03c3 00        		.byte	0
 4541 03c4 00        		.byte	0
 4542 03c5 40        		.uleb128 0x40
 4543 03c6 0B        		.uleb128 0xb
 4544 03c7 01        		.byte	0x1
 4545 03c8 11        		.uleb128 0x11
 4546 03c9 01        		.uleb128 0x1
 4547 03ca 12        		.uleb128 0x12
 4548 03cb 06        		.uleb128 0x6
 4549 03cc 01        		.uleb128 0x1
 4550 03cd 13        		.uleb128 0x13
 4551 03ce 00        		.byte	0
 4552 03cf 00        		.byte	0
 4553 03d0 41        		.uleb128 0x41
 4554 03d1 1D        		.uleb128 0x1d
 4555 03d2 01        		.byte	0x1
 4556 03d3 31        		.uleb128 0x31
 4557 03d4 13        		.uleb128 0x13
 4558 03d5 52        		.uleb128 0x52
 4559 03d6 01        		.uleb128 0x1
 4560 03d7 B842      		.uleb128 0x2138
 4561 03d9 0B        		.uleb128 0xb
 4562 03da 11        		.uleb128 0x11
 4563 03db 01        		.uleb128 0x1
 4564 03dc 12        		.uleb128 0x12
 4565 03dd 06        		.uleb128 0x6
 4566 03de 58        		.uleb128 0x58
 4567 03df 0B        		.uleb128 0xb
 4568 03e0 59        		.uleb128 0x59
 4569 03e1 0B        		.uleb128 0xb
 4570 03e2 57        		.uleb128 0x57
 4571 03e3 0B        		.uleb128 0xb
 4572 03e4 00        		.byte	0
 4573 03e5 00        		.byte	0
 4574 03e6 42        		.uleb128 0x42
 4575 03e7 2E        		.uleb128 0x2e
 4576 03e8 00        		.byte	0
 4577 03e9 3F        		.uleb128 0x3f
 4578 03ea 19        		.uleb128 0x19
 4579 03eb 3C        		.uleb128 0x3c
 4580 03ec 19        		.uleb128 0x19
 4581 03ed 6E        		.uleb128 0x6e
 4582 03ee 0E        		.uleb128 0xe
 4583 03ef 03        		.uleb128 0x3
 4584 03f0 0E        		.uleb128 0xe


 4585 03f1 3A        		.uleb128 0x3a
 4586 03f2 0B        		.uleb128 0xb
 4587 03f3 3B        		.uleb128 0x3b
 4588 03f4 0B        		.uleb128 0xb
 4589 03f5 00        		.byte	0
 4590 03f6 00        		.byte	0
 4591 03f7 00        		.byte	0
 4592               		.section	.debug_loclists,"",@progbits
 4593 0000 0000 050B 		.long	.Ldebug_loc3-.Ldebug_loc2
 4594               	.Ldebug_loc2:
 4595 0004 0005      		.word	0x5
 4596 0006 04        		.byte	0x4
 4597 0007 00        		.byte	0
 4598 0008 0000 0000 		.long	0
 4599               	.Ldebug_loc0:
 4600               	.LVUS33:
 4601 000c 01        		.uleb128 .LVU305
 4602 000d 00        		.uleb128 .LVU321
 4603 000e 00        		.uleb128 .LVU323
 4604 000f 00        		.uleb128 .LVU349
 4605               	.LLST33:
 4606 0010 04        		.byte	0x4
 4607 0011 8408      		.uleb128 .LVL80-.Ltext0
 4608 0013 B208      		.uleb128 .LVL83-.Ltext0
 4609 0015 02        		.uleb128 0x2
 4610 0016 91        		.byte	0x91
 4611 0017 70        		.sleb128 -16
 4612 0018 04        		.byte	0x4
 4613 0019 B808      		.uleb128 .LVL84-.Ltext0
 4614 001b 9809      		.uleb128 .LVL92-.Ltext0
 4615 001d 02        		.uleb128 0x2
 4616 001e 91        		.byte	0x91
 4617 001f 70        		.sleb128 -16
 4618 0020 00        		.byte	0
 4619               	.LVUS35:
 4620 0021 03        		.uleb128 .LVU307
 4621 0022 00        		.uleb128 .LVU311
 4622 0023 00        		.uleb128 .LVU323
 4623 0024 01        		.uleb128 .LVU328
 4624               	.LLST35:
 4625 0025 04        		.byte	0x4
 4626 0026 8408      		.uleb128 .LVL80-.Ltext0
 4627 0028 9408      		.uleb128 .LVL81-.Ltext0
 4628 002a 0C        		.uleb128 0xc
 4629 002b 91        		.byte	0x91
 4630 002c 70        		.sleb128 -16
 4631 002d 06        		.byte	0x6
 4632 002e 33        		.byte	0x33
 4633 002f 24        		.byte	0x24
 4634 0030 03        		.byte	0x3
 4635 0031 0000 0000 		.long	semaphore+4
 4636 0035 22        		.byte	0x22
 4637 0036 9F        		.byte	0x9f
 4638 0037 04        		.byte	0x4
 4639 0038 B808      		.uleb128 .LVL84-.Ltext0
 4640 003a CA08      		.uleb128 .LVL85-.Ltext0
 4641 003c 0C        		.uleb128 0xc


 4642 003d 91        		.byte	0x91
 4643 003e 70        		.sleb128 -16
 4644 003f 06        		.byte	0x6
 4645 0040 33        		.byte	0x33
 4646 0041 24        		.byte	0x24
 4647 0042 03        		.byte	0x3
 4648 0043 0000 0000 		.long	semaphore+4
 4649 0047 22        		.byte	0x22
 4650 0048 9F        		.byte	0x9f
 4651 0049 00        		.byte	0
 4652               	.LVUS36:
 4653 004a 01        		.uleb128 .LVU324
 4654 004b 00        		.uleb128 .LVU334
 4655               	.LLST36:
 4656 004c 04        		.byte	0x4
 4657 004d B808      		.uleb128 .LVL84-.Ltext0
 4658 004f D608      		.uleb128 .LVL87-.Ltext0
 4659 0051 01        		.uleb128 0x1
 4660 0052 52        		.byte	0x52
 4661 0053 00        		.byte	0
 4662               	.LVUS38:
 4663 0054 00        		.uleb128 .LVU311
 4664 0055 00        		.uleb128 .LVU321
 4665 0056 01        		.uleb128 .LVU328
 4666 0057 00        		.uleb128 .LVU349
 4667               	.LLST38:
 4668 0058 04        		.byte	0x4
 4669 0059 9408      		.uleb128 .LVL81-.Ltext0
 4670 005b B208      		.uleb128 .LVL83-.Ltext0
 4671 005d 01        		.uleb128 0x1
 4672 005e 52        		.byte	0x52
 4673 005f 04        		.byte	0x4
 4674 0060 CA08      		.uleb128 .LVL85-.Ltext0
 4675 0062 9809      		.uleb128 .LVL92-.Ltext0
 4676 0064 01        		.uleb128 0x1
 4677 0065 52        		.byte	0x52
 4678 0066 00        		.byte	0
 4679               	.LVUS39:
 4680 0067 00        		.uleb128 .LVU311
 4681 0068 00        		.uleb128 .LVU321
 4682 0069 01        		.uleb128 .LVU328
 4683 006a 00        		.uleb128 .LVU349
 4684               	.LLST39:
 4685 006b 04        		.byte	0x4
 4686 006c 9408      		.uleb128 .LVL81-.Ltext0
 4687 006e B208      		.uleb128 .LVL83-.Ltext0
 4688 0070 06        		.uleb128 0x6
 4689 0071 03        		.byte	0x3
 4690 0072 0000 0000 		.long	ready
 4691 0076 9F        		.byte	0x9f
 4692 0077 04        		.byte	0x4
 4693 0078 CA08      		.uleb128 .LVL85-.Ltext0
 4694 007a 9809      		.uleb128 .LVL92-.Ltext0
 4695 007c 06        		.uleb128 0x6
 4696 007d 03        		.byte	0x3
 4697 007e 0000 0000 		.long	ready
 4698 0082 9F        		.byte	0x9f


 4699 0083 00        		.byte	0
 4700               	.LVUS40:
 4701 0084 00        		.uleb128 .LVU315
 4702 0085 00        		.uleb128 .LVU321
 4703 0086 00        		.uleb128 .LVU332
 4704 0087 01        		.uleb128 .LVU339
 4705 0088 01        		.uleb128 .LVU339
 4706 0089 00        		.uleb128 .LVU342
 4707 008a 00        		.uleb128 .LVU342
 4708 008b 00        		.uleb128 .LVU349
 4709               	.LLST40:
 4710 008c 04        		.byte	0x4
 4711 008d 9A08      		.uleb128 .LVL82-.Ltext0
 4712 008f B208      		.uleb128 .LVL83-.Ltext0
 4713 0091 01        		.uleb128 0x1
 4714 0092 58        		.byte	0x58
 4715 0093 04        		.byte	0x4
 4716 0094 D008      		.uleb128 .LVL86-.Ltext0
 4717 0096 EA08      		.uleb128 .LVL89-.Ltext0
 4718 0098 01        		.uleb128 0x1
 4719 0099 58        		.byte	0x58
 4720 009a 04        		.byte	0x4
 4721 009b EA08      		.uleb128 .LVL89-.Ltext0
 4722 009d F208      		.uleb128 .LVL90-.Ltext0
 4723 009f 01        		.uleb128 0x1
 4724 00a0 50        		.byte	0x50
 4725 00a1 04        		.byte	0x4
 4726 00a2 F208      		.uleb128 .LVL90-.Ltext0
 4727 00a4 9809      		.uleb128 .LVL92-.Ltext0
 4728 00a6 01        		.uleb128 0x1
 4729 00a7 58        		.byte	0x58
 4730 00a8 00        		.byte	0
 4731               	.LVUS41:
 4732 00a9 00        		.uleb128 .LVU336
 4733 00aa 00        		.uleb128 .LVU342
 4734 00ab 00        		.uleb128 .LVU342
 4735 00ac 00        		.uleb128 .LVU343
 4736 00ad 00        		.uleb128 .LVU343
 4737 00ae 00        		.uleb128 .LVU349
 4738               	.LLST41:
 4739 00af 04        		.byte	0x4
 4740 00b0 E808      		.uleb128 .LVL88-.Ltext0
 4741 00b2 F208      		.uleb128 .LVL90-.Ltext0
 4742 00b4 01        		.uleb128 0x1
 4743 00b5 50        		.byte	0x50
 4744 00b6 04        		.byte	0x4
 4745 00b7 F208      		.uleb128 .LVL90-.Ltext0
 4746 00b9 FE08      		.uleb128 .LVL91-.Ltext0
 4747 00bb 01        		.uleb128 0x1
 4748 00bc 58        		.byte	0x58
 4749 00bd 04        		.byte	0x4
 4750 00be FE08      		.uleb128 .LVL91-.Ltext0
 4751 00c0 9809      		.uleb128 .LVL92-.Ltext0
 4752 00c2 01        		.uleb128 0x1
 4753 00c3 50        		.byte	0x50
 4754 00c4 00        		.byte	0
 4755               	.LVUS22:


 4756 00c5 01        		.uleb128 .LVU236
 4757 00c6 00        		.uleb128 0
 4758               	.LLST22:
 4759 00c7 04        		.byte	0x4
 4760 00c8 BC06      		.uleb128 .LVL65-.Ltext0
 4761 00ca E207      		.uleb128 .LFE12-.Ltext0
 4762 00cc 02        		.uleb128 0x2
 4763 00cd 91        		.byte	0x91
 4764 00ce 70        		.sleb128 -16
 4765 00cf 00        		.byte	0
 4766               	.LVUS24:
 4767 00d0 00        		.uleb128 .LVU238
 4768 00d1 00        		.uleb128 .LVU247
 4769 00d2 00        		.uleb128 .LVU259
 4770 00d3 00        		.uleb128 .LVU275
 4771               	.LLST24:
 4772 00d4 04        		.byte	0x4
 4773 00d5 C206      		.uleb128 .LVL66-.Ltext0
 4774 00d7 E206      		.uleb128 .LVL68-.Ltext0
 4775 00d9 01        		.uleb128 0x1
 4776 00da 59        		.byte	0x59
 4777 00db 04        		.byte	0x4
 4778 00dc EC06      		.uleb128 .LVL69-.Ltext0
 4779 00de B807      		.uleb128 .LVL75-.Ltext0
 4780 00e0 01        		.uleb128 0x1
 4781 00e1 59        		.byte	0x59
 4782 00e2 00        		.byte	0
 4783               	.LVUS25:
 4784 00e3 00        		.uleb128 .LVU238
 4785 00e4 00        		.uleb128 .LVU247
 4786 00e5 00        		.uleb128 .LVU259
 4787 00e6 00        		.uleb128 .LVU275
 4788               	.LLST25:
 4789 00e7 04        		.byte	0x4
 4790 00e8 C206      		.uleb128 .LVL66-.Ltext0
 4791 00ea E206      		.uleb128 .LVL68-.Ltext0
 4792 00ec 0C        		.uleb128 0xc
 4793 00ed 91        		.byte	0x91
 4794 00ee 70        		.sleb128 -16
 4795 00ef 06        		.byte	0x6
 4796 00f0 33        		.byte	0x33
 4797 00f1 24        		.byte	0x24
 4798 00f2 03        		.byte	0x3
 4799 00f3 0000 0000 		.long	semaphore+4
 4800 00f7 22        		.byte	0x22
 4801 00f8 9F        		.byte	0x9f
 4802 00f9 04        		.byte	0x4
 4803 00fa EC06      		.uleb128 .LVL69-.Ltext0
 4804 00fc B807      		.uleb128 .LVL75-.Ltext0
 4805 00fe 0C        		.uleb128 0xc
 4806 00ff 91        		.byte	0x91
 4807 0100 70        		.sleb128 -16
 4808 0101 06        		.byte	0x6
 4809 0102 33        		.byte	0x33
 4810 0103 24        		.byte	0x24
 4811 0104 03        		.byte	0x3
 4812 0105 0000 0000 		.long	semaphore+4


 4813 0109 22        		.byte	0x22
 4814 010a 9F        		.byte	0x9f
 4815 010b 00        		.byte	0
 4816               	.LVUS26:
 4817 010c 00        		.uleb128 .LVU241
 4818 010d 00        		.uleb128 .LVU247
 4819 010e 00        		.uleb128 .LVU259
 4820 010f 01        		.uleb128 .LVU265
 4821 0110 01        		.uleb128 .LVU265
 4822 0111 00        		.uleb128 .LVU267
 4823 0112 00        		.uleb128 .LVU267
 4824 0113 00        		.uleb128 .LVU275
 4825               	.LLST26:
 4826 0114 04        		.byte	0x4
 4827 0115 C806      		.uleb128 .LVL67-.Ltext0
 4828 0117 E206      		.uleb128 .LVL68-.Ltext0
 4829 0119 01        		.uleb128 0x1
 4830 011a 51        		.byte	0x51
 4831 011b 04        		.byte	0x4
 4832 011c EC06      		.uleb128 .LVL69-.Ltext0
 4833 011e 8607      		.uleb128 .LVL71-.Ltext0
 4834 0120 01        		.uleb128 0x1
 4835 0121 51        		.byte	0x51
 4836 0122 04        		.byte	0x4
 4837 0123 8607      		.uleb128 .LVL71-.Ltext0
 4838 0125 8E07      		.uleb128 .LVL72-.Ltext0
 4839 0127 01        		.uleb128 0x1
 4840 0128 50        		.byte	0x50
 4841 0129 04        		.byte	0x4
 4842 012a 8E07      		.uleb128 .LVL72-.Ltext0
 4843 012c B807      		.uleb128 .LVL75-.Ltext0
 4844 012e 01        		.uleb128 0x1
 4845 012f 51        		.byte	0x51
 4846 0130 00        		.byte	0
 4847               	.LVUS27:
 4848 0131 00        		.uleb128 .LVU262
 4849 0132 00        		.uleb128 .LVU267
 4850 0133 00        		.uleb128 .LVU267
 4851 0134 00        		.uleb128 .LVU268
 4852 0135 00        		.uleb128 .LVU268
 4853 0136 00        		.uleb128 .LVU274
 4854               	.LLST27:
 4855 0137 04        		.byte	0x4
 4856 0138 8407      		.uleb128 .LVL70-.Ltext0
 4857 013a 8E07      		.uleb128 .LVL72-.Ltext0
 4858 013c 01        		.uleb128 0x1
 4859 013d 50        		.byte	0x50
 4860 013e 04        		.byte	0x4
 4861 013f 8E07      		.uleb128 .LVL72-.Ltext0
 4862 0141 9A07      		.uleb128 .LVL73-.Ltext0
 4863 0143 01        		.uleb128 0x1
 4864 0144 51        		.byte	0x51
 4865 0145 04        		.byte	0x4
 4866 0146 9A07      		.uleb128 .LVL73-.Ltext0
 4867 0148 AA07      		.uleb128 .LVL74-.Ltext0
 4868 014a 01        		.uleb128 0x1
 4869 014b 50        		.byte	0x50


 4870 014c 00        		.byte	0
 4871               	.LVUS30:
 4872 014d 04        		.uleb128 .LVU251
 4873 014e 00        		.uleb128 .LVU259
 4874 014f 04        		.uleb128 .LVU279
 4875 0150 01        		.uleb128 .LVU288
 4876               	.LLST30:
 4877 0151 04        		.byte	0x4
 4878 0152 E206      		.uleb128 .LVL68-.Ltext0
 4879 0154 EC06      		.uleb128 .LVL69-.Ltext0
 4880 0156 06        		.uleb128 0x6
 4881 0157 03        		.byte	0x3
 4882 0158 0000 0000 		.long	ready
 4883 015c 9F        		.byte	0x9f
 4884 015d 04        		.byte	0x4
 4885 015e B807      		.uleb128 .LVL75-.Ltext0
 4886 0160 D407      		.uleb128 .LVL77-.Ltext0
 4887 0162 06        		.uleb128 0x6
 4888 0163 03        		.byte	0x3
 4889 0164 0000 0000 		.long	ready
 4890 0168 9F        		.byte	0x9f
 4891 0169 00        		.byte	0
 4892               	.LVUS31:
 4893 016a 01        		.uleb128 .LVU284
 4894 016b 00        		.uleb128 .LVU295
 4895               	.LLST31:
 4896 016c 04        		.byte	0x4
 4897 016d C007      		.uleb128 .LVL76-.Ltext0
 4898 016f E107      		.uleb128 .LVL78-1-.Ltext0
 4899 0171 01        		.uleb128 0x1
 4900 0172 51        		.byte	0x51
 4901 0173 00        		.byte	0
 4902               	.LVUS16:
 4903 0174 02        		.uleb128 .LVU173
 4904 0175 01        		.uleb128 .LVU182
 4905               	.LLST16:
 4906 0176 04        		.byte	0x4
 4907 0177 CC04      		.uleb128 .LVL49-.Ltext0
 4908 0179 EE04      		.uleb128 .LVL51-.Ltext0
 4909 017b 06        		.uleb128 0x6
 4910 017c 03        		.byte	0x3
 4911 017d 0000 0000 		.long	ready
 4912 0181 9F        		.byte	0x9f
 4913 0182 00        		.byte	0
 4914               	.LVUS17:
 4915 0183 01        		.uleb128 .LVU178
 4916 0184 01        		.uleb128 .LVU182
 4917               	.LLST17:
 4918 0185 04        		.byte	0x4
 4919 0186 D404      		.uleb128 .LVL50-.Ltext0
 4920 0188 EE04      		.uleb128 .LVL51-.Ltext0
 4921 018a 01        		.uleb128 0x1
 4922 018b 51        		.byte	0x51
 4923 018c 00        		.byte	0
 4924               	.LVUS4:
 4925 018d 01        		.uleb128 .LVU85
 4926 018e 00        		.uleb128 .LVU88


 4927 018f 00        		.uleb128 .LVU88
 4928 0190 00        		.uleb128 .LVU94
 4929 0191 00        		.uleb128 .LVU95
 4930 0192 00        		.uleb128 .LVU143
 4931 0193 00        		.uleb128 .LVU144
 4932 0194 00        		.uleb128 0
 4933               	.LLST4:
 4934 0195 04        		.byte	0x4
 4935 0196 8402      		.uleb128 .LVL22-.Ltext0
 4936 0198 8C02      		.uleb128 .LVL23-.Ltext0
 4937 019a 02        		.uleb128 0x2
 4938 019b 31        		.byte	0x31
 4939 019c 9F        		.byte	0x9f
 4940 019d 04        		.byte	0x4
 4941 019e 8C02      		.uleb128 .LVL23-.Ltext0
 4942 01a0 A002      		.uleb128 .LVL25-.Ltext0
 4943 01a2 01        		.uleb128 0x1
 4944 01a3 52        		.byte	0x52
 4945 01a4 04        		.byte	0x4
 4946 01a5 A202      		.uleb128 .LVL26-.Ltext0
 4947 01a7 DC03      		.uleb128 .LVL40-.Ltext0
 4948 01a9 01        		.uleb128 0x1
 4949 01aa 52        		.byte	0x52
 4950 01ab 04        		.byte	0x4
 4951 01ac DE03      		.uleb128 .LVL41-.Ltext0
 4952 01ae F203      		.uleb128 .LFE7-.Ltext0
 4953 01b0 01        		.uleb128 0x1
 4954 01b1 52        		.byte	0x52
 4955 01b2 00        		.byte	0
 4956               	.LVUS5:
 4957 01b3 01        		.uleb128 .LVU102
 4958 01b4 00        		.uleb128 .LVU116
 4959 01b5 00        		.uleb128 .LVU116
 4960 01b6 01        		.uleb128 .LVU119
 4961               	.LLST5:
 4962 01b7 04        		.byte	0x4
 4963 01b8 CC02      		.uleb128 .LVL27-.Ltext0
 4964 01ba F302      		.uleb128 .LVL31-1-.Ltext0
 4965 01bc 05        		.uleb128 0x5
 4966 01bd 03        		.byte	0x3
 4967 01be 0000 0000 		.long	new_task
 4968 01c2 04        		.byte	0x4
 4969 01c3 F302      		.uleb128 .LVL31-1-.Ltext0
 4970 01c5 FE02      		.uleb128 .LVL32-.Ltext0
 4971 01c7 01        		.uleb128 0x1
 4972 01c8 52        		.byte	0x52
 4973 01c9 00        		.byte	0
 4974               	.LVUS6:
 4975 01ca 00        		.uleb128 .LVU105
 4976 01cb 03        		.uleb128 .LVU108
 4977 01cc 03        		.uleb128 .LVU108
 4978 01cd 01        		.uleb128 .LVU113
 4979 01ce 01        		.uleb128 .LVU113
 4980 01cf 00        		.uleb128 .LVU116
 4981 01d0 01        		.uleb128 .LVU117
 4982 01d1 01        		.uleb128 .LVU119
 4983               	.LLST6:


 4984 01d2 04        		.byte	0x4
 4985 01d3 DA02      		.uleb128 .LVL28-.Ltext0
 4986 01d5 DA02      		.uleb128 .LVL28-.Ltext0
 4987 01d7 01        		.uleb128 0x1
 4988 01d8 5C        		.byte	0x5c
 4989 01d9 04        		.byte	0x4
 4990 01da DA02      		.uleb128 .LVL28-.Ltext0
 4991 01dc E402      		.uleb128 .LVL30-.Ltext0
 4992 01de 03        		.uleb128 0x3
 4993 01df 7C        		.byte	0x7c
 4994 01e0 7C        		.sleb128 -4
 4995 01e1 9F        		.byte	0x9f
 4996 01e2 04        		.byte	0x4
 4997 01e3 E402      		.uleb128 .LVL30-.Ltext0
 4998 01e5 F402      		.uleb128 .LVL31-.Ltext0
 4999 01e7 03        		.uleb128 0x3
 5000 01e8 7C        		.byte	0x7c
 5001 01e9 7A        		.sleb128 -6
 5002 01ea 9F        		.byte	0x9f
 5003 01eb 04        		.byte	0x4
 5004 01ec F402      		.uleb128 .LVL31-.Ltext0
 5005 01ee FE02      		.uleb128 .LVL32-.Ltext0
 5006 01f0 04        		.uleb128 0x4
 5007 01f1 7C        		.byte	0x7c
 5008 01f2 BA7F      		.sleb128 -70
 5009 01f4 9F        		.byte	0x9f
 5010 01f5 00        		.byte	0
 5011               	.LVUS7:
 5012 01f6 01        		.uleb128 .LVU110
 5013 01f7 02        		.uleb128 .LVU111
 5014 01f8 02        		.uleb128 .LVU111
 5015 01f9 01        		.uleb128 .LVU119
 5016               	.LLST7:
 5017 01fa 04        		.byte	0x4
 5018 01fb E002      		.uleb128 .LVL29-.Ltext0
 5019 01fd E002      		.uleb128 .LVL29-.Ltext0
 5020 01ff 03        		.uleb128 0x3
 5021 0200 7C        		.byte	0x7c
 5022 0201 7C        		.sleb128 -4
 5023 0202 9F        		.byte	0x9f
 5024 0203 04        		.byte	0x4
 5025 0204 E002      		.uleb128 .LVL29-.Ltext0
 5026 0206 FE02      		.uleb128 .LVL32-.Ltext0
 5027 0208 03        		.uleb128 0x3
 5028 0209 7C        		.byte	0x7c
 5029 020a 7A        		.sleb128 -6
 5030 020b 9F        		.byte	0x9f
 5031 020c 00        		.byte	0
 5032               	.LVUS8:
 5033 020d 02        		.uleb128 .LVU107
 5034 020e 00        		.uleb128 .LVU116
 5035               	.LLST8:
 5036 020f 04        		.byte	0x4
 5037 0210 DA02      		.uleb128 .LVL28-.Ltext0
 5038 0212 F402      		.uleb128 .LVL31-.Ltext0
 5039 0214 02        		.uleb128 0x2
 5040 0215 30        		.byte	0x30


 5041 0216 9F        		.byte	0x9f
 5042 0217 00        		.byte	0
 5043               	.LVUS10:
 5044 0218 01        		.uleb128 .LVU121
 5045 0219 00        		.uleb128 .LVU143
 5046 021a 00        		.uleb128 .LVU144
 5047 021b 00        		.uleb128 0
 5048               	.LLST10:
 5049 021c 04        		.byte	0x4
 5050 021d 8603      		.uleb128 .LVL33-.Ltext0
 5051 021f DC03      		.uleb128 .LVL40-.Ltext0
 5052 0221 01        		.uleb128 0x1
 5053 0222 52        		.byte	0x52
 5054 0223 04        		.byte	0x4
 5055 0224 DE03      		.uleb128 .LVL41-.Ltext0
 5056 0226 F203      		.uleb128 .LFE7-.Ltext0
 5057 0228 01        		.uleb128 0x1
 5058 0229 52        		.byte	0x52
 5059 022a 00        		.byte	0
 5060               	.LVUS11:
 5061 022b 00        		.uleb128 .LVU124
 5062 022c 01        		.uleb128 .LVU131
 5063 022d 01        		.uleb128 .LVU131
 5064 022e 00        		.uleb128 .LVU134
 5065 022f 00        		.uleb128 .LVU134
 5066 0230 00        		.uleb128 0
 5067               	.LLST11:
 5068 0231 04        		.byte	0x4
 5069 0232 8C03      		.uleb128 .LVL34-.Ltext0
 5070 0234 AA03      		.uleb128 .LVL36-.Ltext0
 5071 0236 01        		.uleb128 0x1
 5072 0237 58        		.byte	0x58
 5073 0238 04        		.byte	0x4
 5074 0239 AA03      		.uleb128 .LVL36-.Ltext0
 5075 023b B203      		.uleb128 .LVL37-.Ltext0
 5076 023d 01        		.uleb128 0x1
 5077 023e 50        		.byte	0x50
 5078 023f 04        		.byte	0x4
 5079 0240 B203      		.uleb128 .LVL37-.Ltext0
 5080 0242 F203      		.uleb128 .LFE7-.Ltext0
 5081 0244 01        		.uleb128 0x1
 5082 0245 58        		.byte	0x58
 5083 0246 00        		.byte	0
 5084               	.LVUS12:
 5085 0247 00        		.uleb128 .LVU128
 5086 0248 00        		.uleb128 .LVU134
 5087 0249 00        		.uleb128 .LVU134
 5088 024a 00        		.uleb128 .LVU135
 5089 024b 00        		.uleb128 .LVU135
 5090 024c 00        		.uleb128 .LVU141
 5091               	.LLST12:
 5092 024d 04        		.byte	0x4
 5093 024e A803      		.uleb128 .LVL35-.Ltext0
 5094 0250 B203      		.uleb128 .LVL37-.Ltext0
 5095 0252 01        		.uleb128 0x1
 5096 0253 50        		.byte	0x50
 5097 0254 04        		.byte	0x4


 5098 0255 B203      		.uleb128 .LVL37-.Ltext0
 5099 0257 BE03      		.uleb128 .LVL38-.Ltext0
 5100 0259 01        		.uleb128 0x1
 5101 025a 58        		.byte	0x58
 5102 025b 04        		.byte	0x4
 5103 025c BE03      		.uleb128 .LVL38-.Ltext0
 5104 025e D803      		.uleb128 .LVL39-.Ltext0
 5105 0260 01        		.uleb128 0x1
 5106 0261 50        		.byte	0x50
 5107 0262 00        		.byte	0
 5108               	.LVUS3:
 5109 0263 02        		.uleb128 .LVU64
 5110 0264 01        		.uleb128 .LVU72
 5111 0265 01        		.uleb128 .LVU72
 5112 0266 01        		.uleb128 .LVU80
 5113 0267 01        		.uleb128 .LVU80
 5114 0268 00        		.uleb128 0
 5115               	.LLST3:
 5116 0269 04        		.byte	0x4
 5117 026a AA01      		.uleb128 .LVL14-.Ltext0
 5118 026c D401      		.uleb128 .LVL17-.Ltext0
 5119 026e 02        		.uleb128 0x2
 5120 026f 30        		.byte	0x30
 5121 0270 9F        		.byte	0x9f
 5122 0271 04        		.byte	0x4
 5123 0272 D401      		.uleb128 .LVL17-.Ltext0
 5124 0274 F801      		.uleb128 .LVL20-.Ltext0
 5125 0276 02        		.uleb128 0x2
 5126 0277 31        		.byte	0x31
 5127 0278 9F        		.byte	0x9f
 5128 0279 04        		.byte	0x4
 5129 027a F801      		.uleb128 .LVL20-.Ltext0
 5130 027c 8002      		.uleb128 .LFE6-.Ltext0
 5131 027e 02        		.uleb128 0x2
 5132 027f 32        		.byte	0x32
 5133 0280 9F        		.byte	0x9f
 5134 0281 00        		.byte	0
 5135               	.LVUS1:
 5136 0282 03        		.uleb128 .LVU18
 5137 0283 00        		.uleb128 .LVU19
 5138               	.LLST1:
 5139 0284 04        		.byte	0x4
 5140 0285 36        		.uleb128 .LVL6-.Ltext0
 5141 0286 3C        		.uleb128 .LVL7-.Ltext0
 5142 0287 02        		.uleb128 0x2
 5143 0288 31        		.byte	0x31
 5144 0289 9F        		.byte	0x9f
 5145 028a 00        		.byte	0
 5146               	.LVUS2:
 5147 028b 02        		.uleb128 .LVU29
 5148 028c 01        		.uleb128 .LVU35
 5149 028d 01        		.uleb128 .LVU35
 5150 028e 01        		.uleb128 .LVU41
 5151 028f 01        		.uleb128 .LVU41
 5152 0290 01        		.uleb128 .LVU47
 5153 0291 01        		.uleb128 .LVU47
 5154 0292 01        		.uleb128 .LVU53


 5155 0293 01        		.uleb128 .LVU53
 5156 0294 01        		.uleb128 .LVU59
 5157 0295 01        		.uleb128 .LVU59
 5158 0296 00        		.uleb128 0
 5159               	.LLST2:
 5160 0297 04        		.byte	0x4
 5161 0298 68        		.uleb128 .LVL8-.Ltext0
 5162 0299 76        		.uleb128 .LVL9-.Ltext0
 5163 029a 02        		.uleb128 0x2
 5164 029b 30        		.byte	0x30
 5165 029c 9F        		.byte	0x9f
 5166 029d 04        		.byte	0x4
 5167 029e 76        		.uleb128 .LVL9-.Ltext0
 5168 029f 8201      		.uleb128 .LVL10-.Ltext0
 5169 02a1 02        		.uleb128 0x2
 5170 02a2 31        		.byte	0x31
 5171 02a3 9F        		.byte	0x9f
 5172 02a4 04        		.byte	0x4
 5173 02a5 8201      		.uleb128 .LVL10-.Ltext0
 5174 02a7 8E01      		.uleb128 .LVL11-.Ltext0
 5175 02a9 02        		.uleb128 0x2
 5176 02aa 32        		.byte	0x32
 5177 02ab 9F        		.byte	0x9f
 5178 02ac 04        		.byte	0x4
 5179 02ad 8E01      		.uleb128 .LVL11-.Ltext0
 5180 02af 9A01      		.uleb128 .LVL12-.Ltext0
 5181 02b1 02        		.uleb128 0x2
 5182 02b2 33        		.byte	0x33
 5183 02b3 9F        		.byte	0x9f
 5184 02b4 04        		.byte	0x4
 5185 02b5 9A01      		.uleb128 .LVL12-.Ltext0
 5186 02b7 A601      		.uleb128 .LVL13-.Ltext0
 5187 02b9 02        		.uleb128 0x2
 5188 02ba 34        		.byte	0x34
 5189 02bb 9F        		.byte	0x9f
 5190 02bc 04        		.byte	0x4
 5191 02bd A601      		.uleb128 .LVL13-.Ltext0
 5192 02bf A801      		.uleb128 .LFE5-.Ltext0
 5193 02c1 02        		.uleb128 0x2
 5194 02c2 35        		.byte	0x35
 5195 02c3 9F        		.byte	0x9f
 5196 02c4 00        		.byte	0
 5197               	.LVUS0:
 5198 02c5 00        		.uleb128 .LVU5
 5199 02c6 00        		.uleb128 .LVU9
 5200 02c7 00        		.uleb128 .LVU9
 5201 02c8 00        		.uleb128 .LVU10
 5202               	.LLST0:
 5203 02c9 04        		.byte	0x4
 5204 02ca 12        		.uleb128 .LVL2-.Ltext0
 5205 02cb 20        		.uleb128 .LVL3-.Ltext0
 5206 02cc 01        		.uleb128 0x1
 5207 02cd 58        		.byte	0x58
 5208 02ce 04        		.byte	0x4
 5209 02cf 20        		.uleb128 .LVL3-.Ltext0
 5210 02d0 22        		.uleb128 .LVL4-.Ltext0
 5211 02d1 07        		.uleb128 0x7


 5212 02d2 70        		.byte	0x70
 5213 02d3 00        		.sleb128 0
 5214 02d4 40        		.byte	0x40
 5215 02d5 24        		.byte	0x24
 5216 02d6 40        		.byte	0x40
 5217 02d7 26        		.byte	0x26
 5218 02d8 9F        		.byte	0x9f
 5219 02d9 00        		.byte	0
 5220               	.LVUS13:
 5221 02da 00        		.uleb128 .LVU152
 5222 02db 03        		.uleb128 .LVU155
 5223 02dc 03        		.uleb128 .LVU155
 5224 02dd 01        		.uleb128 .LVU161
 5225 02de 01        		.uleb128 .LVU161
 5226 02df 00        		.uleb128 .LVU164
 5227 02e0 01        		.uleb128 .LVU165
 5228 02e1 00        		.uleb128 .LVU169
 5229 02e2 00        		.uleb128 .LVU169
 5230 02e3 00        		.uleb128 0
 5231               	.LLST13:
 5232 02e4 04        		.byte	0x4
 5233 02e5 8804      		.uleb128 .LVL43-.Ltext0
 5234 02e7 8804      		.uleb128 .LVL43-.Ltext0
 5235 02e9 01        		.uleb128 0x1
 5236 02ea 5A        		.byte	0x5a
 5237 02eb 04        		.byte	0x4
 5238 02ec 8804      		.uleb128 .LVL43-.Ltext0
 5239 02ee A404      		.uleb128 .LVL45-.Ltext0
 5240 02f0 03        		.uleb128 0x3
 5241 02f1 7A        		.byte	0x7a
 5242 02f2 7C        		.sleb128 -4
 5243 02f3 9F        		.byte	0x9f
 5244 02f4 04        		.byte	0x4
 5245 02f5 A404      		.uleb128 .LVL45-.Ltext0
 5246 02f7 B404      		.uleb128 .LVL46-.Ltext0
 5247 02f9 03        		.uleb128 0x3
 5248 02fa 7A        		.byte	0x7a
 5249 02fb 7A        		.sleb128 -6
 5250 02fc 9F        		.byte	0x9f
 5251 02fd 04        		.byte	0x4
 5252 02fe B404      		.uleb128 .LVL46-.Ltext0
 5253 0300 C604      		.uleb128 .LVL47-.Ltext0
 5254 0302 04        		.uleb128 0x4
 5255 0303 7A        		.byte	0x7a
 5256 0304 BA7F      		.sleb128 -70
 5257 0306 9F        		.byte	0x9f
 5258 0307 04        		.byte	0x4
 5259 0308 C604      		.uleb128 .LVL47-.Ltext0
 5260 030a CC04      		.uleb128 .LFE8-.Ltext0
 5261 030c 01        		.uleb128 0x1
 5262 030d 50        		.byte	0x50
 5263 030e 00        		.byte	0
 5264               	.LVUS14:
 5265 030f 01        		.uleb128 .LVU158
 5266 0310 02        		.uleb128 .LVU159
 5267 0311 02        		.uleb128 .LVU159
 5268 0312 00        		.uleb128 .LVU170


 5269 0313 00        		.uleb128 .LVU170
 5270 0314 00        		.uleb128 0
 5271               	.LLST14:
 5272 0315 04        		.byte	0x4
 5273 0316 A004      		.uleb128 .LVL44-.Ltext0
 5274 0318 A004      		.uleb128 .LVL44-.Ltext0
 5275 031a 03        		.uleb128 0x3
 5276 031b 7A        		.byte	0x7a
 5277 031c 7C        		.sleb128 -4
 5278 031d 9F        		.byte	0x9f
 5279 031e 04        		.byte	0x4
 5280 031f A004      		.uleb128 .LVL44-.Ltext0
 5281 0321 CA04      		.uleb128 .LVL48-.Ltext0
 5282 0323 03        		.uleb128 0x3
 5283 0324 7A        		.byte	0x7a
 5284 0325 7A        		.sleb128 -6
 5285 0326 9F        		.byte	0x9f
 5286 0327 04        		.byte	0x4
 5287 0328 CA04      		.uleb128 .LVL48-.Ltext0
 5288 032a CC04      		.uleb128 .LFE8-.Ltext0
 5289 032c 0C        		.uleb128 0xc
 5290 032d 91        		.byte	0x91
 5291 032e 70        		.sleb128 -16
 5292 032f 06        		.byte	0x6
 5293 0330 3B        		.byte	0x3b
 5294 0331 24        		.byte	0x24
 5295 0332 03        		.byte	0x3
 5296 0333 0000 0000 		.long	stacks-6
 5297 0337 22        		.byte	0x22
 5298 0338 9F        		.byte	0x9f
 5299 0339 00        		.byte	0
 5300               	.LVUS15:
 5301 033a 02        		.uleb128 .LVU154
 5302 033b 00        		.uleb128 .LVU164
 5303               	.LLST15:
 5304 033c 04        		.byte	0x4
 5305 033d 8804      		.uleb128 .LVL43-.Ltext0
 5306 033f B404      		.uleb128 .LVL46-.Ltext0
 5307 0341 02        		.uleb128 0x2
 5308 0342 30        		.byte	0x30
 5309 0343 9F        		.byte	0x9f
 5310 0344 00        		.byte	0
 5311               	.LVUS18:
 5312 0345 00        		.uleb128 .LVU192
 5313 0346 01        		.uleb128 .LVU204
 5314 0347 01        		.uleb128 .LVU204
 5315 0348 00        		.uleb128 .LVU206
 5316 0349 00        		.uleb128 .LVU206
 5317 034a 00        		.uleb128 0
 5318               	.LLST18:
 5319 034b 04        		.byte	0x4
 5320 034c 8C05      		.uleb128 .LVL55-.Ltext0
 5321 034e C805      		.uleb128 .LVL57-.Ltext0
 5322 0350 01        		.uleb128 0x1
 5323 0351 58        		.byte	0x58
 5324 0352 04        		.byte	0x4
 5325 0353 C805      		.uleb128 .LVL57-.Ltext0


 5326 0355 D005      		.uleb128 .LVL58-.Ltext0
 5327 0357 01        		.uleb128 0x1
 5328 0358 50        		.byte	0x50
 5329 0359 04        		.byte	0x4
 5330 035a D005      		.uleb128 .LVL58-.Ltext0
 5331 035c FE05      		.uleb128 .LFE10-.Ltext0
 5332 035e 01        		.uleb128 0x1
 5333 035f 58        		.byte	0x58
 5334 0360 00        		.byte	0
 5335               	.LVUS19:
 5336 0361 00        		.uleb128 .LVU201
 5337 0362 00        		.uleb128 .LVU206
 5338 0363 00        		.uleb128 .LVU206
 5339 0364 00        		.uleb128 .LVU207
 5340 0365 00        		.uleb128 .LVU207
 5341 0366 00        		.uleb128 .LVU213
 5342               	.LLST19:
 5343 0367 04        		.byte	0x4
 5344 0368 C605      		.uleb128 .LVL56-.Ltext0
 5345 036a D005      		.uleb128 .LVL58-.Ltext0
 5346 036c 01        		.uleb128 0x1
 5347 036d 50        		.byte	0x50
 5348 036e 04        		.byte	0x4
 5349 036f D005      		.uleb128 .LVL58-.Ltext0
 5350 0371 DC05      		.uleb128 .LVL59-.Ltext0
 5351 0373 01        		.uleb128 0x1
 5352 0374 58        		.byte	0x58
 5353 0375 04        		.byte	0x4
 5354 0376 DC05      		.uleb128 .LVL59-.Ltext0
 5355 0378 EC05      		.uleb128 .LVL60-.Ltext0
 5356 037a 01        		.uleb128 0x1
 5357 037b 50        		.byte	0x50
 5358 037c 00        		.byte	0
 5359               	.LVUS20:
 5360 037d 01        		.uleb128 .LVU221
 5361 037e 01        		.uleb128 .LVU225
 5362               	.LLST20:
 5363 037f 04        		.byte	0x4
 5364 0380 8606      		.uleb128 .LVL62-.Ltext0
 5365 0382 9C06      		.uleb128 .LVL63-.Ltext0
 5366 0384 01        		.uleb128 0x1
 5367 0385 50        		.byte	0x50
 5368 0386 00        		.byte	0
 5369               	.LVUS42:
 5370 0387 02        		.uleb128 .LVU352
 5371 0388 01        		.uleb128 .LVU361
 5372 0389 00        		.uleb128 .LVU365
 5373 038a 00        		.uleb128 0
 5374               	.LLST42:
 5375 038b 04        		.byte	0x4
 5376 038c 9A09      		.uleb128 .LVL93-.Ltext0
 5377 038e BC09      		.uleb128 .LVL95-.Ltext0
 5378 0390 06        		.uleb128 0x6
 5379 0391 03        		.byte	0x3
 5380 0392 0000 0000 		.long	ready
 5381 0396 9F        		.byte	0x9f
 5382 0397 04        		.byte	0x4


 5383 0398 C409      		.uleb128 .LVL96-.Ltext0
 5384 039a C609      		.uleb128 .LFE14-.Ltext0
 5385 039c 06        		.uleb128 0x6
 5386 039d 03        		.byte	0x3
 5387 039e 0000 0000 		.long	ready
 5388 03a2 9F        		.byte	0x9f
 5389 03a3 00        		.byte	0
 5390               	.LVUS43:
 5391 03a4 01        		.uleb128 .LVU357
 5392 03a5 00        		.uleb128 .LVU365
 5393               	.LLST43:
 5394 03a6 04        		.byte	0x4
 5395 03a7 A209      		.uleb128 .LVL94-.Ltext0
 5396 03a9 C409      		.uleb128 .LVL96-.Ltext0
 5397 03ab 01        		.uleb128 0x1
 5398 03ac 51        		.byte	0x51
 5399 03ad 00        		.byte	0
 5400               	.LVUS45:
 5401 03ae 00        		.uleb128 .LVU372
 5402 03af 00        		.uleb128 .LVU383
 5403 03b0 00        		.uleb128 .LVU407
 5404 03b1 00        		.uleb128 .LVU423
 5405               	.LLST45:
 5406 03b2 04        		.byte	0x4
 5407 03b3 CE09      		.uleb128 .LVL98-.Ltext0
 5408 03b5 F809      		.uleb128 .LVL102-.Ltext0
 5409 03b7 01        		.uleb128 0x1
 5410 03b8 52        		.byte	0x52
 5411 03b9 04        		.byte	0x4
 5412 03ba A40A      		.uleb128 .LVL105-.Ltext0
 5413 03bc F00A      		.uleb128 .LVL112-.Ltext0
 5414 03be 01        		.uleb128 0x1
 5415 03bf 52        		.byte	0x52
 5416 03c0 00        		.byte	0
 5417               	.LVUS46:
 5418 03c1 00        		.uleb128 .LVU372
 5419 03c2 00        		.uleb128 .LVU375
 5420 03c3 00        		.uleb128 .LVU375
 5421 03c4 00        		.uleb128 .LVU382
 5422 03c5 00        		.uleb128 .LVU382
 5423 03c6 00        		.uleb128 .LVU383
 5424 03c7 00        		.uleb128 .LVU407
 5425 03c8 00        		.uleb128 .LVU409
 5426 03c9 00        		.uleb128 .LVU409
 5427 03ca 00        		.uleb128 .LVU423
 5428               	.LLST46:
 5429 03cb 04        		.byte	0x4
 5430 03cc CE09      		.uleb128 .LVL98-.Ltext0
 5431 03ce DA09      		.uleb128 .LVL99-.Ltext0
 5432 03d0 0C        		.uleb128 0xc
 5433 03d1 91        		.byte	0x91
 5434 03d2 70        		.sleb128 -16
 5435 03d3 06        		.byte	0x6
 5436 03d4 33        		.byte	0x33
 5437 03d5 24        		.byte	0x24
 5438 03d6 03        		.byte	0x3
 5439 03d7 0000 0000 		.long	semaphore+4


 5440 03db 22        		.byte	0x22
 5441 03dc 9F        		.byte	0x9f
 5442 03dd 04        		.byte	0x4
 5443 03de DA09      		.uleb128 .LVL99-.Ltext0
 5444 03e0 EA09      		.uleb128 .LVL101-.Ltext0
 5445 03e2 01        		.uleb128 0x1
 5446 03e3 50        		.byte	0x50
 5447 03e4 04        		.byte	0x4
 5448 03e5 EA09      		.uleb128 .LVL101-.Ltext0
 5449 03e7 F809      		.uleb128 .LVL102-.Ltext0
 5450 03e9 01        		.uleb128 0x1
 5451 03ea 58        		.byte	0x58
 5452 03eb 04        		.byte	0x4
 5453 03ec A40A      		.uleb128 .LVL105-.Ltext0
 5454 03ee B00A      		.uleb128 .LVL106-.Ltext0
 5455 03f0 01        		.uleb128 0x1
 5456 03f1 50        		.byte	0x50
 5457 03f2 04        		.byte	0x4
 5458 03f3 B00A      		.uleb128 .LVL106-.Ltext0
 5459 03f5 F00A      		.uleb128 .LVL112-.Ltext0
 5460 03f7 0C        		.uleb128 0xc
 5461 03f8 91        		.byte	0x91
 5462 03f9 70        		.sleb128 -16
 5463 03fa 06        		.byte	0x6
 5464 03fb 33        		.byte	0x33
 5465 03fc 24        		.byte	0x24
 5466 03fd 03        		.byte	0x3
 5467 03fe 0000 0000 		.long	semaphore+4
 5468 0402 22        		.byte	0x22
 5469 0403 9F        		.byte	0x9f
 5470 0404 00        		.byte	0
 5471               	.LVUS47:
 5472 0405 00        		.uleb128 .LVU376
 5473 0406 00        		.uleb128 .LVU383
 5474 0407 00        		.uleb128 .LVU407
 5475 0408 01        		.uleb128 .LVU413
 5476 0409 01        		.uleb128 .LVU413
 5477 040a 00        		.uleb128 .LVU415
 5478 040b 00        		.uleb128 .LVU415
 5479 040c 00        		.uleb128 .LVU423
 5480               	.LLST47:
 5481 040d 04        		.byte	0x4
 5482 040e DE09      		.uleb128 .LVL100-.Ltext0
 5483 0410 F809      		.uleb128 .LVL102-.Ltext0
 5484 0412 01        		.uleb128 0x1
 5485 0413 51        		.byte	0x51
 5486 0414 04        		.byte	0x4
 5487 0415 A40A      		.uleb128 .LVL105-.Ltext0
 5488 0417 BE0A      		.uleb128 .LVL108-.Ltext0
 5489 0419 01        		.uleb128 0x1
 5490 041a 51        		.byte	0x51
 5491 041b 04        		.byte	0x4
 5492 041c BE0A      		.uleb128 .LVL108-.Ltext0
 5493 041e C60A      		.uleb128 .LVL109-.Ltext0
 5494 0420 01        		.uleb128 0x1
 5495 0421 50        		.byte	0x50
 5496 0422 04        		.byte	0x4


 5497 0423 C60A      		.uleb128 .LVL109-.Ltext0
 5498 0425 F00A      		.uleb128 .LVL112-.Ltext0
 5499 0427 01        		.uleb128 0x1
 5500 0428 51        		.byte	0x51
 5501 0429 00        		.byte	0
 5502               	.LVUS48:
 5503 042a 00        		.uleb128 .LVU410
 5504 042b 00        		.uleb128 .LVU415
 5505 042c 00        		.uleb128 .LVU415
 5506 042d 00        		.uleb128 .LVU416
 5507 042e 00        		.uleb128 .LVU416
 5508 042f 00        		.uleb128 .LVU422
 5509               	.LLST48:
 5510 0430 04        		.byte	0x4
 5511 0431 BC0A      		.uleb128 .LVL107-.Ltext0
 5512 0433 C60A      		.uleb128 .LVL109-.Ltext0
 5513 0435 01        		.uleb128 0x1
 5514 0436 50        		.byte	0x50
 5515 0437 04        		.byte	0x4
 5516 0438 C60A      		.uleb128 .LVL109-.Ltext0
 5517 043a D20A      		.uleb128 .LVL110-.Ltext0
 5518 043c 01        		.uleb128 0x1
 5519 043d 51        		.byte	0x51
 5520 043e 04        		.byte	0x4
 5521 043f D20A      		.uleb128 .LVL110-.Ltext0
 5522 0441 E20A      		.uleb128 .LVL111-.Ltext0
 5523 0443 01        		.uleb128 0x1
 5524 0444 50        		.byte	0x50
 5525 0445 00        		.byte	0
 5526               	.LVUS51:
 5527 0446 04        		.uleb128 .LVU387
 5528 0447 01        		.uleb128 .LVU400
 5529 0448 04        		.uleb128 .LVU427
 5530 0449 00        		.uleb128 0
 5531               	.LLST51:
 5532 044a 04        		.byte	0x4
 5533 044b F809      		.uleb128 .LVL102-.Ltext0
 5534 044d 960A      		.uleb128 .LVL104-.Ltext0
 5535 044f 06        		.uleb128 0x6
 5536 0450 03        		.byte	0x3
 5537 0451 0000 0000 		.long	ready
 5538 0455 9F        		.byte	0x9f
 5539 0456 04        		.byte	0x4
 5540 0457 F00A      		.uleb128 .LVL112-.Ltext0
 5541 0459 FA0A      		.uleb128 .LFE15-.Ltext0
 5542 045b 06        		.uleb128 0x6
 5543 045c 03        		.byte	0x3
 5544 045d 0000 0000 		.long	ready
 5545 0461 9F        		.byte	0x9f
 5546 0462 00        		.byte	0
 5547               	.LVUS52:
 5548 0463 01        		.uleb128 .LVU396
 5549 0464 00        		.uleb128 .LVU407
 5550               	.LLST52:
 5551 0465 04        		.byte	0x4
 5552 0466 820A      		.uleb128 .LVL103-.Ltext0
 5553 0468 A30A      		.uleb128 .LVL105-1-.Ltext0


 5554 046a 01        		.uleb128 0x1
 5555 046b 51        		.byte	0x51
 5556 046c 00        		.byte	0
 5557               	.LVUS54:
 5558 046d 01        		.uleb128 .LVU434
 5559 046e 00        		.uleb128 .LVU437
 5560 046f 00        		.uleb128 .LVU437
 5561 0470 00        		.uleb128 .LVU439
 5562 0471 00        		.uleb128 .LVU468
 5563 0472 00        		.uleb128 0
 5564               	.LLST54:
 5565 0473 04        		.byte	0x4
 5566 0474 FE0A      		.uleb128 .LVL114-.Ltext0
 5567 0476 8C0B      		.uleb128 .LVL115-.Ltext0
 5568 0478 0C        		.uleb128 0xc
 5569 0479 91        		.byte	0x91
 5570 047a 70        		.sleb128 -16
 5571 047b 06        		.byte	0x6
 5572 047c 33        		.byte	0x33
 5573 047d 24        		.byte	0x24
 5574 047e 03        		.byte	0x3
 5575 047f 0000 0000 		.long	semaphore+4
 5576 0483 22        		.byte	0x22
 5577 0484 9F        		.byte	0x9f
 5578 0485 04        		.byte	0x4
 5579 0486 8C0B      		.uleb128 .LVL115-.Ltext0
 5580 0488 980B      		.uleb128 .LVL116-.Ltext0
 5581 048a 01        		.uleb128 0x1
 5582 048b 58        		.byte	0x58
 5583 048c 04        		.byte	0x4
 5584 048d 840C      		.uleb128 .LVL125-.Ltext0
 5585 048f 980C      		.uleb128 .LFE16-.Ltext0
 5586 0491 01        		.uleb128 0x1
 5587 0492 58        		.byte	0x58
 5588 0493 00        		.byte	0
 5589               	.LVUS55:
 5590 0494 01        		.uleb128 .LVU469
 5591 0495 00        		.uleb128 0
 5592               	.LLST55:
 5593 0496 04        		.byte	0x4
 5594 0497 840C      		.uleb128 .LVL125-.Ltext0
 5595 0499 980C      		.uleb128 .LFE16-.Ltext0
 5596 049b 01        		.uleb128 0x1
 5597 049c 52        		.byte	0x52
 5598 049d 00        		.byte	0
 5599               	.LVUS57:
 5600 049e 00        		.uleb128 .LVU439
 5601 049f 00        		.uleb128 .LVU449
 5602 04a0 00        		.uleb128 .LVU451
 5603 04a1 00        		.uleb128 .LVU466
 5604               	.LLST57:
 5605 04a2 04        		.byte	0x4
 5606 04a3 980B      		.uleb128 .LVL116-.Ltext0
 5607 04a5 B60B      		.uleb128 .LVL118-.Ltext0
 5608 04a7 01        		.uleb128 0x1
 5609 04a8 52        		.byte	0x52
 5610 04a9 04        		.byte	0x4


 5611 04aa BC0B      		.uleb128 .LVL119-.Ltext0
 5612 04ac FE0B      		.uleb128 .LVL124-.Ltext0
 5613 04ae 01        		.uleb128 0x1
 5614 04af 52        		.byte	0x52
 5615 04b0 00        		.byte	0
 5616               	.LVUS58:
 5617 04b1 00        		.uleb128 .LVU439
 5618 04b2 00        		.uleb128 .LVU449
 5619 04b3 00        		.uleb128 .LVU451
 5620 04b4 00        		.uleb128 .LVU466
 5621               	.LLST58:
 5622 04b5 04        		.byte	0x4
 5623 04b6 980B      		.uleb128 .LVL116-.Ltext0
 5624 04b8 B60B      		.uleb128 .LVL118-.Ltext0
 5625 04ba 06        		.uleb128 0x6
 5626 04bb 03        		.byte	0x3
 5627 04bc 0000 0000 		.long	ready
 5628 04c0 9F        		.byte	0x9f
 5629 04c1 04        		.byte	0x4
 5630 04c2 BC0B      		.uleb128 .LVL119-.Ltext0
 5631 04c4 FE0B      		.uleb128 .LVL124-.Ltext0
 5632 04c6 06        		.uleb128 0x6
 5633 04c7 03        		.byte	0x3
 5634 04c8 0000 0000 		.long	ready
 5635 04cc 9F        		.byte	0x9f
 5636 04cd 00        		.byte	0
 5637               	.LVUS59:
 5638 04ce 00        		.uleb128 .LVU443
 5639 04cf 00        		.uleb128 .LVU449
 5640 04d0 00        		.uleb128 .LVU451
 5641 04d1 01        		.uleb128 .LVU456
 5642 04d2 01        		.uleb128 .LVU456
 5643 04d3 00        		.uleb128 .LVU459
 5644 04d4 00        		.uleb128 .LVU459
 5645 04d5 00        		.uleb128 .LVU466
 5646               	.LLST59:
 5647 04d6 04        		.byte	0x4
 5648 04d7 9E0B      		.uleb128 .LVL117-.Ltext0
 5649 04d9 B60B      		.uleb128 .LVL118-.Ltext0
 5650 04db 01        		.uleb128 0x1
 5651 04dc 58        		.byte	0x58
 5652 04dd 04        		.byte	0x4
 5653 04de BC0B      		.uleb128 .LVL119-.Ltext0
 5654 04e0 D00B      		.uleb128 .LVL121-.Ltext0
 5655 04e2 01        		.uleb128 0x1
 5656 04e3 58        		.byte	0x58
 5657 04e4 04        		.byte	0x4
 5658 04e5 D00B      		.uleb128 .LVL121-.Ltext0
 5659 04e7 D80B      		.uleb128 .LVL122-.Ltext0
 5660 04e9 01        		.uleb128 0x1
 5661 04ea 50        		.byte	0x50
 5662 04eb 04        		.byte	0x4
 5663 04ec D80B      		.uleb128 .LVL122-.Ltext0
 5664 04ee FE0B      		.uleb128 .LVL124-.Ltext0
 5665 04f0 01        		.uleb128 0x1
 5666 04f1 58        		.byte	0x58
 5667 04f2 00        		.byte	0


 5668               	.LVUS60:
 5669 04f3 00        		.uleb128 .LVU453
 5670 04f4 00        		.uleb128 .LVU459
 5671 04f5 00        		.uleb128 .LVU459
 5672 04f6 00        		.uleb128 .LVU460
 5673 04f7 00        		.uleb128 .LVU460
 5674 04f8 00        		.uleb128 .LVU466
 5675               	.LLST60:
 5676 04f9 04        		.byte	0x4
 5677 04fa CE0B      		.uleb128 .LVL120-.Ltext0
 5678 04fc D80B      		.uleb128 .LVL122-.Ltext0
 5679 04fe 01        		.uleb128 0x1
 5680 04ff 50        		.byte	0x50
 5681 0500 04        		.byte	0x4
 5682 0501 D80B      		.uleb128 .LVL122-.Ltext0
 5683 0503 E40B      		.uleb128 .LVL123-.Ltext0
 5684 0505 01        		.uleb128 0x1
 5685 0506 58        		.byte	0x58
 5686 0507 04        		.byte	0x4
 5687 0508 E40B      		.uleb128 .LVL123-.Ltext0
 5688 050a FE0B      		.uleb128 .LVL124-.Ltext0
 5689 050c 01        		.uleb128 0x1
 5690 050d 50        		.byte	0x50
 5691 050e 00        		.byte	0
 5692               	.Ldebug_loc3:
 5693               		.section	.debug_aranges,"",@progbits
 5694 0000 0000 001C 		.long	0x1c
 5695 0004 0002      		.word	0x2
 5696 0006 0000 0000 		.long	.Ldebug_info0
 5697 000a 04        		.byte	0x4
 5698 000b 00        		.byte	0
 5699 000c 0000      		.word	0
 5700 000e 0000      		.word	0
 5701 0010 0000 0000 		.long	.Ltext0
 5702 0014 0000 0618 		.long	.Letext0-.Ltext0
 5703 0018 0000 0000 		.long	0
 5704 001c 0000 0000 		.long	0
 5705               		.section	.debug_rnglists,"",@progbits
 5706               	.Ldebug_ranges0:
 5707 0000 0000 009C 		.long	.Ldebug_ranges3-.Ldebug_ranges2
 5708               	.Ldebug_ranges2:
 5709 0004 0005      		.word	0x5
 5710 0006 04        		.byte	0x4
 5711 0007 00        		.byte	0
 5712 0008 0000 0000 		.long	0
 5713               	.LLRL9:
 5714 000c 04        		.byte	0x4
 5715 000d 8603      		.uleb128 .LBB21-.Ltext0
 5716 000f D803      		.uleb128 .LBE21-.Ltext0
 5717 0011 04        		.byte	0x4
 5718 0012 DE03      		.uleb128 .LBB25-.Ltext0
 5719 0014 F203      		.uleb128 .LBE25-.Ltext0
 5720 0016 00        		.byte	0
 5721               	.LLRL21:
 5722 0017 04        		.byte	0x4
 5723 0018 BC06      		.uleb128 .LBB42-.Ltext0
 5724 001a DA07      		.uleb128 .LBE42-.Ltext0


 5725 001c 04        		.byte	0x4
 5726 001d DC07      		.uleb128 .LBB59-.Ltext0
 5727 001f E207      		.uleb128 .LBE59-.Ltext0
 5728 0021 00        		.byte	0
 5729               	.LLRL23:
 5730 0022 04        		.byte	0x4
 5731 0023 C206      		.uleb128 .LBB44-.Ltext0
 5732 0025 E206      		.uleb128 .LBE44-.Ltext0
 5733 0027 04        		.byte	0x4
 5734 0028 EC06      		.uleb128 .LBB56-.Ltext0
 5735 002a B807      		.uleb128 .LBE56-.Ltext0
 5736 002c 00        		.byte	0
 5737               	.LLRL28:
 5738 002d 04        		.byte	0x4
 5739 002e E206      		.uleb128 .LBB48-.Ltext0
 5740 0030 EC06      		.uleb128 .LBE48-.Ltext0
 5741 0032 04        		.byte	0x4
 5742 0033 B807      		.uleb128 .LBB57-.Ltext0
 5743 0035 DA07      		.uleb128 .LBE57-.Ltext0
 5744 0037 00        		.byte	0
 5745               	.LLRL29:
 5746 0038 04        		.byte	0x4
 5747 0039 E206      		.uleb128 .LBB50-.Ltext0
 5748 003b EA06      		.uleb128 .LBE50-.Ltext0
 5749 003d 04        		.byte	0x4
 5750 003e B807      		.uleb128 .LBB54-.Ltext0
 5751 0040 D407      		.uleb128 .LBE54-.Ltext0
 5752 0042 00        		.byte	0
 5753               	.LLRL32:
 5754 0043 04        		.byte	0x4
 5755 0044 8408      		.uleb128 .LBB68-.Ltext0
 5756 0046 B208      		.uleb128 .LBE68-.Ltext0
 5757 0048 04        		.byte	0x4
 5758 0049 B808      		.uleb128 .LBB79-.Ltext0
 5759 004b 9A09      		.uleb128 .LBE79-.Ltext0
 5760 004d 00        		.byte	0
 5761               	.LLRL34:
 5762 004e 04        		.byte	0x4
 5763 004f 8408      		.uleb128 .LBB69-.Ltext0
 5764 0051 9408      		.uleb128 .LBE69-.Ltext0
 5765 0053 04        		.byte	0x4
 5766 0054 B808      		.uleb128 .LBB77-.Ltext0
 5767 0056 CA08      		.uleb128 .LBE77-.Ltext0
 5768 0058 00        		.byte	0
 5769               	.LLRL37:
 5770 0059 04        		.byte	0x4
 5771 005a 9408      		.uleb128 .LBB73-.Ltext0
 5772 005c B208      		.uleb128 .LBE73-.Ltext0
 5773 005e 04        		.byte	0x4
 5774 005f CA08      		.uleb128 .LBB78-.Ltext0
 5775 0061 9A09      		.uleb128 .LBE78-.Ltext0
 5776 0063 00        		.byte	0
 5777               	.LLRL44:
 5778 0064 04        		.byte	0x4
 5779 0065 CE09      		.uleb128 .LBB94-.Ltext0
 5780 0067 F809      		.uleb128 .LBE94-.Ltext0
 5781 0069 04        		.byte	0x4


 5782 006a A40A      		.uleb128 .LBB108-.Ltext0
 5783 006c F00A      		.uleb128 .LBE108-.Ltext0
 5784 006e 00        		.byte	0
 5785               	.LLRL49:
 5786 006f 04        		.byte	0x4
 5787 0070 F809      		.uleb128 .LBB98-.Ltext0
 5788 0072 9C0A      		.uleb128 .LBE98-.Ltext0
 5789 0074 04        		.byte	0x4
 5790 0075 F00A      		.uleb128 .LBB109-.Ltext0
 5791 0077 FA0A      		.uleb128 .LBE109-.Ltext0
 5792 0079 00        		.byte	0
 5793               	.LLRL50:
 5794 007a 04        		.byte	0x4
 5795 007b F809      		.uleb128 .LBB100-.Ltext0
 5796 007d 800A      		.uleb128 .LBE100-.Ltext0
 5797 007f 04        		.byte	0x4
 5798 0080 820A      		.uleb128 .LBB105-.Ltext0
 5799 0082 960A      		.uleb128 .LBE105-.Ltext0
 5800 0084 04        		.byte	0x4
 5801 0085 F00A      		.uleb128 .LBB106-.Ltext0
 5802 0087 FA0A      		.uleb128 .LBE106-.Ltext0
 5803 0089 00        		.byte	0
 5804               	.LLRL53:
 5805 008a 04        		.byte	0x4
 5806 008b FE0A      		.uleb128 .LBB116-.Ltext0
 5807 008d 980B      		.uleb128 .LBE116-.Ltext0
 5808 008f 04        		.byte	0x4
 5809 0090 840C      		.uleb128 .LBB125-.Ltext0
 5810 0092 980C      		.uleb128 .LBE125-.Ltext0
 5811 0094 00        		.byte	0
 5812               	.LLRL56:
 5813 0095 04        		.byte	0x4
 5814 0096 980B      		.uleb128 .LBB120-.Ltext0
 5815 0098 B60B      		.uleb128 .LBE120-.Ltext0
 5816 009a 04        		.byte	0x4
 5817 009b BC0B      		.uleb128 .LBB124-.Ltext0
 5818 009d FE0B      		.uleb128 .LBE124-.Ltext0
 5819 009f 00        		.byte	0
 5820               	.Ldebug_ranges3:
 5821               		.section	.debug_line,"",@progbits
 5822               	.Ldebug_line0:
 5823 0000 0000 0806 		.section	.debug_str,"MS",@progbits,1
 5823      0003 0000 
 5823      00EA 0201 
 5823      FB0E 0D00 
 5823      0101 0101 
 5824               	.LASF143:
 5825 0000 696E 6B65 		.string	"inkey"
 5825      7900 
 5826               	.LASF99:
 5827 0006 5441 534B 		.string	"TASK_ID_TYPE"
 5827      5F49 445F 
 5827      5459 5045 
 5827      00
 5828               	.LASF122:
 5829 0013 7377 7463 		.string	"swtch"
 5829      6800 


 5830               	.LASF104:
 5831 0019 7373 7461 		.string	"sstack"
 5831      636B 00
 5832               	.LASF88:
 5833 0020 5F77 6374 		.string	"_wctomb_state"
 5833      6F6D 625F 
 5833      7374 6174 
 5833      6500 
 5834               	.LASF115:
 5835 002e 7374 6163 		.string	"stacks"
 5835      6B73 00
 5836               	.LASF85:
 5837 0035 5F72 3438 		.string	"_r48"
 5837      00
 5838               	.LASF144:
 5839 003a 474E 5520 		.string	"GNU C17 11.4.0 -mcpu=68000 -msoft-float -g -O2 -fomit-frame-pointer"
 5839      4331 3720 
 5839      3131 2E34 
 5839      2E30 202D 
 5839      6D63 7075 
 5840               	.LASF131:
 5841 007e 765F 626F 		.string	"v_body"
 5841      6479 00
 5842               	.LASF90:
 5843 0085 5F73 6967 		.string	"_signal_buf"
 5843      6E61 6C5F 
 5843      6275 6600 
 5844               	.LASF9:
 5845 0091 756E 7369 		.string	"unsigned int"
 5845      676E 6564 
 5845      2069 6E74 
 5845      00
 5846               	.LASF110:
 5847 009e 6E65 7874 		.string	"next"
 5847      00
 5848               	.LASF43:
 5849 00a3 5F6C 6266 		.string	"_lbfsize"
 5849      7369 7A65 
 5849      00
 5850               	.LASF41:
 5851 00ac 5F66 6C61 		.string	"_flags"
 5851      6773 00
 5852               	.LASF58:
 5853 00b3 5F65 7272 		.string	"_errno"
 5853      6E6F 00
 5854               	.LASF124:
 5855 00ba 696E 6974 		.string	"init_timer"
 5855      5F74 696D 
 5855      6572 00
 5856               	.LASF20:
 5857 00c5 5F4C 4F43 		.string	"_LOCK_RECURSIVE_T"
 5857      4B5F 5245 
 5857      4355 5253 
 5857      4956 455F 
 5857      5400 
 5858               	.LASF45:
 5859 00d7 5F72 6561 		.string	"_read"


 5859      6400 
 5860               	.LASF92:
 5861 00dd 5F6D 6272 		.string	"_mbrlen_state"
 5861      6C65 6E5F 
 5861      7374 6174 
 5861      6500 
 5862               	.LASF60:
 5863 00eb 5F73 7464 		.string	"_stdout"
 5863      6F75 7400 
 5864               	.LASF12:
 5865 00f3 5F66 706F 		.string	"_fpos_t"
 5865      735F 7400 
 5866               	.LASF44:
 5867 00fb 5F63 6F6F 		.string	"_cookie"
 5867      6B69 6500 
 5868               	.LASF26:
 5869 0103 5F42 6967 		.string	"_Bigint"
 5869      696E 7400 
 5870               	.LASF34:
 5871 010b 5F5F 746D 		.string	"__tm_wday"
 5871      5F77 6461 
 5871      7900 
 5872               	.LASF66:
 5873 0115 5F72 6573 		.string	"_result"
 5873      756C 7400 
 5874               	.LASF30:
 5875 011d 5F5F 746D 		.string	"__tm_hour"
 5875      5F68 6F75 
 5875      7200 
 5876               	.LASF103:
 5877 0127 7573 7461 		.string	"ustack"
 5877      636B 00
 5878               	.LASF16:
 5879 012e 5F5F 636F 		.string	"__count"
 5879      756E 7400 
 5880               	.LASF123:
 5881 0136 6669 7273 		.string	"first_task"
 5881      745F 7461 
 5881      736B 00
 5882               	.LASF29:
 5883 0141 5F5F 746D 		.string	"__tm_min"
 5883      5F6D 696E 
 5883      00
 5884               	.LASF100:
 5885 014a 636F 756E 		.string	"count"
 5885      7400 
 5886               	.LASF76:
 5887 0150 5F72 616E 		.string	"_rand48"
 5887      6434 3800 
 5888               	.LASF67:
 5889 0158 5F72 6573 		.string	"_result_k"
 5889      756C 745F 
 5889      6B00 
 5890               	.LASF7:
 5891 0162 6C6F 6E67 		.string	"long long unsigned int"
 5891      206C 6F6E 
 5891      6720 756E 


 5891      7369 676E 
 5891      6564 2069 
 5892               	.LASF81:
 5893 0179 5F61 7363 		.string	"_asctime_buf"
 5893      7469 6D65 
 5893      5F62 7566 
 5893      00
 5894               	.LASF40:
 5895 0186 5F5F 7346 		.string	"__sFILE"
 5895      494C 4500 
 5896               	.LASF25:
 5897 018e 5F77 6473 		.string	"_wds"
 5897      00
 5898               	.LASF75:
 5899 0193 5F5F 4649 		.string	"__FILE"
 5899      4C45 00
 5900               	.LASF52:
 5901 019a 5F6F 6666 		.string	"_offset"
 5901      7365 7400 
 5902               	.LASF63:
 5903 01a2 5F65 6D65 		.string	"_emergency"
 5903      7267 656E 
 5903      6379 00
 5904               	.LASF111:
 5905 01ad 5443 425F 		.string	"TCB_TYPE"
 5905      5459 5045 
 5905      00
 5906               	.LASF113:
 5907 01b6 636F 6D69 		.string	"comin"
 5907      6E00 
 5908               	.LASF116:
 5909 01bc 7461 736B 		.string	"task_tab"
 5909      5F74 6162 
 5909      00
 5910               	.LASF28:
 5911 01c5 5F5F 746D 		.string	"__tm_sec"
 5911      5F73 6563 
 5911      00
 5912               	.LASF121:
 5913 01ce 656D 7074 		.string	"empty_task_tab"
 5913      795F 7461 
 5913      736B 5F74 
 5913      6162 00
 5914               	.LASF35:
 5915 01dd 5F5F 746D 		.string	"__tm_yday"
 5915      5F79 6461 
 5915      7900 
 5916               	.LASF62:
 5917 01e7 5F69 6E63 		.string	"_inc"
 5917      00
 5918               	.LASF128:
 5919 01ec 5F42 6F6F 		.string	"_Bool"
 5919      6C00 
 5920               	.LASF129:
 5921 01f2 7761 6B65 		.string	"wakeup"
 5921      7570 00
 5922               	.LASF22:


 5923 01f9 5F6E 6578 		.string	"_next"
 5923      7400 
 5924               	.LASF108:
 5925 01ff 7072 696F 		.string	"priority"
 5925      7269 7479 
 5925      00
 5926               	.LASF94:
 5927 0208 5F6D 6273 		.string	"_mbsrtowcs_state"
 5927      7274 6F77 
 5927      6373 5F73 
 5927      7461 7465 
 5927      00
 5928               	.LASF17:
 5929 0219 5F5F 7661 		.string	"__value"
 5929      6C75 6500 
 5930               	.LASF68:
 5931 0221 5F70 3573 		.string	"_p5s"
 5931      00
 5932               	.LASF118:
 5933 0226 6E65 7874 		.string	"next_task"
 5933      5F74 6173 
 5933      6B00 
 5934               	.LASF96:
 5935 0230 5F77 6373 		.string	"_wcsrtombs_state"
 5935      7274 6F6D 
 5935      6273 5F73 
 5935      7461 7465 
 5935      00
 5936               	.LASF145:
 5937 0241 6D74 6B5F 		.string	"mtk_c.c"
 5937      632E 6300 
 5938               	.LASF74:
 5939 0249 6368 6172 		.string	"char"
 5939      00
 5940               	.LASF31:
 5941 024e 5F5F 746D 		.string	"__tm_mday"
 5941      5F6D 6461 
 5941      7900 
 5942               	.LASF73:
 5943 0258 5F73 6967 		.string	"_sig_func"
 5943      5F66 756E 
 5943      6300 
 5944               	.LASF93:
 5945 0262 5F6D 6272 		.string	"_mbrtowc_state"
 5945      746F 7763 
 5945      5F73 7461 
 5945      7465 00
 5946               	.LASF112:
 5947 0271 636F 6D6F 		.string	"comout"
 5947      7574 00
 5948               	.LASF21:
 5949 0278 5F66 6C6F 		.string	"_flock_t"
 5949      636B 5F74 
 5949      00
 5950               	.LASF14:
 5951 0281 5F5F 7763 		.string	"__wch"
 5951      6800 


 5952               	.LASF132:
 5953 0287 705F 626F 		.string	"p_body"
 5953      6479 00
 5954               	.LASF109:
 5955 028e 7374 6174 		.string	"status"
 5955      7573 00
 5956               	.LASF48:
 5957 0295 5F63 6C6F 		.string	"_close"
 5957      7365 00
 5958               	.LASF105:
 5959 029c 5354 4143 		.string	"STACK_TYPE"
 5959      4B5F 5459 
 5959      5045 00
 5960               	.LASF136:
 5961 02a7 7372 5F73 		.string	"sr_ssp"
 5961      7370 00
 5962               	.LASF117:
 5963 02ae 6375 7272 		.string	"curr_task"
 5963      5F74 6173 
 5963      6B00 
 5964               	.LASF59:
 5965 02b8 5F73 7464 		.string	"_stdin"
 5965      696E 00
 5966               	.LASF83:
 5967 02bf 5F67 616D 		.string	"_gamma_signgam"
 5967      6D61 5F73 
 5967      6967 6E67 
 5967      616D 00
 5968               	.LASF6:
 5969 02ce 6C6F 6E67 		.string	"long long int"
 5969      206C 6F6E 
 5969      6720 696E 
 5969      7400 
 5970               	.LASF139:
 5971 02dc 6265 6769 		.string	"begin_sch"
 5971      6E5F 7363 
 5971      6800 
 5972               	.LASF38:
 5973 02e6 5F62 6173 		.string	"_base"
 5973      6500 
 5974               	.LASF69:
 5975 02ec 5F66 7265 		.string	"_freelist"
 5975      656C 6973 
 5975      7400 
 5976               	.LASF78:
 5977 02f6 5F6D 756C 		.string	"_mult"
 5977      7400 
 5978               	.LASF19:
 5979 02fc 5F5F 554C 		.string	"__ULong"
 5979      6F6E 6700 
 5980               	.LASF95:
 5981 0304 5F77 6372 		.string	"_wcrtomb_state"
 5981      746F 6D62 
 5981      5F73 7461 
 5981      7465 00
 5982               	.LASF42:
 5983 0313 5F66 696C 		.string	"_file"


 5983      6500 
 5984               	.LASF120:
 5985 0319 7265 6164 		.string	"ready"
 5985      7900 
 5986               	.LASF149:
 5987 031f 6D65 6D73 		.string	"memset"
 5987      6574 00
 5988               	.LASF65:
 5989 0326 5F5F 636C 		.string	"__cleanup"
 5989      6561 6E75 
 5989      7000 
 5990               	.LASF86:
 5991 0330 5F6D 626C 		.string	"_mblen_state"
 5991      656E 5F73 
 5991      7461 7465 
 5991      00
 5992               	.LASF18:
 5993 033d 5F6D 6273 		.string	"_mbstate_t"
 5993      7461 7465 
 5993      5F74 00
 5994               	.LASF127:
 5995 0348 696E 6B65 		.string	"inkeyw"
 5995      7977 00
 5996               	.LASF36:
 5997 034f 5F5F 746D 		.string	"__tm_isdst"
 5997      5F69 7364 
 5997      7374 00
 5998               	.LASF97:
 5999 035a 5F68 5F65 		.string	"_h_errno"
 5999      7272 6E6F 
 5999      00
 6000               	.LASF126:
 6001 0363 6664 6F70 		.string	"fdopen"
 6001      656E 00
 6002               	.LASF141:
 6003 036a 696E 6974 		.string	"init_kernel"
 6003      5F6B 6572 
 6003      6E65 6C00 
 6004               	.LASF138:
 6005 0376 6E65 775F 		.string	"new_task_addr"
 6005      7461 736B 
 6005      5F61 6464 
 6005      7200 
 6006               	.LASF32:
 6007 0384 5F5F 746D 		.string	"__tm_mon"
 6007      5F6D 6F6E 
 6007      00
 6008               	.LASF8:
 6009 038d 6C6F 6E67 		.string	"long double"
 6009      2064 6F75 
 6009      626C 6500 
 6010               	.LASF140:
 6011 0399 696E 6974 		.string	"init_io"
 6011      5F69 6F00 
 6012               	.LASF46:
 6013 03a1 5F77 7269 		.string	"_write"
 6013      7465 00


 6014               	.LASF102:
 6015 03a8 5345 4D41 		.string	"SEMAPHORE_TYPE"
 6015      5048 4F52 
 6015      455F 5459 
 6015      5045 00
 6016               	.LASF55:
 6017 03b7 5F6D 6273 		.string	"_mbstate"
 6017      7461 7465 
 6017      00
 6018               	.LASF2:
 6019 03c0 7368 6F72 		.string	"short int"
 6019      7420 696E 
 6019      7400 
 6020               	.LASF137:
 6021 03ca 7365 745F 		.string	"set_task"
 6021      7461 736B 
 6021      00
 6022               	.LASF4:
 6023 03d3 6C6F 6E67 		.string	"long int"
 6023      2069 6E74 
 6023      00
 6024               	.LASF24:
 6025 03dc 5F73 6967 		.string	"_sign"
 6025      6E00 
 6026               	.LASF53:
 6027 03e2 5F64 6174 		.string	"_data"
 6027      6100 
 6028               	.LASF106:
 6029 03e8 7461 736B 		.string	"task_addr"
 6029      5F61 6464 
 6029      7200 
 6030               	.LASF15:
 6031 03f2 5F5F 7763 		.string	"__wchb"
 6031      6862 00
 6032               	.LASF119:
 6033 03f9 6E65 775F 		.string	"new_task"
 6033      7461 736B 
 6033      00
 6034               	.LASF33:
 6035 0402 5F5F 746D 		.string	"__tm_year"
 6035      5F79 6561 
 6035      7200 
 6036               	.LASF82:
 6037 040c 5F6C 6F63 		.string	"_localtime_buf"
 6037      616C 7469 
 6037      6D65 5F62 
 6037      7566 00
 6038               	.LASF72:
 6039 041b 5F6E 6577 		.string	"_new"
 6039      00
 6040               	.LASF101:
 6041 0420 7461 736B 		.string	"task_list"
 6041      5F6C 6973 
 6041      7400 
 6042               	.LASF70:
 6043 042a 5F63 7674 		.string	"_cvtlen"
 6043      6C65 6E00 


 6044               	.LASF23:
 6045 0432 5F6D 6178 		.string	"_maxwds"
 6045      7764 7300 
 6046               	.LASF89:
 6047 043a 5F6C 3634 		.string	"_l64a_buf"
 6047      615F 6275 
 6047      6600 
 6048               	.LASF114:
 6049 0444 7365 6D61 		.string	"semaphore"
 6049      7068 6F72 
 6049      6500 
 6050               	.LASF133:
 6051 044e 7265 6D6F 		.string	"removeq"
 6051      7665 7100 
 6052               	.LASF150:
 6053 0456 5F5F 6275 		.string	"__builtin_memset"
 6053      696C 7469 
 6053      6E5F 6D65 
 6053      6D73 6574 
 6053      00
 6054               	.LASF51:
 6055 0467 5F62 6C6B 		.string	"_blksize"
 6055      7369 7A65 
 6055      00
 6056               	.LASF27:
 6057 0470 5F5F 746D 		.string	"__tm"
 6057      00
 6058               	.LASF54:
 6059 0475 5F6C 6F63 		.string	"_lock"
 6059      6B00 
 6060               	.LASF125:
 6061 047b 7076 5F68 		.string	"pv_handler"
 6061      616E 646C 
 6061      6572 00
 6062               	.LASF5:
 6063 0486 6C6F 6E67 		.string	"long unsigned int"
 6063      2075 6E73 
 6063      6967 6E65 
 6063      6420 696E 
 6063      7400 
 6064               	.LASF10:
 6065 0498 7769 6E74 		.string	"wint_t"
 6065      5F74 00
 6066               	.LASF71:
 6067 049f 5F63 7674 		.string	"_cvtbuf"
 6067      6275 6600 
 6068               	.LASF1:
 6069 04a7 756E 7369 		.string	"unsigned char"
 6069      676E 6564 
 6069      2063 6861 
 6069      7200 
 6070               	.LASF91:
 6071 04b5 5F67 6574 		.string	"_getdate_err"
 6071      6461 7465 
 6071      5F65 7272 
 6071      00
 6072               	.LASF148:


 6073 04c2 7363 6865 		.string	"sched"
 6073      6400 
 6074               	.LASF79:
 6075 04c8 5F61 6464 		.string	"_add"
 6075      00
 6076               	.LASF134:
 6077 04cd 6164 6471 		.string	"addq"
 6077      00
 6078               	.LASF142:
 6079 04d2 6663 6E74 		.string	"fcntl"
 6079      6C00 
 6080               	.LASF130:
 6081 04d8 736C 6565 		.string	"sleep"
 6081      7000 
 6082               	.LASF37:
 6083 04de 5F5F 7362 		.string	"__sbuf"
 6083      7566 00
 6084               	.LASF107:
 6085 04e5 7374 6163 		.string	"stack_ptr"
 6085      6B5F 7074 
 6085      7200 
 6086               	.LASF135:
 6087 04ef 696E 6974 		.string	"init_stack"
 6087      5F73 7461 
 6087      636B 00
 6088               	.LASF80:
 6089 04fa 5F73 7472 		.string	"_strtok_last"
 6089      746F 6B5F 
 6089      6C61 7374 
 6089      00
 6090               	.LASF87:
 6091 0507 5F6D 6274 		.string	"_mbtowc_state"
 6091      6F77 635F 
 6091      7374 6174 
 6091      6500 
 6092               	.LASF64:
 6093 0515 5F6C 6F63 		.string	"_locale"
 6093      616C 6500 
 6094               	.LASF13:
 6095 051d 5F73 7369 		.string	"_ssize_t"
 6095      7A65 5F74 
 6095      00
 6096               	.LASF0:
 6097 0526 7369 676E 		.string	"signed char"
 6097      6564 2063 
 6097      6861 7200 
 6098               	.LASF57:
 6099 0532 5F72 6565 		.string	"_reent"
 6099      6E74 00
 6100               	.LASF3:
 6101 0539 7368 6F72 		.string	"short unsigned int"
 6101      7420 756E 
 6101      7369 676E 
 6101      6564 2069 
 6101      6E74 00
 6102               	.LASF146:
 6103 054c 2F68 6F6D 		.string	"/home/students/5443962251"


 6103      652F 7374 
 6103      7564 656E 
 6103      7473 2F35 
 6103      3434 3339 
 6104               	.LASF39:
 6105 0566 5F73 697A 		.string	"_size"
 6105      6500 
 6106               	.LASF11:
 6107 056c 5F6F 6666 		.string	"_off_t"
 6107      5F74 00
 6108               	.LASF50:
 6109 0573 5F6E 6275 		.string	"_nbuf"
 6109      6600 
 6110               	.LASF98:
 6111 0579 4649 4C45 		.string	"FILE"
 6111      00
 6112               	.LASF56:
 6113 057e 5F66 6C61 		.string	"_flags2"
 6113      6773 3200 
 6114               	.LASF77:
 6115 0586 5F73 6565 		.string	"_seed"
 6115      6400 
 6116               	.LASF84:
 6117 058c 5F72 616E 		.string	"_rand_next"
 6117      645F 6E65 
 6117      7874 00
 6118               	.LASF147:
 6119 0597 5F5F 6C6F 		.string	"__locale_t"
 6119      6361 6C65 
 6119      5F74 00
 6120               	.LASF47:
 6121 05a2 5F73 6565 		.string	"_seek"
 6121      6B00 
 6122               	.LASF61:
 6123 05a8 5F73 7464 		.string	"_stderr"
 6123      6572 7200 
 6124               	.LASF49:
 6125 05b0 5F75 6275 		.string	"_ubuf"
 6125      6600 
 6126               		.ident	"GCC: (GNU) 11.4.0"




   1               	.global outbyte
   2               	
   3               	.text
   4               	.even
   5               	
   6               	outbyte:                            | void outbyte(int ch, char c)
   7 0000 13EF 000B 	    move.b  11(%sp), BUF_OUTBYTE    | get the second arg (c)
   7      0000 0000 
   8 0008 48E7 F000 	    movem.l %d0-%d3, -(%sp)
   9               	outbyte_start:
  10 000c 7002      	    move.l	#2, %d0             | PUTSTRING
  11 000e 222F 0014 	    move.l  20(%sp), %d1            | get the first arg (ch)
  12 0012 243C 0000 	    move.l	#BUF_OUTBYTE, %d2
  12      0000 
  13 0018 7601      	    move.l	#1, %d3
  14 001a 4E40      	    trap	#0
  15               	
  16 001c 0C00 0001 	    cmpi.b	#1, %d0
  17 0020 6600 FFEA 	    bne     outbyte_start
  18               	
  19 0024 4CDF 000F 	    movem.l (%sp)+, %d0-%d3
  20 0028 4E75      	    rts
  21               	
  22               	.section .bss
  23 0000 00        	BUF_OUTBYTE:    .ds.b 1
  24 0001 00        	    .even




   1               	#NO_APP
   2               		.file	"test3.c"
   3               		.text
   4               	.Ltext0:
   5               		.cfi_sections	.debug_frame
   6               		.align	2
   7               		.globl	fast_printf
   8               		.type	fast_printf, @function
   9               	fast_printf:
  10               	.LVL0:
  11               	.LFB3:
  12               		.file 1 "test3.c"
   1:test3.c       **** #include <stdarg.h>
   2:test3.c       **** #include <stdio.h>
   3:test3.c       **** #include <stdlib.h>
   4:test3.c       **** #include <stdbool.h>
   5:test3.c       **** #include <string.h>
   6:test3.c       **** #include "mtk_c.h"
   7:test3.c       **** 
   8:test3.c       **** // Control Characters
   9:test3.c       **** #define BACKSPACE "\x7f"           // Backspace character
  10:test3.c       **** #define ENTER "\x0d"               // Enter/Return character
  11:test3.c       **** #define ESC "\x1b"                 // Escape character
  12:test3.c       **** 
  13:test3.c       **** // Cursor Control
  14:test3.c       **** #define LOCATEHOME ESC "[H"        // Move cursor to the home position
  15:test3.c       **** #define LOCATECURSOR ESC "[%d;%df" // Move cursor to a specific position
  16:test3.c       **** #define CURSORMOVE ESC "[%d;%dH"   // Move cursor to row %d, column %d
  17:test3.c       **** #define CURSORMOVENUP ESC "[%dA"   // Move cursor up by %d lines
  18:test3.c       **** #define CURSORMOVENDOWN ESC "[%dB" // Move cursor down by %d lines
  19:test3.c       **** #define CURSORMOVENRIGHT ESC "[%dC"// Move cursor right by %d columns
  20:test3.c       **** #define CURSORMOVENLEFT ESC "[%dD" // Move cursor left by %d columns
  21:test3.c       **** #define CURSORINVISIBLE ESC "[?25l"// Make cursor invisible
  22:test3.c       **** #define CURSORVISIBLE ESC "[?25h"  // Make cursor visible
  23:test3.c       **** #define SAVECURSORLOC ESC "7"      // Save current cursor position
  24:test3.c       **** #define RETCURSORLOC ESC "8"       // Restore saved cursor position
  25:test3.c       **** 
  26:test3.c       **** // Screen Control
  27:test3.c       **** #define SETSCREENSIZE ESC "[8;%d;%dt" // Set screen size (rows and columns)
  28:test3.c       **** #define CLEARDISPLAY ESC "[H" ESC "[2J" // Clear entire screen and move cursor to home
  29:test3.c       **** #define DELETELINEAFTERCURSOR ESC "[0K" // Delete line content after cursor
  30:test3.c       **** #define DELETELINEBEFORECURSOR ESC "[1K" // Delete line content before cursor
  31:test3.c       **** #define DELETELINEECURSOR ESC "[2K"     // Delete entire line content at cursor
  32:test3.c       **** #define DELETESCREENAFTERCURSOR ESC "[0J" // Clear screen after the cursor
  33:test3.c       **** #define DELETESCREENBEFORECURSOR ESC "[1J" // Clear screen before the cursor
  34:test3.c       **** #define DELETESCREEN ESC "[2J"           // Clear the entire screen
  35:test3.c       **** #define CHANGESCROLLROWS ESC "[%d;%dr"   // Set scrollable region of the screen
  36:test3.c       **** #define RESETSCROLLROWS ESC "[r"         // Reset scrollable region
  37:test3.c       **** 
  38:test3.c       **** // Line and Character Deletion
  39:test3.c       **** #define DELETENCHAR ESC "[%dP"          // Delete %d characters at cursor
  40:test3.c       **** 
  41:test3.c       **** // Color and Graphics Rendition
  42:test3.c       **** #define SGR ESC "[%dm"                  // Select graphic rendition (e.g., text attributes)
  43:test3.c       **** #define RESETSGR ESC "[0m"              // Reset graphic rendition to default
  44:test3.c       **** #define SGRCOL256 ESC "[38;5;%dm"       // Set 256-color foreground
  45:test3.c       **** #define SGRBGCOL256 ESC "[48;5;%dm"     // Set 256-color background


  46:test3.c       **** #define SGRCOL24B ESC "[38;2;%d;%d;%dm" // Set 24-bit RGB foreground
  47:test3.c       **** #define SGRBGCOL24B ESC "[48;2;%d;%d;%dm" // Set 24-bit RGB background
  48:test3.c       **** 
  49:test3.c       **** // Character Set Switching
  50:test3.c       **** #define DECLINEDRAW ESC "(0"            // Switch to DEC line drawing character set
  51:test3.c       **** #define ASCIIDRAW ESC "(B"              // Switch to ASCII character set
  52:test3.c       **** 
  53:test3.c       **** // Mode Control
  54:test3.c       **** #define DECSETMODE ESC "[?%dh"          // Set terminal mode
  55:test3.c       **** #define DECRESETMODE ESC "[?%dl"        // Reset terminal mode
  56:test3.c       **** #define SETLRMARGIN ESC "[?69h"         // Enable left/right margin mode
  57:test3.c       **** 
  58:test3.c       **** // Terminal Attributes
  59:test3.c       **** #define DECTCEM 25                      // Terminal cursor enable mode (use with DECSETMODE/DECRESE
  60:test3.c       **** 
  61:test3.c       **** // Miscellaneous
  62:test3.c       **** #define MAX 1024                        // Maximum buffer size
  63:test3.c       **** #define SECONDDIVIDER 100               // Arbitrary constant, likely for time conversions
  64:test3.c       **** #define BUFLEN 100                      // Buffer length
  65:test3.c       **** #define TOTALTIPS 4                     // Total number of tips
  66:test3.c       **** 
  67:test3.c       **** /*
  68:test3.c       **** // Global Variables and Constants
  69:test3.c       **** 
  70:test3.c       **** // Shared Resource Variables (Used in Multiple Tasks)
  71:test3.c       **** 
  72:test3.c       **** // Input and Command Management
  73:test3.c       **** // Used in command_bar(), main_app()
  74:test3.c       **** bool inappcom[2] = {true, true};       // Track if clients are in application communication mode
  75:test3.c       **** char keypress[2] = {-1, -1};           // Last keypress for each client
  76:test3.c       **** char last_keybuf[2][10];               // Buffer for storing last key sequences
  77:test3.c       **** int last_keybuf_len[2];                // Length of the last key buffer
  78:test3.c       **** char msg_buf[2][BUFLEN];               // Buffer for storing messages
  79:test3.c       **** unsigned int msg_buf_len[2];           // Length of the message buffer
  80:test3.c       **** char cmd_buf[2][BUFLEN];               // Buffer for storing commands
  81:test3.c       **** unsigned int cmd_buf_len[2];           // Length of the command buffer
  82:test3.c       **** 
  83:test3.c       **** // Tip Management
  84:test3.c       **** // Used in command_bar(), main_app()
  85:test3.c       **** int tip_num[2];                        // Indicates the current tip being displayed for each client
  86:test3.c       **** 
  87:test3.c       **** // Screen and UI Configuration
  88:test3.c       **** // Used in runtime_clock(), command_bar(), main_app()
  89:test3.c       **** unsigned int screen_height = 35;       // Height of the screen
  90:test3.c       **** unsigned int screen_width = 203;       // Width of the screen
  91:test3.c       **** // Used in runtime_clock(), main_app()
  92:test3.c       **** unsigned int chat_row = 1;             // Row for chat content display
  93:test3.c       **** 
  94:test3.c       **** // Other Shared Resources
  95:test3.c       **** // Used in runtime_clock(), command_bar(), main_app()
  96:test3.c       **** char printf_buf[BUFLEN];               // Buffer for formatted print outputs
  97:test3.c       **** 
  98:test3.c       **** // Non-Shared Variables and Constants
  99:test3.c       **** 
 100:test3.c       **** // Indices for managing two clients (Client1 and Client2)
 101:test3.c       **** int i, j; 
 102:test3.c       **** 


 103:test3.c       **** // Screen and Mode States
 104:test3.c       **** bool in_alt_screen[2] = {false, false}; // Track if clients are in the alternate screen
 105:test3.c       **** 
 106:test3.c       **** // Client Nicknames
 107:test3.c       **** char client_nickname_color[2] = {11, 14}; // Color assigned to user nicknames
 108:test3.c       **** char client_nickname[2][10] = {"USER1", "USER2"}; // Default user nicknames
 109:test3.c       **** bool client_nickname_set[2] = {false, false}; // Track if nicknames are set
 110:test3.c       **** 
 111:test3.c       **** // Terminal Input Handling
 112:test3.c       **** int term_input_col[2]; // Current input column for each client
 113:test3.c       **** 
 114:test3.c       **** // Terminal Control Sequences
 115:test3.c       **** const char term_backspace[] = "\b \b";  // Backspace sequence for terminal
 116:test3.c       **** const char term_line10[] = "\x1b[10;H"; // Move to line 10
 117:test3.c       **** 
 118:test3.c       **** // Prompts
 119:test3.c       **** const char msg_input_prompt[] = "Your message"; // Prompt for message input
 120:test3.c       **** const char command_prompt[] = "Command: ";      // Prompt for command input
 121:test3.c       **** 
 122:test3.c       **** // Tips
 123:test3.c       **** const char tip_list[TOTALTIPS][BUFLEN] = {
 124:test3.c       ****     "Press ESC to enter command mode",               // Tip 1
 125:test3.c       ****     "Maximum length of each message is 100 characters", // Tip 2
 126:test3.c       ****     "Functionality of the arrow keys is suppressed", // Tip 3
 127:test3.c       ****     "Only help command is available for now"         // Tip 4
 128:test3.c       **** };
 129:test3.c       **** 
 130:test3.c       **** // Help Text
 131:test3.c       **** const char help_text[] = 
 132:test3.c       ****     "\n\x1b[1;4mManual page for the chat application\x1b[0m\n\n"
 133:test3.c       ****     "This page should be populated when the application is finished.\n"
 134:test3.c       ****     "Please press any key to go back.\n";
 135:test3.c       **** */
 136:test3.c       **** 
 137:test3.c       **** // Global Variables and Constants
 138:test3.c       **** 
 139:test3.c       **** // Indices for managing two clients (user1 and user2)
 140:test3.c       **** int i, j; 
 141:test3.c       **** 
 142:test3.c       **** // Screen and Mode States
 143:test3.c       **** bool in_alt_screen[2] = {false, false}; // Track if clients are in the alternate screen
 144:test3.c       **** bool inappcom[2] = {true, true};       // Track if clients are in application communication mode
 145:test3.c       **** 
 146:test3.c       **** // Input Tracking
 147:test3.c       **** char keypress[2] = {-1, -1};           // Last keypress for each client
 148:test3.c       **** char last_keybuf[2][10];               // Buffer for storing last key sequences
 149:test3.c       **** int last_keybuf_len[2];                // Length of the last key buffer
 150:test3.c       **** 
 151:test3.c       **** // Client Nicknames
 152:test3.c       **** char client_nickname_color[2] = {11, 14}; // Color assigned to user nicknames
 153:test3.c       **** char client_nickname[2][10] = {"USER1", "USER2"}; // Default user nicknames
 154:test3.c       **** bool client_nickname_set[2] = {false, false}; // Track if nicknames are set
 155:test3.c       **** 
 156:test3.c       **** // Terminal Input Handling
 157:test3.c       **** int term_input_col[2]; // Current input column for each client
 158:test3.c       **** 
 159:test3.c       **** // Message Buffers


 160:test3.c       **** char msg_buf[2][BUFLEN];          // Buffer for storing messages
 161:test3.c       **** unsigned int msg_buf_len[2];      // Length of the message buffer
 162:test3.c       **** char cmd_buf[2][BUFLEN];          // Buffer for storing commands
 163:test3.c       **** unsigned int cmd_buf_len[2];      // Length of the command buffer
 164:test3.c       **** char printf_buf[BUFLEN];          // Buffer for formatted print outputs
 165:test3.c       **** 
 166:test3.c       **** // Tip Management
 167:test3.c       **** int tip_num[2];                   // Index of the current tip for each client
 168:test3.c       **** 
 169:test3.c       **** // Screen Configuration
 170:test3.c       **** unsigned int screen_height = 35;  // Height of the screen
 171:test3.c       **** unsigned int screen_width = 203;  // Width of the screen
 172:test3.c       **** unsigned int chat_row = 1;        // Row for chat content display
 173:test3.c       **** 
 174:test3.c       **** // Terminal Control Sequences
 175:test3.c       **** const char term_backspace[] = "\b \b";  // Backspace sequence for terminal
 176:test3.c       **** const char term_line10[] = "\x1b[10;H"; // Move to line 10
 177:test3.c       **** 
 178:test3.c       **** // Prompts
 179:test3.c       **** const char msg_input_prompt[] = "Your message"; // Prompt for message input
 180:test3.c       **** const char command_prompt[] = "Command: ";      // Prompt for command input
 181:test3.c       **** 
 182:test3.c       **** // Tips
 183:test3.c       **** const char tip_list[TOTALTIPS][BUFLEN] = {
 184:test3.c       ****     "Press ESC to enter command mode",               // Tip 1
 185:test3.c       ****     "Maximum length of each message is 100 characters", // Tip 2
 186:test3.c       ****     "Functionality of the arrow keys is suppressed", // Tip 3
 187:test3.c       ****     "Only help command is available for now"         // Tip 4
 188:test3.c       **** };
 189:test3.c       **** 
 190:test3.c       **** // Help Text
 191:test3.c       **** const char help_text[] = 
 192:test3.c       ****     "\n\x1b[1;4mManual page for the chat application\x1b[0m\n\n"
 193:test3.c       ****     "This page should be populated when the application is finished.\n"
 194:test3.c       ****     "Please press any key to go back.\n";
 195:test3.c       **** 
 196:test3.c       **** // Fast printf function for output to specific file descriptors
 197:test3.c       **** 
 198:test3.c       **** void fast_printf(const bool ch0, const bool ch1, const char *fmt, ...)
 199:test3.c       **** {
  13               		.loc 1 199 1 view -0
  14               		.cfi_startproc
  15               		.loc 1 199 1 is_stmt 0 view .LVU1
  16 0000 4E56 0000 		link.w %fp,#0
  17               		.cfi_offset 14, -8
  18               		.cfi_def_cfa 14, 8
  19               	.LVL1:
  20               		.loc 1 199 1 view .LVU2
  21 0004 48E7 3800 		movem.l #14336,-(%sp)
  22               	.LVL2:
  23               		.cfi_offset 2, -20
  24               		.cfi_offset 3, -16
  25               		.cfi_offset 4, -12
  26               		.loc 1 199 1 view .LVU3
  27 0008 182E 000B 		move.b 11(%fp),%d4
  28 000c 162E 000F 		move.b 15(%fp),%d3
 200:test3.c       ****     // Declare a variable to store the length of the formatted string


 201:test3.c       ****     int printf_buf_len;
  29               		.loc 1 201 5 is_stmt 1 view .LVU4
 202:test3.c       **** 
 203:test3.c       ****     // Initialize a variable argument list to process variadic arguments
 204:test3.c       ****     va_list args;
  30               		.loc 1 204 5 view .LVU5
 205:test3.c       ****     va_start(args, fmt); // Start processing arguments after 'fmt'
  31               		.loc 1 205 5 view .LVU6
  32               	.LVL3:
 206:test3.c       **** 
 207:test3.c       ****     // Format the input string and arguments into 'printf_buf'
 208:test3.c       ****     vsprintf(printf_buf, fmt, args);
  33               		.loc 1 208 5 view .LVU7
  34 0010 486E 0014 		pea 20(%fp)
  35 0014 2F2E 0010 		move.l 16(%fp),-(%sp)
  36 0018 4879 0000 		pea printf_buf
  36      0000 
  37 001e 4EB9 0000 		jsr vsprintf
  37      0000 
  38               	.LVL4:
 209:test3.c       **** 
 210:test3.c       ****     // Calculate the length of the formatted string
 211:test3.c       ****     printf_buf_len = strlen(printf_buf);
  39               		.loc 1 211 5 view .LVU8
  40               		.loc 1 211 22 is_stmt 0 view .LVU9
  41 0024 4879 0000 		pea printf_buf
  41      0000 
  42 002a 4EB9 0000 		jsr strlen
  42      0000 
  43               	.LVL5:
  44 0030 2400      		move.l %d0,%d2
  45               	.LVL6:
 212:test3.c       **** 
 213:test3.c       ****     // Write the formatted string to file descriptor 3 if 'ch0' is true
 214:test3.c       ****     if (ch0)
  46               		.loc 1 214 5 is_stmt 1 view .LVU10
  47               		.loc 1 214 8 is_stmt 0 view .LVU11
  48 0032 4FEF 0010 		lea (16,%sp),%sp
  49 0036 4A04      		tst.b %d4
  50 0038 662E      		jne .L12
 215:test3.c       ****         write(3, &printf_buf, printf_buf_len);
 216:test3.c       **** 
 217:test3.c       ****     // Write the formatted string to file descriptor 4 if 'ch1' is true
 218:test3.c       ****     if (ch1)
  51               		.loc 1 218 5 is_stmt 1 view .LVU12
  52               		.loc 1 218 8 is_stmt 0 view .LVU13
  53 003a 4A03      		tst.b %d3
  54 003c 660A      		jne .L13
  55               	.LVL7:
  56               	.L1:
 219:test3.c       ****         write(4, &printf_buf, printf_buf_len);
 220:test3.c       **** 
 221:test3.c       ****     // Clean up the variable argument list
 222:test3.c       ****     va_end(args);
 223:test3.c       **** }
  57               		.loc 1 223 1 view .LVU14
  58 003e 4CEE 001C 		movem.l -12(%fp),#28


  58      FFF4 
  59               	.LVL8:
  60               		.loc 1 223 1 view .LVU15
  61 0044 4E5E      		unlk %fp
  62               	.LVL9:
  63               		.loc 1 223 1 view .LVU16
  64 0046 4E75      		rts
  65               	.LVL10:
  66               	.L13:
  67               	.LBB2:
 219:test3.c       ****         write(4, &printf_buf, printf_buf_len);
  68               		.loc 1 219 9 is_stmt 1 view .LVU17
  69 0048 2F02      		move.l %d2,-(%sp)
  70 004a 4879 0000 		pea printf_buf
  70      0000 
  71 0050 4878 0004 		pea 4.w
  72 0054 4EB9 0000 		jsr write
  72      0000 
  73               	.LVL11:
  74 005a 4FEF 000C 		lea (12,%sp),%sp
  75               	.LBE2:
 222:test3.c       **** }
  76               		.loc 1 222 5 view .LVU18
  77               		.loc 1 223 1 is_stmt 0 view .LVU19
  78 005e 4CEE 001C 		movem.l -12(%fp),#28
  78      FFF4 
  79               	.LVL12:
  80               		.loc 1 223 1 view .LVU20
  81 0064 4E5E      		unlk %fp
  82               	.LVL13:
  83               		.loc 1 223 1 view .LVU21
  84 0066 4E75      		rts
  85               	.LVL14:
  86               	.L12:
  87               	.LBB3:
 215:test3.c       ****         write(3, &printf_buf, printf_buf_len);
  88               		.loc 1 215 9 is_stmt 1 view .LVU22
  89 0068 2F00      		move.l %d0,-(%sp)
  90 006a 4879 0000 		pea printf_buf
  90      0000 
  91 0070 4878 0003 		pea 3.w
  92 0074 4EB9 0000 		jsr write
  92      0000 
  93               	.LVL15:
 215:test3.c       ****         write(3, &printf_buf, printf_buf_len);
  94               		.loc 1 215 9 is_stmt 0 view .LVU23
  95 007a 4FEF 000C 		lea (12,%sp),%sp
  96               	.LBE3:
 218:test3.c       ****         write(4, &printf_buf, printf_buf_len);
  97               		.loc 1 218 5 is_stmt 1 view .LVU24
 218:test3.c       ****         write(4, &printf_buf, printf_buf_len);
  98               		.loc 1 218 8 is_stmt 0 view .LVU25
  99 007e 4A03      		tst.b %d3
 100 0080 67BC      		jeq .L1
 101 0082 60C4      		jra .L13
 102               		.cfi_endproc
 103               	.LFE3:


 104               		.size	fast_printf, .-fast_printf
 105               		.globl	__udivsi3
 106               		.section	.rodata.str1.1,"aMS",@progbits,1
 107               	.LC0:
 108 0000 1B5B 383B 		.string	"\033[8;%d;%dt"
 108      2564 3B25 
 108      6474 00
 109               	.LC1:
 110 000b 1B5B 3F32 		.string	"\033[?25l"
 110      356C 00
 111               	.LC2:
 112 0012 1B37 00   		.string	"\0337"
 113               	.LC3:
 114 0015 1B5B 481B 		.string	"\033[H\033[47;30mRuntime %02d:%02d:%02d \033[K\033[0m"
 114      5B34 373B 
 114      3330 6D52 
 114      756E 7469 
 114      6D65 2025 
 115               	.LC4:
 116 003f 1B38 00   		.string	"\0338"
 117               	.LC5:
 118 0042 1B5B 3F32 		.string	"\033[?25h"
 118      3568 00
 119               		.text
 120               		.align	2
 121               		.globl	runtime_clock
 122               		.type	runtime_clock, @function
 123               	runtime_clock:
 124               	.LFB4:
 224:test3.c       **** 
 225:test3.c       **** // Function to continuously update and display the runtime clock
 226:test3.c       **** void runtime_clock()
 227:test3.c       **** {
 125               		.loc 1 227 1 is_stmt 1 view -0
 126               		.cfi_startproc
 127 0084 48E7 3E3C 		movem.l #15932,-(%sp)
 128               		.cfi_def_cfa_offset 40
 129               		.cfi_offset 2, -40
 130               		.cfi_offset 3, -36
 131               		.cfi_offset 4, -32
 132               		.cfi_offset 5, -28
 133               		.cfi_offset 6, -24
 134               		.cfi_offset 10, -20
 135               		.cfi_offset 11, -16
 136               		.cfi_offset 12, -12
 137               		.cfi_offset 13, -8
 228:test3.c       ****     // Initialize time variables
 229:test3.c       ****     unsigned int hr = 0, min = 0, sec = 0, last_runtime = 0;
 138               		.loc 1 229 5 view .LVU27
 139               	.LVL16:
 140               		.loc 1 229 44 is_stmt 0 view .LVU28
 141 0088 7800      		moveq #0,%d4
 142               		.loc 1 229 35 view .LVU29
 143 008a 7400      		moveq #0,%d2
 144               		.loc 1 229 26 view .LVU30
 145 008c 7A00      		moveq #0,%d5
 146               		.loc 1 229 18 view .LVU31


 147 008e 7C00      		moveq #0,%d6
 148 0090 49F9 0000 		lea P,%a4
 148      0000 
 149 0096 4BF9 0000 		lea __udivsi3,%a5
 149      0000 
 150 009c 45FA FF62 		lea fast_printf,%a2
 151 00a0 47F9 0000 		lea V,%a3
 151      0000 
 152               	.LVL17:
 153               	.L17:
 230:test3.c       **** 
 231:test3.c       ****     // Infinite loop to keep the runtime clock running
 232:test3.c       ****     while (1)
 154               		.loc 1 232 5 is_stmt 1 view .LVU32
 233:test3.c       ****     {
 234:test3.c       ****         // Lock semaphores to ensure safe access to shared resources
 235:test3.c       ****         P(0);
 155               		.loc 1 235 9 view .LVU33
 156 00a6 42A7      		clr.l -(%sp)
 157               		.cfi_def_cfa_offset 44
 158 00a8 4E94      		jsr (%a4)
 159               	.LVL18:
 236:test3.c       ****         P(1);
 160               		.loc 1 236 9 view .LVU34
 161 00aa 4878 0001 		pea 1.w
 162               		.cfi_def_cfa_offset 48
 163 00ae 4E94      		jsr (%a4)
 164               	.LVL19:
 237:test3.c       **** 
 238:test3.c       ****         // Check if a second has passed since the last update
 239:test3.c       ****         if (runtime - last_runtime >= SECONDDIVIDER)
 165               		.loc 1 239 9 view .LVU35
 166               		.loc 1 239 21 is_stmt 0 view .LVU36
 167 00b0 2639 0000 		move.l runtime,%d3
 167      0000 
 168 00b6 2003      		move.l %d3,%d0
 169 00b8 9084      		sub.l %d4,%d0
 170               		.loc 1 239 12 view .LVU37
 171 00ba 508F      		addq.l #8,%sp
 172               		.cfi_def_cfa_offset 40
 173 00bc 7263      		moveq #99,%d1
 174 00be B280      		cmp.l %d0,%d1
 175 00c0 6400 0096 		jcc .L15
 240:test3.c       ****         {
 241:test3.c       ****             // Update seconds based on the elapsed runtime
 242:test3.c       ****             sec += (runtime - last_runtime) / SECONDDIVIDER;
 176               		.loc 1 242 13 is_stmt 1 view .LVU38
 177               		.loc 1 242 45 is_stmt 0 view .LVU39
 178 00c4 4878 0064 		pea 100.w
 179               		.cfi_def_cfa_offset 44
 180 00c8 2F00      		move.l %d0,-(%sp)
 181               		.cfi_def_cfa_offset 48
 182 00ca 4E95      		jsr (%a5)
 183               	.LVL20:
 184 00cc 508F      		addq.l #8,%sp
 185               		.cfi_def_cfa_offset 40
 186               		.loc 1 242 17 view .LVU40


 187 00ce D480      		add.l %d0,%d2
 188               	.LVL21:
 243:test3.c       ****             last_runtime = runtime; // Update the last runtime checkpoint
 189               		.loc 1 243 13 is_stmt 1 view .LVU41
 244:test3.c       **** 
 245:test3.c       ****             // Handle time rollover: seconds to minutes
 246:test3.c       ****             if (sec == 60)
 190               		.loc 1 246 13 view .LVU42
 191               		.loc 1 246 16 is_stmt 0 view .LVU43
 192 00d0 703C      		moveq #60,%d0
 193 00d2 B082      		cmp.l %d2,%d0
 194 00d4 6700 0092 		jeq .L21
 247:test3.c       ****             {
 248:test3.c       ****                 sec = sec - 60;
 249:test3.c       ****                 min++;
 250:test3.c       **** 
 251:test3.c       ****                 // Handle time rollover: minutes to hours
 252:test3.c       ****                 if (min == 60)
 253:test3.c       ****                 {
 254:test3.c       ****                     min = 0;
 255:test3.c       ****                     hr++;
 256:test3.c       ****                 }
 257:test3.c       ****             }
 258:test3.c       **** 
 259:test3.c       ****             // Update the screen with the new runtime
 260:test3.c       ****             fast_printf(true, true, SETSCREENSIZE, screen_height, screen_width); // Adjust screen s
 195               		.loc 1 260 13 is_stmt 1 view .LVU44
 196 00d8 2F39 0000 		move.l screen_width,-(%sp)
 196      0000 
 197               		.cfi_def_cfa_offset 44
 198 00de 2F39 0000 		move.l screen_height,-(%sp)
 198      0000 
 199               		.cfi_def_cfa_offset 48
 200 00e4 4879 0000 		pea .LC0
 200      0000 
 201               		.cfi_def_cfa_offset 52
 202 00ea 4878 0001 		pea 1.w
 203               		.cfi_def_cfa_offset 56
 204 00ee 4878 0001 		pea 1.w
 205               		.cfi_def_cfa_offset 60
 206 00f2 4E92      		jsr (%a2)
 207               	.LVL22:
 261:test3.c       ****             fast_printf(true, true, CURSORINVISIBLE); // Hide cursor during update
 208               		.loc 1 261 13 view .LVU45
 209 00f4 4879 0000 		pea .LC1
 209      0000 
 210               		.cfi_def_cfa_offset 64
 211 00fa 4878 0001 		pea 1.w
 212               		.cfi_def_cfa_offset 68
 213 00fe 4878 0001 		pea 1.w
 214               		.cfi_def_cfa_offset 72
 215 0102 4E92      		jsr (%a2)
 216               	.LVL23:
 262:test3.c       ****             fast_printf(true, true, SAVECURSORLOC);   // Save current cursor position
 217               		.loc 1 262 13 view .LVU46
 218 0104 4FEF 001C 		lea (28,%sp),%sp
 219               		.cfi_def_cfa_offset 44


 220 0108 2EBC 0000 		move.l #.LC2,(%sp)
 220      0000 
 221 010e 4878 0001 		pea 1.w
 222               		.cfi_def_cfa_offset 48
 223 0112 4878 0001 		pea 1.w
 224               		.cfi_def_cfa_offset 52
 225 0116 4E92      		jsr (%a2)
 226               	.LVL24:
 263:test3.c       **** 
 264:test3.c       ****             // Display the runtime in HH:MM:SS format at the top-left corner
 265:test3.c       ****             fast_printf(true, true, "\x1b[H\x1b[47;30mRuntime %02d:%02d:%02d \x1b[K\x1b[0m", hr, mi
 227               		.loc 1 265 13 view .LVU47
 228 0118 2F02      		move.l %d2,-(%sp)
 229               		.cfi_def_cfa_offset 56
 230 011a 2F05      		move.l %d5,-(%sp)
 231               		.cfi_def_cfa_offset 60
 232 011c 2F06      		move.l %d6,-(%sp)
 233               		.cfi_def_cfa_offset 64
 234 011e 4879 0000 		pea .LC3
 234      0000 
 235               		.cfi_def_cfa_offset 68
 236 0124 4878 0001 		pea 1.w
 237               		.cfi_def_cfa_offset 72
 238 0128 4878 0001 		pea 1.w
 239               		.cfi_def_cfa_offset 76
 240 012c 4E92      		jsr (%a2)
 241               	.LVL25:
 266:test3.c       **** 
 267:test3.c       ****             fast_printf(true, true, RETCURSORLOC);   // Restore cursor position
 242               		.loc 1 267 13 view .LVU48
 243 012e 4FEF 0020 		lea (32,%sp),%sp
 244               		.cfi_def_cfa_offset 44
 245 0132 2EBC 0000 		move.l #.LC4,(%sp)
 245      0000 
 246 0138 4878 0001 		pea 1.w
 247               		.cfi_def_cfa_offset 48
 248 013c 4878 0001 		pea 1.w
 249               		.cfi_def_cfa_offset 52
 250 0140 4E92      		jsr (%a2)
 251               	.LVL26:
 268:test3.c       ****             fast_printf(true, true, CURSORVISIBLE); // Make cursor visible again
 252               		.loc 1 268 13 view .LVU49
 253 0142 4879 0000 		pea .LC5
 253      0000 
 254               		.cfi_def_cfa_offset 56
 255 0148 4878 0001 		pea 1.w
 256               		.cfi_def_cfa_offset 60
 257 014c 4878 0001 		pea 1.w
 258               		.cfi_def_cfa_offset 64
 259 0150 4E92      		jsr (%a2)
 260               	.LVL27:
 261 0152 4FEF 0018 		lea (24,%sp),%sp
 262               		.cfi_def_cfa_offset 40
 243:test3.c       **** 
 263               		.loc 1 243 26 is_stmt 0 view .LVU50
 264 0156 2803      		move.l %d3,%d4
 265               	.LVL28:


 266               	.L15:
 269:test3.c       ****         }
 270:test3.c       **** 
 271:test3.c       ****         // Release semaphores to allow other tasks to proceed
 272:test3.c       ****         V(1);
 267               		.loc 1 272 9 is_stmt 1 view .LVU51
 268 0158 4878 0001 		pea 1.w
 269               		.cfi_def_cfa_offset 44
 270 015c 4E93      		jsr (%a3)
 271               	.LVL29:
 273:test3.c       ****         V(0);
 272               		.loc 1 273 9 view .LVU52
 273 015e 42A7      		clr.l -(%sp)
 274               		.cfi_def_cfa_offset 48
 275 0160 4E93      		jsr (%a3)
 276               	.LVL30:
 232:test3.c       ****     {
 277               		.loc 1 232 11 view .LVU53
 235:test3.c       ****         P(1);
 278               		.loc 1 235 9 is_stmt 0 view .LVU54
 279 0162 508F      		addq.l #8,%sp
 280               		.cfi_def_cfa_offset 40
 281 0164 6000 FF40 		jra .L17
 282               	.LVL31:
 283               	.L21:
 248:test3.c       ****                 min++;
 284               		.loc 1 248 17 is_stmt 1 view .LVU55
 249:test3.c       **** 
 285               		.loc 1 249 17 view .LVU56
 249:test3.c       **** 
 286               		.loc 1 249 20 is_stmt 0 view .LVU57
 287 0168 5285      		addq.l #1,%d5
 288               	.LVL32:
 252:test3.c       ****                 {
 289               		.loc 1 252 17 is_stmt 1 view .LVU58
 252:test3.c       ****                 {
 290               		.loc 1 252 20 is_stmt 0 view .LVU59
 291 016a B085      		cmp.l %d5,%d0
 292 016c 6700 0088 		jeq .L22
 248:test3.c       ****                 min++;
 293               		.loc 1 248 21 view .LVU60
 294 0170 7400      		moveq #0,%d2
 295               	.LVL33:
 260:test3.c       ****             fast_printf(true, true, CURSORINVISIBLE); // Hide cursor during update
 296               		.loc 1 260 13 is_stmt 1 view .LVU61
 297 0172 2F39 0000 		move.l screen_width,-(%sp)
 297      0000 
 298               		.cfi_def_cfa_offset 44
 299 0178 2F39 0000 		move.l screen_height,-(%sp)
 299      0000 
 300               		.cfi_def_cfa_offset 48
 301 017e 4879 0000 		pea .LC0
 301      0000 
 302               		.cfi_def_cfa_offset 52
 303 0184 4878 0001 		pea 1.w
 304               		.cfi_def_cfa_offset 56
 305 0188 4878 0001 		pea 1.w


 306               		.cfi_def_cfa_offset 60
 307 018c 4E92      		jsr (%a2)
 308               	.LVL34:
 261:test3.c       ****             fast_printf(true, true, SAVECURSORLOC);   // Save current cursor position
 309               		.loc 1 261 13 view .LVU62
 310 018e 4879 0000 		pea .LC1
 310      0000 
 311               		.cfi_def_cfa_offset 64
 312 0194 4878 0001 		pea 1.w
 313               		.cfi_def_cfa_offset 68
 314 0198 4878 0001 		pea 1.w
 315               		.cfi_def_cfa_offset 72
 316 019c 4E92      		jsr (%a2)
 317               	.LVL35:
 262:test3.c       **** 
 318               		.loc 1 262 13 view .LVU63
 319 019e 4FEF 001C 		lea (28,%sp),%sp
 320               		.cfi_def_cfa_offset 44
 321 01a2 2EBC 0000 		move.l #.LC2,(%sp)
 321      0000 
 322 01a8 4878 0001 		pea 1.w
 323               		.cfi_def_cfa_offset 48
 324 01ac 4878 0001 		pea 1.w
 325               		.cfi_def_cfa_offset 52
 326 01b0 4E92      		jsr (%a2)
 327               	.LVL36:
 265:test3.c       **** 
 328               		.loc 1 265 13 view .LVU64
 329 01b2 2F02      		move.l %d2,-(%sp)
 330               		.cfi_def_cfa_offset 56
 331 01b4 2F05      		move.l %d5,-(%sp)
 332               		.cfi_def_cfa_offset 60
 333 01b6 2F06      		move.l %d6,-(%sp)
 334               		.cfi_def_cfa_offset 64
 335 01b8 4879 0000 		pea .LC3
 335      0000 
 336               		.cfi_def_cfa_offset 68
 337 01be 4878 0001 		pea 1.w
 338               		.cfi_def_cfa_offset 72
 339 01c2 4878 0001 		pea 1.w
 340               		.cfi_def_cfa_offset 76
 341 01c6 4E92      		jsr (%a2)
 342               	.LVL37:
 267:test3.c       ****             fast_printf(true, true, CURSORVISIBLE); // Make cursor visible again
 343               		.loc 1 267 13 view .LVU65
 344 01c8 4FEF 0020 		lea (32,%sp),%sp
 345               		.cfi_def_cfa_offset 44
 346 01cc 2EBC 0000 		move.l #.LC4,(%sp)
 346      0000 
 347 01d2 4878 0001 		pea 1.w
 348               		.cfi_def_cfa_offset 48
 349 01d6 4878 0001 		pea 1.w
 350               		.cfi_def_cfa_offset 52
 351 01da 4E92      		jsr (%a2)
 352               	.LVL38:
 268:test3.c       ****         }
 353               		.loc 1 268 13 view .LVU66


 354 01dc 4879 0000 		pea .LC5
 354      0000 
 355               		.cfi_def_cfa_offset 56
 356 01e2 4878 0001 		pea 1.w
 357               		.cfi_def_cfa_offset 60
 358 01e6 4878 0001 		pea 1.w
 359               		.cfi_def_cfa_offset 64
 360 01ea 4E92      		jsr (%a2)
 361               	.LVL39:
 362 01ec 4FEF 0018 		lea (24,%sp),%sp
 363               		.cfi_def_cfa_offset 40
 243:test3.c       **** 
 364               		.loc 1 243 26 is_stmt 0 view .LVU67
 365 01f0 2803      		move.l %d3,%d4
 366 01f2 6000 FF64 		jra .L15
 367               	.LVL40:
 368               	.L22:
 254:test3.c       ****                     hr++;
 369               		.loc 1 254 21 is_stmt 1 view .LVU68
 255:test3.c       ****                 }
 370               		.loc 1 255 21 view .LVU69
 255:test3.c       ****                 }
 371               		.loc 1 255 23 is_stmt 0 view .LVU70
 372 01f6 5286      		addq.l #1,%d6
 373               	.LVL41:
 248:test3.c       ****                 min++;
 374               		.loc 1 248 21 view .LVU71
 375 01f8 7400      		moveq #0,%d2
 254:test3.c       ****                     hr++;
 376               		.loc 1 254 25 view .LVU72
 377 01fa 7A00      		moveq #0,%d5
 378               	.LVL42:
 260:test3.c       ****             fast_printf(true, true, CURSORINVISIBLE); // Hide cursor during update
 379               		.loc 1 260 13 is_stmt 1 view .LVU73
 380 01fc 2F39 0000 		move.l screen_width,-(%sp)
 380      0000 
 381               		.cfi_def_cfa_offset 44
 382 0202 2F39 0000 		move.l screen_height,-(%sp)
 382      0000 
 383               		.cfi_def_cfa_offset 48
 384 0208 4879 0000 		pea .LC0
 384      0000 
 385               		.cfi_def_cfa_offset 52
 386 020e 4878 0001 		pea 1.w
 387               		.cfi_def_cfa_offset 56
 388 0212 4878 0001 		pea 1.w
 389               		.cfi_def_cfa_offset 60
 390 0216 4E92      		jsr (%a2)
 391               	.LVL43:
 261:test3.c       ****             fast_printf(true, true, SAVECURSORLOC);   // Save current cursor position
 392               		.loc 1 261 13 view .LVU74
 393 0218 4879 0000 		pea .LC1
 393      0000 
 394               		.cfi_def_cfa_offset 64
 395 021e 4878 0001 		pea 1.w
 396               		.cfi_def_cfa_offset 68
 397 0222 4878 0001 		pea 1.w


 398               		.cfi_def_cfa_offset 72
 399 0226 4E92      		jsr (%a2)
 400               	.LVL44:
 262:test3.c       **** 
 401               		.loc 1 262 13 view .LVU75
 402 0228 4FEF 001C 		lea (28,%sp),%sp
 403               		.cfi_def_cfa_offset 44
 404 022c 2EBC 0000 		move.l #.LC2,(%sp)
 404      0000 
 405 0232 4878 0001 		pea 1.w
 406               		.cfi_def_cfa_offset 48
 407 0236 4878 0001 		pea 1.w
 408               		.cfi_def_cfa_offset 52
 409 023a 4E92      		jsr (%a2)
 410               	.LVL45:
 265:test3.c       **** 
 411               		.loc 1 265 13 view .LVU76
 412 023c 2F02      		move.l %d2,-(%sp)
 413               		.cfi_def_cfa_offset 56
 414 023e 2F05      		move.l %d5,-(%sp)
 415               		.cfi_def_cfa_offset 60
 416 0240 2F06      		move.l %d6,-(%sp)
 417               		.cfi_def_cfa_offset 64
 418 0242 4879 0000 		pea .LC3
 418      0000 
 419               		.cfi_def_cfa_offset 68
 420 0248 4878 0001 		pea 1.w
 421               		.cfi_def_cfa_offset 72
 422 024c 4878 0001 		pea 1.w
 423               		.cfi_def_cfa_offset 76
 424 0250 4E92      		jsr (%a2)
 425               	.LVL46:
 267:test3.c       ****             fast_printf(true, true, CURSORVISIBLE); // Make cursor visible again
 426               		.loc 1 267 13 view .LVU77
 427 0252 4FEF 0020 		lea (32,%sp),%sp
 428               		.cfi_def_cfa_offset 44
 429 0256 2EBC 0000 		move.l #.LC4,(%sp)
 429      0000 
 430 025c 4878 0001 		pea 1.w
 431               		.cfi_def_cfa_offset 48
 432 0260 4878 0001 		pea 1.w
 433               		.cfi_def_cfa_offset 52
 434 0264 4E92      		jsr (%a2)
 435               	.LVL47:
 268:test3.c       ****         }
 436               		.loc 1 268 13 view .LVU78
 437 0266 4879 0000 		pea .LC5
 437      0000 
 438               		.cfi_def_cfa_offset 56
 439 026c 4878 0001 		pea 1.w
 440               		.cfi_def_cfa_offset 60
 441 0270 4878 0001 		pea 1.w
 442               		.cfi_def_cfa_offset 64
 443 0274 4E92      		jsr (%a2)
 444               	.LVL48:
 445 0276 4FEF 0018 		lea (24,%sp),%sp
 446               		.cfi_def_cfa_offset 40


 243:test3.c       **** 
 447               		.loc 1 243 26 is_stmt 0 view .LVU79
 448 027a 2803      		move.l %d3,%d4
 449 027c 6000 FEDA 		jra .L15
 450               		.cfi_endproc
 451               	.LFE4:
 452               		.size	runtime_clock, .-runtime_clock
 453               		.globl	__modsi3
 454               		.section	.rodata.str1.1
 455               	.LC6:
 456 0049 1B5B 3F25 		.string	"\033[?%dl"
 456      646C 00
 457               	.LC7:
 458 0050 1B5B 3939 		.string	"\033[999;H\033[47;30m%s\033[K"
 458      393B 481B 
 458      5B34 373B 
 458      3330 6D25 
 458      731B 5B4B 
 459               	.LC8:
 460 0065 1B5B 306D 		.string	"\033[0m"
 460      00
 461               	.LC9:
 462 006a 1B5B 3939 		.string	"\033[999;H\033[47;30m%s\033[K\033[0m"
 462      393B 481B 
 462      5B34 373B 
 462      3330 6D25 
 462      731B 5B4B 
 463               	.LC10:
 464 0083 1B5B 2564 		.string	"\033[%d;%dH"
 464      3B25 6448 
 464      00
 465               	.LC11:
 466 008c 1B5B 316D 		.string	"\033[1m%s\033[0m\342\224\202%s"
 466      2573 1B5B 
 466      306D E294 
 466      8225 7300 
 467               	.LC12:
 468 009c 1B5B 3437 		.string	"\033[47;30m%s\033[0m"
 468      3B33 306D 
 468      2573 1B5B 
 468      306D 00
 469               	.LC13:
 470 00ab 6865 6C70 		.string	"help"
 470      00
 471               	.LC14:
 472 00b0 1B5B 3F25 		.string	"\033[?%dh"
 472      6468 00
 473               	.LC15:
 474 00b7 1B5B 481B 		.string	"\033[H\033[2J"
 474      5B32 4A00 
 475               		.text
 476               		.align	2
 477               		.globl	command_bar
 478               		.type	command_bar, @function
 479               	command_bar:
 480               	.LFB5:
 274:test3.c       ****     }


 275:test3.c       **** }
 276:test3.c       **** 
 277:test3.c       **** // Command bar function to handle user inputs and display tips
 278:test3.c       **** void command_bar()
 279:test3.c       **** {
 481               		.loc 1 279 1 is_stmt 1 view -0
 482               		.cfi_startproc
 483 0280 4FEF FFF0 		lea (-16,%sp),%sp
 484               		.cfi_def_cfa_offset 20
 485 0284 48E7 3F3E 		movem.l #16190,-(%sp)
 486               		.cfi_def_cfa_offset 64
 487               		.cfi_offset 2, -64
 488               		.cfi_offset 3, -60
 489               		.cfi_offset 4, -56
 490               		.cfi_offset 5, -52
 491               		.cfi_offset 6, -48
 492               		.cfi_offset 7, -44
 493               		.cfi_offset 10, -40
 494               		.cfi_offset 11, -36
 495               		.cfi_offset 12, -32
 496               		.cfi_offset 13, -28
 497               		.cfi_offset 14, -24
 498 0288 4BF9 0000 		lea P,%a5
 498      0000 
 499 028e 2A3C 0000 		move.l #rand,%d5
 499      0000 
 500 0294 283C 0000 		move.l #__modsi3,%d4
 500      0000 
 501 029a 263C 0000 		move.l #inappcom,%d3
 501      0000 
 502 02a0 2E3C 0000 		move.l #keypress,%d7
 502      0000 
 503 02a6 47FA FD58 		lea fast_printf,%a3
 504 02aa 4DF9 0000 		lea tip_num,%a6
 504      0000 
 505 02b0 49F9 0000 		lea V,%a4
 505      0000 
 280:test3.c       ****     int last_tip_changed[2]; // Array to track when the tip was last changed for each channel
 506               		.loc 1 280 5 view .LVU81
 281:test3.c       ****     int some_num2; // Random value to add variability to tip update intervals
 507               		.loc 1 281 5 view .LVU82
 282:test3.c       **** 
 283:test3.c       ****     // A command bar at the bottom of the screen; accepts commands after the user presses the Escap
 284:test3.c       ****     while (1)
 508               		.loc 1 284 5 view .LVU83
 285:test3.c       ****     {
 286:test3.c       ****         P(0); // Lock semaphore 0 for safe access to shared resources
 509               		.loc 1 286 9 view .LVU84
 510 02b6 42A7      		clr.l -(%sp)
 511               		.cfi_def_cfa_offset 68
 512 02b8 4E95      		jsr (%a5)
 513               	.LVL49:
 287:test3.c       ****         P(1); // Lock semaphore 1 for additional synchronization
 514               		.loc 1 287 9 view .LVU85
 515 02ba 4878 0001 		pea 1.w
 516               		.cfi_def_cfa_offset 72
 517 02be 4E95      		jsr (%a5)


 518               	.LVL50:
 288:test3.c       **** 
 289:test3.c       ****         some_num2 = rand() %100 ; // Generate a random delay modifier for tip updates
 519               		.loc 1 289 9 view .LVU86
 520               		.loc 1 289 21 is_stmt 0 view .LVU87
 521 02c0 2045      		move.l %d5,%a0
 522 02c2 4E90      		jsr (%a0)
 523               	.LVL51:
 524               		.loc 1 289 19 view .LVU88
 525 02c4 4878 0064 		pea 100.w
 526               		.cfi_def_cfa_offset 76
 527 02c8 2F00      		move.l %d0,-(%sp)
 528               		.cfi_def_cfa_offset 80
 529 02ca 2244      		move.l %d4,%a1
 530 02cc 4E91      		jsr (%a1)
 531               	.LVL52:
 290:test3.c       **** 
 291:test3.c       ****         // Process input for each channel (0 and 1)
 292:test3.c       ****         for (i = 0; i <= 1; i++)
 532               		.loc 1 292 9 is_stmt 1 view .LVU89
 533               		.loc 1 292 16 is_stmt 0 view .LVU90
 534 02ce 42B9 0000 		clr.l i
 534      0000 
 535               		.loc 1 292 23 is_stmt 1 view .LVU91
 536               		.loc 1 292 16 is_stmt 0 view .LVU92
 537 02d4 4FEF 0010 		lea (16,%sp),%sp
 538               		.cfi_def_cfa_offset 64
 539               		.loc 1 292 23 view .LVU93
 540 02d8 95CA      		sub.l %a2,%a2
 293:test3.c       ****         {
 294:test3.c       ****             if (!inappcom[i]) // If the user is not in command input mode
 295:test3.c       ****             {
 296:test3.c       ****                 keypress[i] = inkey(i); // Get the keypress input for the channel
 297:test3.c       **** 
 298:test3.c       ****                 if (keypress[i] != -1) // If a key was pressed
 299:test3.c       ****                 {
 300:test3.c       ****                     if (in_alt_screen[i]) // If the alternate screen is active
 301:test3.c       ****                     {
 302:test3.c       ****                         fast_printf(i == 0, i == 1, DECRESETMODE, 47); // Exit alternate screen mod
 303:test3.c       ****                         in_alt_screen[i] = false;
 304:test3.c       ****                         fast_printf(i == 0, i == 1, "\x1b[999;H\x1b[47;30m%s\x1b[K", command_prompt
 305:test3.c       ****                     }
 306:test3.c       ****                     else
 307:test3.c       ****                     {
 308:test3.c       ****                         // Add the keypress to the buffer
 309:test3.c       ****                         last_keybuf[i][last_keybuf_len[i]] = keypress[i];
 310:test3.c       ****                         last_keybuf_len[i]++;
 311:test3.c       ****                         last_keybuf[i][last_keybuf_len[i]] = '\0';
 312:test3.c       ****                     }
 313:test3.c       ****                 }
 314:test3.c       ****                 else if (last_keybuf_len[i] > 0) // If there is data in the key buffer
 315:test3.c       ****                 {
 316:test3.c       ****                     if (strcmp(last_keybuf[i], ESC) == 0) // If the Escape key is pressed
 317:test3.c       ****                     {
 318:test3.c       ****                         fast_printf(i == 0, i == 1, RESETSGR); // Reset text formatting
 319:test3.c       ****                         fast_printf(i == 0, i == 1, "\x1b[999;H\x1b[47;30m%s\x1b[K\x1b[0m", tip_lis
 320:test3.c       ****                         fast_printf(i == 0, i == 1, CURSORMOVE, screen_height - 2, 2); // Move to t


 321:test3.c       ****                         fast_printf(i == 0, i == 1, "\x1b[1m%s\x1b[0m│%s", msg_input_prompt, msg_
 322:test3.c       ****                         inappcom[i] = true; // Enter command input mode
 323:test3.c       ****                         cmd_buf_len[i] = 0; // Reset the command buffer
 324:test3.c       ****                         cmd_buf[i][0] = '\0';
 325:test3.c       ****                     }
 326:test3.c       ****                     else if (strcmp(last_keybuf[i], BACKSPACE) == 0) // If the Backspace key is pre
 327:test3.c       ****                     {
 328:test3.c       ****                         if (cmd_buf_len[i] > 0) // Ensure the buffer is not empty
 329:test3.c       ****                         {
 330:test3.c       ****                             fast_printf(i == 0, i == 1, "\x1b[47;30m%s\x1b[0m", term_backspace); //
 331:test3.c       ****                             cmd_buf_len[i]--; // Remove the last character from the buffer
 332:test3.c       ****                             cmd_buf[i][cmd_buf_len[i]] = '\0';
 333:test3.c       ****                         }
 334:test3.c       ****                     }
 335:test3.c       ****                     else if (strcmp(last_keybuf[i], ENTER) == 0) // If the Enter key is pressed
 336:test3.c       ****                     {
 337:test3.c       ****                         if (cmd_buf_len[i] > 0) // Ensure there is a command in the buffer
 338:test3.c       ****                         {
 339:test3.c       ****                             // Check if the command is 'h' or 'help'
 340:test3.c       ****                             if (strncmp(cmd_buf[i], "h", 1) == 0 && cmd_buf_len[i] == 1 || 
 341:test3.c       ****                                 strncmp(cmd_buf[i], "help", 4) == 0 && cmd_buf_len[i] == 4)
 342:test3.c       ****                             {
 343:test3.c       ****                                 fast_printf(i == 0, i == 1, DECSETMODE, 47); // Switch to alternate
 344:test3.c       ****                                 fast_printf(i == 0, i == 1, RESETSGR); // Reset text formatting
 345:test3.c       ****                                 fast_printf(i == 0, i == 1, CLEARDISPLAY); // Clear the screen
 346:test3.c       ****                                 fast_printf(i == 0, i == 1, help_text); // Display help text
 347:test3.c       ****                                 in_alt_screen[i] = true; // Indicate alternate screen is active
 348:test3.c       ****                                 cmd_buf_len[i] = 0; // Clear the command buffer
 349:test3.c       ****                                 cmd_buf[i][0] = '\0';
 350:test3.c       ****                             }
 351:test3.c       ****                             else // Handle unrecognized commands
 352:test3.c       ****                             {
 353:test3.c       ****                                 fast_printf(i == 0, i == 1, "\x1b[999;H\x1b[47;30m%s\x1b[K\x1b[0m",
 354:test3.c       ****                                 cmd_buf_len[i] = 0; // Clear the command buffer
 355:test3.c       ****                                 cmd_buf[i][0] = '\0';
 356:test3.c       ****                             }
 357:test3.c       ****                         }
 358:test3.c       ****                     }
 359:test3.c       ****                     else if (last_keybuf_len[i] == 1 && last_keybuf[i][0] >= 32 && last_keybuf[i][0
 360:test3.c       ****                     {
 361:test3.c       ****                         if (cmd_buf_len[i] < 100) // Ensure the buffer does not exceed 100 characte
 362:test3.c       ****                         {
 363:test3.c       ****                             cmd_buf[i][cmd_buf_len[i]] = last_keybuf[i][0]; // Add character to the
 364:test3.c       ****                             cmd_buf_len[i]++;
 365:test3.c       ****                             cmd_buf[i][cmd_buf_len[i]] = '\0';
 366:test3.c       ****                             fast_printf(i == 0, i == 1, "\x1b[47;30m%s\x1b[0m", last_keybuf[i]); //
 367:test3.c       ****                         }
 368:test3.c       ****                         else if (!(last_keybuf_len[i] == 3 && last_keybuf[i][0] == 27 && last_keybu
 369:test3.c       ****                         {
 370:test3.c       ****                             write(i + 3, &last_keybuf[i], last_keybuf_len[i]); // Write the keypres
 371:test3.c       ****                         }
 372:test3.c       ****                     }
 373:test3.c       ****                     last_keybuf[i][0] = '\0'; // Clear the key buffer
 374:test3.c       ****                     last_keybuf_len[i] = 0;
 375:test3.c       ****                 }
 376:test3.c       ****                 keypress[i] = -1; // Reset keypress
 377:test3.c       ****             }


 378:test3.c       ****             else // If the user is in command input mode
 379:test3.c       ****             {
 380:test3.c       ****                 // Handle tip updates
 381:test3.c       ****                	if (runtime - last_tip_changed[i] >= 800 + some_num2)
 541               		.loc 1 381 58 view .LVU94
 542 02da 2C00      		move.l %d0,%d6
 543 02dc 0686 0000 		add.l #800,%d6
 543      0320 
 544               	.LVL53:
 545               	.L42:
 294:test3.c       ****             {
 546               		.loc 1 294 13 is_stmt 1 view .LVU95
 294:test3.c       ****             {
 547               		.loc 1 294 16 is_stmt 0 view .LVU96
 548 02e2 4A32 3800 		tst.b (%a2,%d3.l)
 549 02e6 6700 0174 		jeq .L54
 550               		.loc 1 381 17 is_stmt 1 view .LVU97
 551               		.loc 1 381 29 is_stmt 0 view .LVU98
 552 02ea 2239 0000 		move.l runtime,%d1
 552      0000 
 553               		.loc 1 381 47 view .LVU99
 554 02f0 200A      		move.l %a2,%d0
 555 02f2 D08A      		add.l %a2,%d0
 556 02f4 2040      		move.l %d0,%a0
 557 02f6 D1C0      		add.l %d0,%a0
 558               		.loc 1 381 29 view .LVU100
 559 02f8 2241      		move.l %d1,%a1
 560 02fa 93F7 8834 		sub.l 52(%sp,%a0.l),%a1
 561               		.loc 1 381 20 view .LVU101
 562 02fe BC89      		cmp.l %a1,%d6
 563 0300 634E      		jls .L40
 292:test3.c       ****         {
 564               		.loc 1 292 30 view .LVU102
 565 0302 2479 0000 		move.l i,%a2
 565      0000 
 566               	.L39:
 292:test3.c       ****         {
 567               		.loc 1 292 30 is_stmt 1 discriminator 2 view .LVU103
 568 0308 528A      		addq.l #1,%a2
 569 030a 23CA 0000 		move.l %a2,i
 569      0000 
 292:test3.c       ****         {
 570               		.loc 1 292 23 discriminator 2 view .LVU104
 571 0310 7001      		moveq #1,%d0
 572 0312 B08A      		cmp.l %a2,%d0
 573 0314 6CCC      		jge .L42
 382:test3.c       ****                 {
 383:test3.c       ****                     if (tip_num[i] == TOTALTIPS - 1)
 384:test3.c       ****                         tip_num[i] = 0; // Reset to the first tip
 385:test3.c       ****                     else
 386:test3.c       ****                         tip_num[i]++; // Move to the next tip
 387:test3.c       **** 
 388:test3.c       ****                     last_tip_changed[i] = runtime; // Update the last tip change timestamp
 389:test3.c       ****                     fast_printf(i == 0, i == 1, CURSORINVISIBLE); // Hide the cursor
 390:test3.c       ****                     fast_printf(i == 0, i == 1, SAVECURSORLOC); // Save the cursor position
 391:test3.c       ****                     fast_printf(i == 0, i == 1, "\x1b[999;H\x1b[47;30m%s\x1b[K\x1b[0m", tip_list[ti
 392:test3.c       ****                     fast_printf(i == 0, i == 1, RETCURSORLOC); // Restore the cursor position


 393:test3.c       ****                     fast_printf(i == 0, i == 1, CURSORVISIBLE); // Make the cursor visible again
 394:test3.c       ****                 }
 395:test3.c       ****             }
 396:test3.c       ****         }
 397:test3.c       ****         V(1); // Release semaphore 1
 574               		.loc 1 397 9 view .LVU105
 575 0316 4878 0001 		pea 1.w
 576               		.cfi_def_cfa_offset 68
 577 031a 4E94      		jsr (%a4)
 578               	.LVL54:
 398:test3.c       ****         V(0); // Release semaphore 0
 579               		.loc 1 398 9 view .LVU106
 580 031c 42A7      		clr.l -(%sp)
 581               		.cfi_def_cfa_offset 72
 582 031e 4E94      		jsr (%a4)
 583               	.LVL55:
 284:test3.c       ****     {
 584               		.loc 1 284 11 view .LVU107
 286:test3.c       ****         P(1); // Lock semaphore 1 for additional synchronization
 585               		.loc 1 286 9 is_stmt 0 view .LVU108
 586 0320 508F      		addq.l #8,%sp
 587               		.cfi_def_cfa_offset 64
 280:test3.c       ****     int some_num2; // Random value to add variability to tip update intervals
 588               		.loc 1 280 5 is_stmt 1 view .LVU109
 281:test3.c       **** 
 589               		.loc 1 281 5 view .LVU110
 284:test3.c       ****     {
 590               		.loc 1 284 5 view .LVU111
 286:test3.c       ****         P(1); // Lock semaphore 1 for additional synchronization
 591               		.loc 1 286 9 view .LVU112
 592 0322 42A7      		clr.l -(%sp)
 593               		.cfi_def_cfa_offset 68
 594 0324 4E95      		jsr (%a5)
 595               	.LVL56:
 287:test3.c       **** 
 596               		.loc 1 287 9 view .LVU113
 597 0326 4878 0001 		pea 1.w
 598               		.cfi_def_cfa_offset 72
 599 032a 4E95      		jsr (%a5)
 600               	.LVL57:
 289:test3.c       **** 
 601               		.loc 1 289 9 view .LVU114
 289:test3.c       **** 
 602               		.loc 1 289 21 is_stmt 0 view .LVU115
 603 032c 2045      		move.l %d5,%a0
 604 032e 4E90      		jsr (%a0)
 605               	.LVL58:
 289:test3.c       **** 
 606               		.loc 1 289 19 view .LVU116
 607 0330 4878 0064 		pea 100.w
 608               		.cfi_def_cfa_offset 76
 609 0334 2F00      		move.l %d0,-(%sp)
 610               		.cfi_def_cfa_offset 80
 611 0336 2244      		move.l %d4,%a1
 612 0338 4E91      		jsr (%a1)
 613               	.LVL59:
 292:test3.c       ****         {


 614               		.loc 1 292 9 is_stmt 1 view .LVU117
 292:test3.c       ****         {
 615               		.loc 1 292 16 is_stmt 0 view .LVU118
 616 033a 42B9 0000 		clr.l i
 616      0000 
 292:test3.c       ****         {
 617               		.loc 1 292 23 is_stmt 1 view .LVU119
 292:test3.c       ****         {
 618               		.loc 1 292 16 is_stmt 0 view .LVU120
 619 0340 4FEF 0010 		lea (16,%sp),%sp
 620               		.cfi_def_cfa_offset 64
 292:test3.c       ****         {
 621               		.loc 1 292 23 view .LVU121
 622 0344 95CA      		sub.l %a2,%a2
 381:test3.c       ****                 {
 623               		.loc 1 381 58 view .LVU122
 624 0346 2C00      		move.l %d0,%d6
 625 0348 0686 0000 		add.l #800,%d6
 625      0320 
 626 034e 6092      		jra .L42
 627               	.LVL60:
 628               	.L40:
 383:test3.c       ****                         tip_num[i] = 0; // Reset to the first tip
 629               		.loc 1 383 21 is_stmt 1 view .LVU123
 383:test3.c       ****                         tip_num[i] = 0; // Reset to the first tip
 630               		.loc 1 383 32 is_stmt 0 view .LVU124
 631 0350 2076 8800 		move.l (%a6,%a0.l),%a0
 383:test3.c       ****                         tip_num[i] = 0; // Reset to the first tip
 632               		.loc 1 383 24 view .LVU125
 633 0354 7403      		moveq #3,%d2
 634 0356 B488      		cmp.l %a0,%d2
 635 0358 6700 0174 		jeq .L44
 386:test3.c       **** 
 636               		.loc 1 386 25 is_stmt 1 view .LVU126
 386:test3.c       **** 
 637               		.loc 1 386 35 is_stmt 0 view .LVU127
 638 035c 5288      		addq.l #1,%a0
 384:test3.c       ****                     else
 639               		.loc 1 384 36 view .LVU128
 640 035e D080      		add.l %d0,%d0
 641 0360 2D88 0800 		move.l %a0,(%a6,%d0.l)
 388:test3.c       ****                     fast_printf(i == 0, i == 1, CURSORINVISIBLE); // Hide the cursor
 642               		.loc 1 388 21 is_stmt 1 view .LVU129
 388:test3.c       ****                     fast_printf(i == 0, i == 1, CURSORINVISIBLE); // Hide the cursor
 643               		.loc 1 388 41 is_stmt 0 view .LVU130
 644 0364 2F81 0834 		move.l %d1,52(%sp,%d0.l)
 389:test3.c       ****                     fast_printf(i == 0, i == 1, SAVECURSORLOC); // Save the cursor position
 645               		.loc 1 389 21 is_stmt 1 view .LVU131
 646 0368 4879 0000 		pea .LC1
 646      0000 
 647               		.cfi_def_cfa_offset 68
 648 036e 7201      		moveq #1,%d1
 649 0370 B28A      		cmp.l %a2,%d1
 650 0372 57C0      		seq %d0
 651 0374 4880      		ext.w %d0
 652 0376 48C0      		ext.l %d0
 653 0378 4480      		neg.l %d0


 654 037a 2F00      		move.l %d0,-(%sp)
 655               		.cfi_def_cfa_offset 72
 656 037c B4FC 0000 		cmp.w #0,%a2
 657 0380 57C0      		seq %d0
 658 0382 4880      		ext.w %d0
 659 0384 3440      		move.w %d0,%a2
 660 0386 240A      		move.l %a2,%d2
 661 0388 4482      		neg.l %d2
 662 038a 2F02      		move.l %d2,-(%sp)
 663               		.cfi_def_cfa_offset 76
 664 038c 4E93      		jsr (%a3)
 665               	.LVL61:
 390:test3.c       ****                     fast_printf(i == 0, i == 1, "\x1b[999;H\x1b[47;30m%s\x1b[K\x1b[0m", tip_list[ti
 666               		.loc 1 390 21 view .LVU132
 667 038e 2039 0000 		move.l i,%d0
 667      0000 
 668 0394 4879 0000 		pea .LC2
 668      0000 
 669               		.cfi_def_cfa_offset 80
 670 039a 7401      		moveq #1,%d2
 671 039c B480      		cmp.l %d0,%d2
 672 039e 57C1      		seq %d1
 673 03a0 4881      		ext.w %d1
 674 03a2 48C1      		ext.l %d1
 675 03a4 4481      		neg.l %d1
 676 03a6 2F01      		move.l %d1,-(%sp)
 677               		.cfi_def_cfa_offset 84
 678 03a8 4A80      		tst.l %d0
 679 03aa 57C0      		seq %d0
 680 03ac 4880      		ext.w %d0
 681 03ae 48C0      		ext.l %d0
 682 03b0 4480      		neg.l %d0
 683 03b2 2F00      		move.l %d0,-(%sp)
 684               		.cfi_def_cfa_offset 88
 685 03b4 4E93      		jsr (%a3)
 686               	.LVL62:
 391:test3.c       ****                     fast_printf(i == 0, i == 1, RETCURSORLOC); // Restore the cursor position
 687               		.loc 1 391 21 view .LVU133
 391:test3.c       ****                     fast_printf(i == 0, i == 1, RETCURSORLOC); // Restore the cursor position
 688               		.loc 1 391 105 is_stmt 0 view .LVU134
 689 03b6 2039 0000 		move.l i,%d0
 689      0000 
 690 03bc 2200      		move.l %d0,%d1
 691 03be D280      		add.l %d0,%d1
 692 03c0 D281      		add.l %d1,%d1
 391:test3.c       ****                     fast_printf(i == 0, i == 1, RETCURSORLOC); // Restore the cursor position
 693               		.loc 1 391 97 view .LVU135
 694 03c2 2076 1800 		move.l (%a6,%d1.l),%a0
 695 03c6 2208      		move.l %a0,%d1
 696 03c8 D288      		add.l %a0,%d1
 697 03ca D288      		add.l %a0,%d1
 698 03cc 2401      		move.l %d1,%d2
 699 03ce EB8A      		lsl.l #5,%d2
 700 03d0 D282      		add.l %d2,%d1
 701 03d2 D288      		add.l %a0,%d1
 391:test3.c       ****                     fast_printf(i == 0, i == 1, RETCURSORLOC); // Restore the cursor position
 702               		.loc 1 391 21 view .LVU136


 703 03d4 0681 0000 		add.l #tip_list,%d1
 703      0000 
 704 03da 2F01      		move.l %d1,-(%sp)
 705               		.cfi_def_cfa_offset 92
 706 03dc 4879 0000 		pea .LC9
 706      0000 
 707               		.cfi_def_cfa_offset 96
 708 03e2 7401      		moveq #1,%d2
 709 03e4 B480      		cmp.l %d0,%d2
 710 03e6 57C1      		seq %d1
 711 03e8 4881      		ext.w %d1
 712 03ea 48C1      		ext.l %d1
 713 03ec 4481      		neg.l %d1
 714 03ee 2F01      		move.l %d1,-(%sp)
 715               		.cfi_def_cfa_offset 100
 716 03f0 4A80      		tst.l %d0
 717 03f2 57C0      		seq %d0
 718 03f4 4880      		ext.w %d0
 719 03f6 48C0      		ext.l %d0
 720 03f8 4480      		neg.l %d0
 721 03fa 2F00      		move.l %d0,-(%sp)
 722               		.cfi_def_cfa_offset 104
 723 03fc 4E93      		jsr (%a3)
 724               	.LVL63:
 392:test3.c       ****                     fast_printf(i == 0, i == 1, CURSORVISIBLE); // Make the cursor visible again
 725               		.loc 1 392 21 is_stmt 1 view .LVU137
 726 03fe 2039 0000 		move.l i,%d0
 726      0000 
 727 0404 4FEF 0024 		lea (36,%sp),%sp
 728               		.cfi_def_cfa_offset 68
 729 0408 2EBC 0000 		move.l #.LC4,(%sp)
 729      0000 
 730 040e B480      		cmp.l %d0,%d2
 731 0410 57C1      		seq %d1
 732 0412 4881      		ext.w %d1
 733 0414 48C1      		ext.l %d1
 734 0416 4481      		neg.l %d1
 735 0418 2F01      		move.l %d1,-(%sp)
 736               		.cfi_def_cfa_offset 72
 737 041a 4A80      		tst.l %d0
 738 041c 57C0      		seq %d0
 739 041e 4880      		ext.w %d0
 740 0420 48C0      		ext.l %d0
 741 0422 4480      		neg.l %d0
 742 0424 2F00      		move.l %d0,-(%sp)
 743               		.cfi_def_cfa_offset 76
 744 0426 4E93      		jsr (%a3)
 745               	.LVL64:
 393:test3.c       ****                 }
 746               		.loc 1 393 21 view .LVU138
 747 0428 2039 0000 		move.l i,%d0
 747      0000 
 748 042e 4879 0000 		pea .LC5
 748      0000 
 749               		.cfi_def_cfa_offset 80
 750 0434 B480      		cmp.l %d0,%d2
 751 0436 57C1      		seq %d1


 752 0438 4881      		ext.w %d1
 753 043a 48C1      		ext.l %d1
 754 043c 4481      		neg.l %d1
 755 043e 2F01      		move.l %d1,-(%sp)
 756               		.cfi_def_cfa_offset 84
 757 0440 4A80      		tst.l %d0
 758 0442 57C0      		seq %d0
 759 0444 4880      		ext.w %d0
 760 0446 48C0      		ext.l %d0
 761 0448 4480      		neg.l %d0
 762 044a 2F00      		move.l %d0,-(%sp)
 763               		.cfi_def_cfa_offset 88
 764 044c 4E93      		jsr (%a3)
 765               	.LVL65:
 292:test3.c       ****         {
 766               		.loc 1 292 30 is_stmt 0 view .LVU139
 767 044e 2479 0000 		move.l i,%a2
 767      0000 
 768 0454 4FEF 0018 		lea (24,%sp),%sp
 769               		.cfi_def_cfa_offset 64
 770 0458 6000 FEAE 		jra .L39
 771               	.L54:
 296:test3.c       **** 
 772               		.loc 1 296 17 is_stmt 1 view .LVU140
 296:test3.c       **** 
 773               		.loc 1 296 31 is_stmt 0 view .LVU141
 774 045c B4FC 0000 		cmp.w #0,%a2
 775 0460 56C0      		sne %d0
 776 0462 4880      		ext.w %d0
 777 0464 3440      		move.w %d0,%a2
 778 0466 200A      		move.l %a2,%d0
 779 0468 4480      		neg.l %d0
 780 046a 2F00      		move.l %d0,-(%sp)
 781               		.cfi_def_cfa_offset 68
 782 046c 4EB9 0000 		jsr inkey
 782      0000 
 783               	.LVL66:
 296:test3.c       **** 
 784               		.loc 1 296 25 view .LVU142
 785 0472 2479 0000 		move.l i,%a2
 785      0000 
 296:test3.c       **** 
 786               		.loc 1 296 29 view .LVU143
 787 0478 1580 7800 		move.b %d0,(%a2,%d7.l)
 298:test3.c       ****                 {
 788               		.loc 1 298 17 is_stmt 1 view .LVU144
 298:test3.c       ****                 {
 789               		.loc 1 298 20 is_stmt 0 view .LVU145
 790 047c 588F      		addq.l #4,%sp
 791               		.cfi_def_cfa_offset 64
 792 047e 0C00 FFFF 		cmp.b #-1,%d0
 793 0482 6700 014A 		jeq .L25
 300:test3.c       ****                     {
 794               		.loc 1 300 21 is_stmt 1 view .LVU146
 300:test3.c       ****                     {
 795               		.loc 1 300 24 is_stmt 0 view .LVU147
 796 0486 41F9 0000 		lea in_alt_screen,%a0


 796      0000 
 797 048c 4A30 A800 		tst.b (%a0,%a2.l)
 798 0490 6600 02B6 		jne .L55
 309:test3.c       ****                         last_keybuf_len[i]++;
 799               		.loc 1 309 25 is_stmt 1 view .LVU148
 309:test3.c       ****                         last_keybuf_len[i]++;
 800               		.loc 1 309 55 is_stmt 0 view .LVU149
 801 0494 220A      		move.l %a2,%d1
 802 0496 D28A      		add.l %a2,%d1
 803 0498 D281      		add.l %d1,%d1
 804 049a 41F9 0000 		lea last_keybuf_len,%a0
 804      0000 
 805 04a0 2270 1800 		move.l (%a0,%d1.l),%a1
 309:test3.c       ****                         last_keybuf_len[i]++;
 806               		.loc 1 309 60 view .LVU150
 807 04a4 41F2 1800 		lea (%a2,%d1.l),%a0
 808 04a8 D1C8      		add.l %a0,%a0
 809 04aa D1FC 0000 		add.l #last_keybuf,%a0
 809      0000 
 810 04b0 1180 9800 		move.b %d0,(%a0,%a1.l)
 310:test3.c       ****                         last_keybuf[i][last_keybuf_len[i]] = '\0';
 811               		.loc 1 310 25 is_stmt 1 view .LVU151
 310:test3.c       ****                         last_keybuf[i][last_keybuf_len[i]] = '\0';
 812               		.loc 1 310 43 is_stmt 0 view .LVU152
 813 04b4 2009      		move.l %a1,%d0
 814 04b6 5280      		addq.l #1,%d0
 815 04b8 43F9 0000 		lea last_keybuf_len,%a1
 815      0000 
 816 04be 2380 1800 		move.l %d0,(%a1,%d1.l)
 311:test3.c       ****                     }
 817               		.loc 1 311 25 is_stmt 1 view .LVU153
 311:test3.c       ****                     }
 818               		.loc 1 311 60 is_stmt 0 view .LVU154
 819 04c2 4230 0800 		clr.b (%a0,%d0.l)
 820               	.L27:
 376:test3.c       ****             }
 821               		.loc 1 376 17 is_stmt 1 view .LVU155
 376:test3.c       ****             }
 822               		.loc 1 376 29 is_stmt 0 view .LVU156
 823 04c6 50F2 7800 		st (%a2,%d7.l)
 824 04ca 6000 FE3C 		jra .L39
 825               	.L44:
 826 04ce 91C8      		sub.l %a0,%a0
 384:test3.c       ****                     else
 827               		.loc 1 384 36 view .LVU157
 828 04d0 D080      		add.l %d0,%d0
 829 04d2 2D88 0800 		move.l %a0,(%a6,%d0.l)
 388:test3.c       ****                     fast_printf(i == 0, i == 1, CURSORINVISIBLE); // Hide the cursor
 830               		.loc 1 388 21 is_stmt 1 view .LVU158
 388:test3.c       ****                     fast_printf(i == 0, i == 1, CURSORINVISIBLE); // Hide the cursor
 831               		.loc 1 388 41 is_stmt 0 view .LVU159
 832 04d6 2F81 0834 		move.l %d1,52(%sp,%d0.l)
 389:test3.c       ****                     fast_printf(i == 0, i == 1, SAVECURSORLOC); // Save the cursor position
 833               		.loc 1 389 21 is_stmt 1 view .LVU160
 834 04da 4879 0000 		pea .LC1
 834      0000 
 835               		.cfi_def_cfa_offset 68


 836 04e0 7201      		moveq #1,%d1
 837 04e2 B28A      		cmp.l %a2,%d1
 838 04e4 57C0      		seq %d0
 839 04e6 4880      		ext.w %d0
 840 04e8 48C0      		ext.l %d0
 841 04ea 4480      		neg.l %d0
 842 04ec 2F00      		move.l %d0,-(%sp)
 843               		.cfi_def_cfa_offset 72
 844 04ee B4FC 0000 		cmp.w #0,%a2
 845 04f2 57C0      		seq %d0
 846 04f4 4880      		ext.w %d0
 847 04f6 3440      		move.w %d0,%a2
 848 04f8 240A      		move.l %a2,%d2
 849 04fa 4482      		neg.l %d2
 850 04fc 2F02      		move.l %d2,-(%sp)
 851               		.cfi_def_cfa_offset 76
 852 04fe 4E93      		jsr (%a3)
 853               	.LVL67:
 390:test3.c       ****                     fast_printf(i == 0, i == 1, "\x1b[999;H\x1b[47;30m%s\x1b[K\x1b[0m", tip_list[ti
 854               		.loc 1 390 21 view .LVU161
 855 0500 2039 0000 		move.l i,%d0
 855      0000 
 856 0506 4879 0000 		pea .LC2
 856      0000 
 857               		.cfi_def_cfa_offset 80
 858 050c 7401      		moveq #1,%d2
 859 050e B480      		cmp.l %d0,%d2
 860 0510 57C1      		seq %d1
 861 0512 4881      		ext.w %d1
 862 0514 48C1      		ext.l %d1
 863 0516 4481      		neg.l %d1
 864 0518 2F01      		move.l %d1,-(%sp)
 865               		.cfi_def_cfa_offset 84
 866 051a 4A80      		tst.l %d0
 867 051c 57C0      		seq %d0
 868 051e 4880      		ext.w %d0
 869 0520 48C0      		ext.l %d0
 870 0522 4480      		neg.l %d0
 871 0524 2F00      		move.l %d0,-(%sp)
 872               		.cfi_def_cfa_offset 88
 873 0526 4E93      		jsr (%a3)
 874               	.LVL68:
 391:test3.c       ****                     fast_printf(i == 0, i == 1, RETCURSORLOC); // Restore the cursor position
 875               		.loc 1 391 21 view .LVU162
 391:test3.c       ****                     fast_printf(i == 0, i == 1, RETCURSORLOC); // Restore the cursor position
 876               		.loc 1 391 105 is_stmt 0 view .LVU163
 877 0528 2039 0000 		move.l i,%d0
 877      0000 
 878 052e 2200      		move.l %d0,%d1
 879 0530 D280      		add.l %d0,%d1
 880 0532 D281      		add.l %d1,%d1
 391:test3.c       ****                     fast_printf(i == 0, i == 1, RETCURSORLOC); // Restore the cursor position
 881               		.loc 1 391 97 view .LVU164
 882 0534 2076 1800 		move.l (%a6,%d1.l),%a0
 883 0538 2208      		move.l %a0,%d1
 884 053a D288      		add.l %a0,%d1
 885 053c D288      		add.l %a0,%d1


 886 053e 2401      		move.l %d1,%d2
 887 0540 EB8A      		lsl.l #5,%d2
 888 0542 D282      		add.l %d2,%d1
 889 0544 D288      		add.l %a0,%d1
 391:test3.c       ****                     fast_printf(i == 0, i == 1, RETCURSORLOC); // Restore the cursor position
 890               		.loc 1 391 21 view .LVU165
 891 0546 0681 0000 		add.l #tip_list,%d1
 891      0000 
 892 054c 2F01      		move.l %d1,-(%sp)
 893               		.cfi_def_cfa_offset 92
 894 054e 4879 0000 		pea .LC9
 894      0000 
 895               		.cfi_def_cfa_offset 96
 896 0554 7401      		moveq #1,%d2
 897 0556 B480      		cmp.l %d0,%d2
 898 0558 57C1      		seq %d1
 899 055a 4881      		ext.w %d1
 900 055c 48C1      		ext.l %d1
 901 055e 4481      		neg.l %d1
 902 0560 2F01      		move.l %d1,-(%sp)
 903               		.cfi_def_cfa_offset 100
 904 0562 4A80      		tst.l %d0
 905 0564 57C0      		seq %d0
 906 0566 4880      		ext.w %d0
 907 0568 48C0      		ext.l %d0
 908 056a 4480      		neg.l %d0
 909 056c 2F00      		move.l %d0,-(%sp)
 910               		.cfi_def_cfa_offset 104
 911 056e 4E93      		jsr (%a3)
 912               	.LVL69:
 392:test3.c       ****                     fast_printf(i == 0, i == 1, CURSORVISIBLE); // Make the cursor visible again
 913               		.loc 1 392 21 is_stmt 1 view .LVU166
 914 0570 2039 0000 		move.l i,%d0
 914      0000 
 915 0576 4FEF 0024 		lea (36,%sp),%sp
 916               		.cfi_def_cfa_offset 68
 917 057a 2EBC 0000 		move.l #.LC4,(%sp)
 917      0000 
 918 0580 B480      		cmp.l %d0,%d2
 919 0582 57C1      		seq %d1
 920 0584 4881      		ext.w %d1
 921 0586 48C1      		ext.l %d1
 922 0588 4481      		neg.l %d1
 923 058a 2F01      		move.l %d1,-(%sp)
 924               		.cfi_def_cfa_offset 72
 925 058c 4A80      		tst.l %d0
 926 058e 57C0      		seq %d0
 927 0590 4880      		ext.w %d0
 928 0592 48C0      		ext.l %d0
 929 0594 4480      		neg.l %d0
 930 0596 2F00      		move.l %d0,-(%sp)
 931               		.cfi_def_cfa_offset 76
 932 0598 4E93      		jsr (%a3)
 933               	.LVL70:
 393:test3.c       ****                 }
 934               		.loc 1 393 21 view .LVU167
 935 059a 2039 0000 		move.l i,%d0


 935      0000 
 936 05a0 4879 0000 		pea .LC5
 936      0000 
 937               		.cfi_def_cfa_offset 80
 938 05a6 B480      		cmp.l %d0,%d2
 939 05a8 57C1      		seq %d1
 940 05aa 4881      		ext.w %d1
 941 05ac 48C1      		ext.l %d1
 942 05ae 4481      		neg.l %d1
 943 05b0 2F01      		move.l %d1,-(%sp)
 944               		.cfi_def_cfa_offset 84
 945 05b2 4A80      		tst.l %d0
 946 05b4 57C0      		seq %d0
 947 05b6 4880      		ext.w %d0
 948 05b8 48C0      		ext.l %d0
 949 05ba 4480      		neg.l %d0
 950 05bc 2F00      		move.l %d0,-(%sp)
 951               		.cfi_def_cfa_offset 88
 952 05be 4E93      		jsr (%a3)
 953               	.LVL71:
 292:test3.c       ****         {
 954               		.loc 1 292 30 is_stmt 0 view .LVU168
 955 05c0 2479 0000 		move.l i,%a2
 955      0000 
 956 05c6 4FEF 0018 		lea (24,%sp),%sp
 957               		.cfi_def_cfa_offset 64
 958 05ca 6000 FD3C 		jra .L39
 959               	.L25:
 314:test3.c       ****                 {
 960               		.loc 1 314 22 is_stmt 1 view .LVU169
 314:test3.c       ****                 {
 961               		.loc 1 314 41 is_stmt 0 view .LVU170
 962 05ce 200A      		move.l %a2,%d0
 963 05d0 D08A      		add.l %a2,%d0
 964 05d2 2040      		move.l %d0,%a0
 965 05d4 D1C0      		add.l %d0,%a0
 966 05d6 43F9 0000 		lea last_keybuf_len,%a1
 966      0000 
 967 05dc 2231 8800 		move.l (%a1,%a0.l),%d1
 314:test3.c       ****                 {
 968               		.loc 1 314 25 view .LVU171
 969 05e0 6F00 FEE4 		jle .L27
 316:test3.c       ****                     {
 970               		.loc 1 316 21 is_stmt 1 view .LVU172
 316:test3.c       ****                     {
 971               		.loc 1 316 43 is_stmt 0 view .LVU173
 972 05e4 D1CA      		add.l %a2,%a0
 973 05e6 D1C8      		add.l %a0,%a0
 974 05e8 D1FC 0000 		add.l #last_keybuf,%a0
 974      0000 
 316:test3.c       ****                     {
 975               		.loc 1 316 25 view .LVU174
 976 05ee 7400      		moveq #0,%d2
 977 05f0 1410      		move.b (%a0),%d2
 978 05f2 2242      		move.l %d2,%a1
 979 05f4 741B      		moveq #27,%d2
 980 05f6 B489      		cmp.l %a1,%d2


 981 05f8 6600 01C0 		jne .L29
 316:test3.c       ****                     {
 982               		.loc 1 316 24 view .LVU175
 983 05fc 4A28 0001 		tst.b 1(%a0)
 984 0600 6600 01B8 		jne .L29
 318:test3.c       ****                         fast_printf(i == 0, i == 1, "\x1b[999;H\x1b[47;30m%s\x1b[K\x1b[0m", tip_lis
 985               		.loc 1 318 25 is_stmt 1 view .LVU176
 986 0604 4879 0000 		pea .LC8
 986      0000 
 987               		.cfi_def_cfa_offset 68
 988 060a 7201      		moveq #1,%d1
 989 060c B28A      		cmp.l %a2,%d1
 990 060e 57C0      		seq %d0
 991 0610 4880      		ext.w %d0
 992 0612 48C0      		ext.l %d0
 993 0614 4480      		neg.l %d0
 994 0616 2F00      		move.l %d0,-(%sp)
 995               		.cfi_def_cfa_offset 72
 996 0618 B4FC 0000 		cmp.w #0,%a2
 997 061c 57C0      		seq %d0
 998 061e 4880      		ext.w %d0
 999 0620 48C0      		ext.l %d0
 1000 0622 4480      		neg.l %d0
 1001 0624 2F00      		move.l %d0,-(%sp)
 1002               		.cfi_def_cfa_offset 76
 1003 0626 4E93      		jsr (%a3)
 1004               	.LVL72:
 319:test3.c       ****                         fast_printf(i == 0, i == 1, CURSORMOVE, screen_height - 2, 2); // Move to t
 1005               		.loc 1 319 25 view .LVU177
 319:test3.c       ****                         fast_printf(i == 0, i == 1, CURSORMOVE, screen_height - 2, 2); // Move to t
 1006               		.loc 1 319 109 is_stmt 0 view .LVU178
 1007 0628 2039 0000 		move.l i,%d0
 1007      0000 
 1008 062e 2200      		move.l %d0,%d1
 1009 0630 D280      		add.l %d0,%d1
 1010 0632 D281      		add.l %d1,%d1
 319:test3.c       ****                         fast_printf(i == 0, i == 1, CURSORMOVE, screen_height - 2, 2); // Move to t
 1011               		.loc 1 319 101 view .LVU179
 1012 0634 2076 1800 		move.l (%a6,%d1.l),%a0
 1013 0638 2208      		move.l %a0,%d1
 1014 063a D288      		add.l %a0,%d1
 1015 063c D288      		add.l %a0,%d1
 1016 063e 2401      		move.l %d1,%d2
 1017 0640 EB8A      		lsl.l #5,%d2
 1018 0642 D282      		add.l %d2,%d1
 1019 0644 D288      		add.l %a0,%d1
 319:test3.c       ****                         fast_printf(i == 0, i == 1, CURSORMOVE, screen_height - 2, 2); // Move to t
 1020               		.loc 1 319 25 view .LVU180
 1021 0646 0681 0000 		add.l #tip_list,%d1
 1021      0000 
 1022 064c 2F01      		move.l %d1,-(%sp)
 1023               		.cfi_def_cfa_offset 80
 1024 064e 4879 0000 		pea .LC9
 1024      0000 
 1025               		.cfi_def_cfa_offset 84
 1026 0654 7401      		moveq #1,%d2
 1027 0656 B480      		cmp.l %d0,%d2


 1028 0658 57C1      		seq %d1
 1029 065a 4881      		ext.w %d1
 1030 065c 48C1      		ext.l %d1
 1031 065e 4481      		neg.l %d1
 1032 0660 2F01      		move.l %d1,-(%sp)
 1033               		.cfi_def_cfa_offset 88
 1034 0662 4A80      		tst.l %d0
 1035 0664 57C0      		seq %d0
 1036 0666 4880      		ext.w %d0
 1037 0668 48C0      		ext.l %d0
 1038 066a 4480      		neg.l %d0
 1039 066c 2F00      		move.l %d0,-(%sp)
 1040               		.cfi_def_cfa_offset 92
 1041 066e 4E93      		jsr (%a3)
 1042               	.LVL73:
 320:test3.c       ****                         fast_printf(i == 0, i == 1, "\x1b[1m%s\x1b[0m│%s", msg_input_prompt, msg_
 1043               		.loc 1 320 25 is_stmt 1 view .LVU181
 1044 0670 2039 0000 		move.l i,%d0
 1044      0000 
 1045 0676 4878 0002 		pea 2.w
 1046               		.cfi_def_cfa_offset 96
 1047 067a 2239 0000 		move.l screen_height,%d1
 1047      0000 
 1048 0680 5581      		subq.l #2,%d1
 1049 0682 2F01      		move.l %d1,-(%sp)
 1050               		.cfi_def_cfa_offset 100
 1051 0684 4879 0000 		pea .LC10
 1051      0000 
 1052               		.cfi_def_cfa_offset 104
 1053 068a B480      		cmp.l %d0,%d2
 1054 068c 57C1      		seq %d1
 1055 068e 4881      		ext.w %d1
 1056 0690 48C1      		ext.l %d1
 1057 0692 4481      		neg.l %d1
 1058 0694 2F01      		move.l %d1,-(%sp)
 1059               		.cfi_def_cfa_offset 108
 1060 0696 4A80      		tst.l %d0
 1061 0698 57C0      		seq %d0
 1062 069a 4880      		ext.w %d0
 1063 069c 48C0      		ext.l %d0
 1064 069e 4480      		neg.l %d0
 1065 06a0 2F00      		move.l %d0,-(%sp)
 1066               		.cfi_def_cfa_offset 112
 1067 06a2 4E93      		jsr (%a3)
 1068               	.LVL74:
 321:test3.c       ****                         inappcom[i] = true; // Enter command input mode
 1069               		.loc 1 321 25 view .LVU182
 321:test3.c       ****                         inappcom[i] = true; // Enter command input mode
 1070               		.loc 1 321 103 is_stmt 0 view .LVU183
 1071 06a4 2039 0000 		move.l i,%d0
 1071      0000 
 321:test3.c       ****                         inappcom[i] = true; // Enter command input mode
 1072               		.loc 1 321 25 view .LVU184
 1073 06aa 4FEF 0030 		lea (48,%sp),%sp
 1074               		.cfi_def_cfa_offset 64
 321:test3.c       ****                         inappcom[i] = true; // Enter command input mode
 1075               		.loc 1 321 103 view .LVU185


 1076 06ae 2200      		move.l %d0,%d1
 1077 06b0 D280      		add.l %d0,%d1
 1078 06b2 D280      		add.l %d0,%d1
 1079 06b4 2401      		move.l %d1,%d2
 1080 06b6 EB8A      		lsl.l #5,%d2
 1081 06b8 D282      		add.l %d2,%d1
 1082 06ba D280      		add.l %d0,%d1
 321:test3.c       ****                         inappcom[i] = true; // Enter command input mode
 1083               		.loc 1 321 25 view .LVU186
 1084 06bc 0681 0000 		add.l #msg_buf,%d1
 1084      0000 
 1085 06c2 2F01      		move.l %d1,-(%sp)
 1086               		.cfi_def_cfa_offset 68
 1087 06c4 4879 0000 		pea msg_input_prompt
 1087      0000 
 1088               		.cfi_def_cfa_offset 72
 1089 06ca 4879 0000 		pea .LC11
 1089      0000 
 1090               		.cfi_def_cfa_offset 76
 1091 06d0 7401      		moveq #1,%d2
 1092 06d2 B480      		cmp.l %d0,%d2
 1093 06d4 57C1      		seq %d1
 1094 06d6 4881      		ext.w %d1
 1095 06d8 48C1      		ext.l %d1
 1096 06da 4481      		neg.l %d1
 1097 06dc 2F01      		move.l %d1,-(%sp)
 1098               		.cfi_def_cfa_offset 80
 1099 06de 4A80      		tst.l %d0
 1100 06e0 57C0      		seq %d0
 1101 06e2 4880      		ext.w %d0
 1102 06e4 48C0      		ext.l %d0
 1103 06e6 4480      		neg.l %d0
 1104 06e8 2F00      		move.l %d0,-(%sp)
 1105               		.cfi_def_cfa_offset 84
 1106 06ea 4E93      		jsr (%a3)
 1107               	.LVL75:
 322:test3.c       ****                         cmd_buf_len[i] = 0; // Reset the command buffer
 1108               		.loc 1 322 25 is_stmt 1 view .LVU187
 322:test3.c       ****                         cmd_buf_len[i] = 0; // Reset the command buffer
 1109               		.loc 1 322 33 is_stmt 0 view .LVU188
 1110 06ec 2479 0000 		move.l i,%a2
 1110      0000 
 322:test3.c       ****                         cmd_buf_len[i] = 0; // Reset the command buffer
 1111               		.loc 1 322 37 view .LVU189
 1112 06f2 15BC 0001 		move.b #1,(%a2,%d3.l)
 1112      3800 
 323:test3.c       ****                         cmd_buf[i][0] = '\0';
 1113               		.loc 1 323 25 is_stmt 1 view .LVU190
 323:test3.c       ****                         cmd_buf[i][0] = '\0';
 1114               		.loc 1 323 40 is_stmt 0 view .LVU191
 1115 06f8 200A      		move.l %a2,%d0
 1116 06fa D08A      		add.l %a2,%d0
 1117 06fc 2200      		move.l %d0,%d1
 1118 06fe D280      		add.l %d0,%d1
 1119 0700 41F9 0000 		lea cmd_buf_len,%a0
 1119      0000 
 1120 0706 42B0 1800 		clr.l (%a0,%d1.l)


 324:test3.c       ****                     }
 1121               		.loc 1 324 25 is_stmt 1 view .LVU192
 324:test3.c       ****                     }
 1122               		.loc 1 324 39 is_stmt 0 view .LVU193
 1123 070a 2200      		move.l %d0,%d1
 1124 070c D28A      		add.l %a2,%d1
 1125 070e 2401      		move.l %d1,%d2
 1126 0710 EB8A      		lsl.l #5,%d2
 1127 0712 D282      		add.l %d2,%d1
 1128 0714 D28A      		add.l %a2,%d1
 1129 0716 43F9 0000 		lea cmd_buf,%a1
 1129      0000 
 1130 071c 4231 1800 		clr.b (%a1,%d1.l)
 1131 0720 4FEF 0014 		lea (20,%sp),%sp
 1132               		.cfi_def_cfa_offset 64
 1133               	.L30:
 373:test3.c       ****                     last_keybuf_len[i] = 0;
 1134               		.loc 1 373 21 is_stmt 1 view .LVU194
 373:test3.c       ****                     last_keybuf_len[i] = 0;
 1135               		.loc 1 373 39 is_stmt 0 view .LVU195
 1136 0724 D080      		add.l %d0,%d0
 1137 0726 2200      		move.l %d0,%d1
 1138 0728 D28A      		add.l %a2,%d1
 1139 072a D281      		add.l %d1,%d1
 1140 072c 41F9 0000 		lea last_keybuf,%a0
 1140      0000 
 1141 0732 4230 1800 		clr.b (%a0,%d1.l)
 374:test3.c       ****                 }
 1142               		.loc 1 374 21 is_stmt 1 view .LVU196
 374:test3.c       ****                 }
 1143               		.loc 1 374 40 is_stmt 0 view .LVU197
 1144 0736 43F9 0000 		lea last_keybuf_len,%a1
 1144      0000 
 1145 073c 42B1 0800 		clr.l (%a1,%d0.l)
 1146               	.L56:
 376:test3.c       ****             }
 1147               		.loc 1 376 17 is_stmt 1 view .LVU198
 376:test3.c       ****             }
 1148               		.loc 1 376 29 is_stmt 0 view .LVU199
 1149 0740 50F2 7800 		st (%a2,%d7.l)
 1150 0744 6000 FBC2 		jra .L39
 1151               	.L55:
 302:test3.c       ****                         in_alt_screen[i] = false;
 1152               		.loc 1 302 25 is_stmt 1 view .LVU200
 1153 0748 4878 002F 		pea 47.w
 1154               		.cfi_def_cfa_offset 68
 1155 074c 4879 0000 		pea .LC6
 1155      0000 
 1156               		.cfi_def_cfa_offset 72
 1157 0752 7201      		moveq #1,%d1
 1158 0754 B28A      		cmp.l %a2,%d1
 1159 0756 57C0      		seq %d0
 1160 0758 4880      		ext.w %d0
 1161 075a 48C0      		ext.l %d0
 1162 075c 4480      		neg.l %d0
 1163 075e 2F00      		move.l %d0,-(%sp)
 1164               		.cfi_def_cfa_offset 76


 1165 0760 B4FC 0000 		cmp.w #0,%a2
 1166 0764 57C0      		seq %d0
 1167 0766 4880      		ext.w %d0
 1168 0768 48C0      		ext.l %d0
 1169 076a 4480      		neg.l %d0
 1170 076c 2F00      		move.l %d0,-(%sp)
 1171               		.cfi_def_cfa_offset 80
 1172 076e 4E93      		jsr (%a3)
 1173               	.LVL76:
 303:test3.c       ****                         fast_printf(i == 0, i == 1, "\x1b[999;H\x1b[47;30m%s\x1b[K", command_prompt
 1174               		.loc 1 303 25 view .LVU201
 303:test3.c       ****                         fast_printf(i == 0, i == 1, "\x1b[999;H\x1b[47;30m%s\x1b[K", command_prompt
 1175               		.loc 1 303 38 is_stmt 0 view .LVU202
 1176 0770 2039 0000 		move.l i,%d0
 1176      0000 
 303:test3.c       ****                         fast_printf(i == 0, i == 1, "\x1b[999;H\x1b[47;30m%s\x1b[K", command_prompt
 1177               		.loc 1 303 42 view .LVU203
 1178 0776 41F9 0000 		lea in_alt_screen,%a0
 1178      0000 
 1179 077c 4230 0800 		clr.b (%a0,%d0.l)
 304:test3.c       ****                     }
 1180               		.loc 1 304 25 is_stmt 1 view .LVU204
 1181 0780 4879 0000 		pea command_prompt
 1181      0000 
 1182               		.cfi_def_cfa_offset 84
 1183 0786 4879 0000 		pea .LC7
 1183      0000 
 1184               		.cfi_def_cfa_offset 88
 1185 078c 7401      		moveq #1,%d2
 1186 078e B480      		cmp.l %d0,%d2
 1187 0790 57C1      		seq %d1
 1188 0792 4881      		ext.w %d1
 1189 0794 48C1      		ext.l %d1
 1190 0796 4481      		neg.l %d1
 1191 0798 2F01      		move.l %d1,-(%sp)
 1192               		.cfi_def_cfa_offset 92
 1193 079a 4A80      		tst.l %d0
 1194 079c 57C0      		seq %d0
 1195 079e 4880      		ext.w %d0
 1196 07a0 48C0      		ext.l %d0
 1197 07a2 4480      		neg.l %d0
 1198 07a4 2F00      		move.l %d0,-(%sp)
 1199               		.cfi_def_cfa_offset 96
 1200 07a6 4E93      		jsr (%a3)
 1201               	.LVL77:
 376:test3.c       ****             }
 1202               		.loc 1 376 25 is_stmt 0 view .LVU205
 1203 07a8 2479 0000 		move.l i,%a2
 1203      0000 
 1204 07ae 4FEF 0020 		lea (32,%sp),%sp
 1205               		.cfi_def_cfa_offset 64
 376:test3.c       ****             }
 1206               		.loc 1 376 17 is_stmt 1 view .LVU206
 376:test3.c       ****             }
 1207               		.loc 1 376 29 is_stmt 0 view .LVU207
 1208 07b2 50F2 7800 		st (%a2,%d7.l)
 1209 07b6 6000 FB50 		jra .L39


 1210               	.L29:
 326:test3.c       ****                     {
 1211               		.loc 1 326 26 is_stmt 1 view .LVU208
 326:test3.c       ****                     {
 1212               		.loc 1 326 30 is_stmt 0 view .LVU209
 1213 07ba 747F      		moveq #127,%d2
 1214 07bc B489      		cmp.l %a1,%d2
 1215 07be 6600 00A0 		jne .L32
 326:test3.c       ****                     {
 1216               		.loc 1 326 29 view .LVU210
 1217 07c2 4A28 0001 		tst.b 1(%a0)
 1218 07c6 6600 0098 		jne .L32
 328:test3.c       ****                         {
 1219               		.loc 1 328 25 is_stmt 1 view .LVU211
 328:test3.c       ****                         {
 1220               		.loc 1 328 40 is_stmt 0 view .LVU212
 1221 07ca 2200      		move.l %d0,%d1
 1222 07cc D280      		add.l %d0,%d1
 328:test3.c       ****                         {
 1223               		.loc 1 328 28 view .LVU213
 1224 07ce 41F9 0000 		lea cmd_buf_len,%a0
 1224      0000 
 1225 07d4 4AB0 1800 		tst.l (%a0,%d1.l)
 1226 07d8 6700 FF4A 		jeq .L30
 330:test3.c       ****                             cmd_buf_len[i]--; // Remove the last character from the buffer
 1227               		.loc 1 330 29 is_stmt 1 view .LVU214
 1228 07dc 4879 0000 		pea term_backspace
 1228      0000 
 1229               		.cfi_def_cfa_offset 68
 1230 07e2 4879 0000 		pea .LC12
 1230      0000 
 1231               		.cfi_def_cfa_offset 72
 1232 07e8 7201      		moveq #1,%d1
 1233 07ea B28A      		cmp.l %a2,%d1
 1234 07ec 57C0      		seq %d0
 1235 07ee 4880      		ext.w %d0
 1236 07f0 48C0      		ext.l %d0
 1237 07f2 4480      		neg.l %d0
 1238 07f4 2F00      		move.l %d0,-(%sp)
 1239               		.cfi_def_cfa_offset 76
 1240 07f6 B4FC 0000 		cmp.w #0,%a2
 1241 07fa 57C0      		seq %d0
 1242 07fc 4880      		ext.w %d0
 1243 07fe 48C0      		ext.l %d0
 1244 0800 4480      		neg.l %d0
 1245 0802 2F00      		move.l %d0,-(%sp)
 1246               		.cfi_def_cfa_offset 80
 1247 0804 4E93      		jsr (%a3)
 1248               	.LVL78:
 331:test3.c       ****                             cmd_buf[i][cmd_buf_len[i]] = '\0';
 1249               		.loc 1 331 29 view .LVU215
 331:test3.c       ****                             cmd_buf[i][cmd_buf_len[i]] = '\0';
 1250               		.loc 1 331 40 is_stmt 0 view .LVU216
 1251 0806 2479 0000 		move.l i,%a2
 1251      0000 
 1252 080c 200A      		move.l %a2,%d0
 1253 080e D08A      		add.l %a2,%d0


 1254 0810 2200      		move.l %d0,%d1
 1255 0812 D280      		add.l %d0,%d1
 331:test3.c       ****                             cmd_buf[i][cmd_buf_len[i]] = '\0';
 1256               		.loc 1 331 43 view .LVU217
 1257 0814 41F9 0000 		lea cmd_buf_len,%a0
 1257      0000 
 1258 081a 2270 1800 		move.l (%a0,%d1.l),%a1
 1259 081e 5389      		subq.l #1,%a1
 1260 0820 2189 1800 		move.l %a1,(%a0,%d1.l)
 332:test3.c       ****                         }
 1261               		.loc 1 332 29 is_stmt 1 view .LVU218
 332:test3.c       ****                         }
 1262               		.loc 1 332 56 is_stmt 0 view .LVU219
 1263 0824 2200      		move.l %d0,%d1
 1264 0826 D28A      		add.l %a2,%d1
 1265 0828 2401      		move.l %d1,%d2
 1266 082a EB8A      		lsl.l #5,%d2
 1267 082c 2041      		move.l %d1,%a0
 1268 082e D1C2      		add.l %d2,%a0
 1269 0830 D1CA      		add.l %a2,%a0
 1270 0832 D1FC 0000 		add.l #cmd_buf,%a0
 1270      0000 
 1271 0838 4230 9800 		clr.b (%a0,%a1.l)
 1272 083c 4FEF 0010 		lea (16,%sp),%sp
 1273               		.cfi_def_cfa_offset 64
 373:test3.c       ****                     last_keybuf_len[i] = 0;
 1274               		.loc 1 373 21 is_stmt 1 view .LVU220
 373:test3.c       ****                     last_keybuf_len[i] = 0;
 1275               		.loc 1 373 39 is_stmt 0 view .LVU221
 1276 0840 D080      		add.l %d0,%d0
 1277 0842 2200      		move.l %d0,%d1
 1278 0844 D28A      		add.l %a2,%d1
 1279 0846 D281      		add.l %d1,%d1
 1280 0848 41F9 0000 		lea last_keybuf,%a0
 1280      0000 
 1281 084e 4230 1800 		clr.b (%a0,%d1.l)
 374:test3.c       ****                 }
 1282               		.loc 1 374 21 is_stmt 1 view .LVU222
 374:test3.c       ****                 }
 1283               		.loc 1 374 40 is_stmt 0 view .LVU223
 1284 0852 43F9 0000 		lea last_keybuf_len,%a1
 1284      0000 
 1285 0858 42B1 0800 		clr.l (%a1,%d0.l)
 1286 085c 6000 FEE2 		jra .L56
 1287               	.L32:
 335:test3.c       ****                     {
 1288               		.loc 1 335 26 is_stmt 1 view .LVU224
 335:test3.c       ****                     {
 1289               		.loc 1 335 30 is_stmt 0 view .LVU225
 1290 0860 740D      		moveq #13,%d2
 1291 0862 B489      		cmp.l %a1,%d2
 1292 0864 6600 00D2 		jne .L34
 335:test3.c       ****                     {
 1293               		.loc 1 335 29 view .LVU226
 1294 0868 4A28 0001 		tst.b 1(%a0)
 1295 086c 6600 00CA 		jne .L34
 337:test3.c       ****                         {


 1296               		.loc 1 337 25 is_stmt 1 view .LVU227
 337:test3.c       ****                         {
 1297               		.loc 1 337 40 is_stmt 0 view .LVU228
 1298 0870 2200      		move.l %d0,%d1
 1299 0872 D280      		add.l %d0,%d1
 1300 0874 41F9 0000 		lea cmd_buf_len,%a0
 1300      0000 
 1301 087a 2430 1800 		move.l (%a0,%d1.l),%d2
 337:test3.c       ****                         {
 1302               		.loc 1 337 28 view .LVU229
 1303 087e 6700 FEA4 		jeq .L30
 340:test3.c       ****                                 strncmp(cmd_buf[i], "help", 4) == 0 && cmd_buf_len[i] == 4)
 1304               		.loc 1 340 29 is_stmt 1 view .LVU230
 340:test3.c       ****                                 strncmp(cmd_buf[i], "help", 4) == 0 && cmd_buf_len[i] == 4)
 1305               		.loc 1 340 48 is_stmt 0 view .LVU231
 1306 0882 D08A      		add.l %a2,%d0
 1307 0884 2200      		move.l %d0,%d1
 1308 0886 EB89      		lsl.l #5,%d1
 1309 0888 D081      		add.l %d1,%d0
 1310 088a 41F2 0800 		lea (%a2,%d0.l),%a0
 1311 088e D1FC 0000 		add.l #cmd_buf,%a0
 1311      0000 
 340:test3.c       ****                                 strncmp(cmd_buf[i], "help", 4) == 0 && cmd_buf_len[i] == 4)
 1312               		.loc 1 340 32 view .LVU232
 1313 0894 0C10 0068 		cmp.b #104,(%a0)
 1314 0898 6700 016E 		jeq .L57
 1315               	.L35:
 341:test3.c       ****                             {
 1316               		.loc 1 341 33 discriminator 3 view .LVU233
 1317 089c 4878 0004 		pea 4.w
 1318               		.cfi_def_cfa_offset 68
 1319 08a0 4879 0000 		pea .LC13
 1319      0000 
 1320               		.cfi_def_cfa_offset 72
 1321 08a6 2F08      		move.l %a0,-(%sp)
 1322               		.cfi_def_cfa_offset 76
 1323 08a8 4EB9 0000 		jsr strncmp
 1323      0000 
 1324               	.LVL79:
 1325 08ae 4FEF 000C 		lea (12,%sp),%sp
 1326               		.cfi_def_cfa_offset 64
 340:test3.c       ****                                 strncmp(cmd_buf[i], "help", 4) == 0 && cmd_buf_len[i] == 4)
 1327               		.loc 1 340 89 discriminator 3 view .LVU234
 1328 08b2 4A80      		tst.l %d0
 1329 08b4 6606      		jne .L37
 341:test3.c       ****                             {
 1330               		.loc 1 341 69 view .LVU235
 1331 08b6 5982      		subq.l #4,%d2
 1332 08b8 6700 0156 		jeq .L36
 1333               	.L37:
 353:test3.c       ****                                 cmd_buf_len[i] = 0; // Clear the command buffer
 1334               		.loc 1 353 33 is_stmt 1 view .LVU236
 1335 08bc 4879 0000 		pea command_prompt
 1335      0000 
 1336               		.cfi_def_cfa_offset 68
 1337 08c2 4879 0000 		pea .LC9
 1337      0000 


 1338               		.cfi_def_cfa_offset 72
 1339 08c8 7201      		moveq #1,%d1
 1340 08ca B28A      		cmp.l %a2,%d1
 1341 08cc 57C0      		seq %d0
 1342 08ce 4880      		ext.w %d0
 1343 08d0 48C0      		ext.l %d0
 1344 08d2 4480      		neg.l %d0
 1345 08d4 2F00      		move.l %d0,-(%sp)
 1346               		.cfi_def_cfa_offset 76
 1347 08d6 B4FC 0000 		cmp.w #0,%a2
 1348 08da 57C0      		seq %d0
 1349 08dc 4880      		ext.w %d0
 1350 08de 48C0      		ext.l %d0
 1351 08e0 4480      		neg.l %d0
 1352 08e2 2F00      		move.l %d0,-(%sp)
 1353               		.cfi_def_cfa_offset 80
 1354 08e4 4E93      		jsr (%a3)
 1355               	.LVL80:
 354:test3.c       ****                                 cmd_buf[i][0] = '\0';
 1356               		.loc 1 354 33 view .LVU237
 354:test3.c       ****                                 cmd_buf[i][0] = '\0';
 1357               		.loc 1 354 44 is_stmt 0 view .LVU238
 1358 08e6 2479 0000 		move.l i,%a2
 1358      0000 
 354:test3.c       ****                                 cmd_buf[i][0] = '\0';
 1359               		.loc 1 354 48 view .LVU239
 1360 08ec 200A      		move.l %a2,%d0
 1361 08ee D08A      		add.l %a2,%d0
 1362 08f0 2200      		move.l %d0,%d1
 1363 08f2 D280      		add.l %d0,%d1
 1364 08f4 41F9 0000 		lea cmd_buf_len,%a0
 1364      0000 
 1365 08fa 42B0 1800 		clr.l (%a0,%d1.l)
 355:test3.c       ****                             }
 1366               		.loc 1 355 33 is_stmt 1 view .LVU240
 355:test3.c       ****                             }
 1367               		.loc 1 355 47 is_stmt 0 view .LVU241
 1368 08fe 2200      		move.l %d0,%d1
 1369 0900 D28A      		add.l %a2,%d1
 1370 0902 2401      		move.l %d1,%d2
 1371 0904 EB8A      		lsl.l #5,%d2
 1372 0906 D282      		add.l %d2,%d1
 1373 0908 D28A      		add.l %a2,%d1
 1374 090a 43F9 0000 		lea cmd_buf,%a1
 1374      0000 
 1375 0910 4231 1800 		clr.b (%a1,%d1.l)
 1376 0914 4FEF 0010 		lea (16,%sp),%sp
 1377               		.cfi_def_cfa_offset 64
 373:test3.c       ****                     last_keybuf_len[i] = 0;
 1378               		.loc 1 373 21 is_stmt 1 view .LVU242
 373:test3.c       ****                     last_keybuf_len[i] = 0;
 1379               		.loc 1 373 39 is_stmt 0 view .LVU243
 1380 0918 D080      		add.l %d0,%d0
 1381 091a 2200      		move.l %d0,%d1
 1382 091c D28A      		add.l %a2,%d1
 1383 091e D281      		add.l %d1,%d1
 1384 0920 41F9 0000 		lea last_keybuf,%a0


 1384      0000 
 1385 0926 4230 1800 		clr.b (%a0,%d1.l)
 374:test3.c       ****                 }
 1386               		.loc 1 374 21 is_stmt 1 view .LVU244
 374:test3.c       ****                 }
 1387               		.loc 1 374 40 is_stmt 0 view .LVU245
 1388 092a 43F9 0000 		lea last_keybuf_len,%a1
 1388      0000 
 1389 0930 42B1 0800 		clr.l (%a1,%d0.l)
 1390 0934 6000 FE0A 		jra .L56
 1391               	.L34:
 359:test3.c       ****                     {
 1392               		.loc 1 359 26 is_stmt 1 view .LVU246
 359:test3.c       ****                     {
 1393               		.loc 1 359 29 is_stmt 0 view .LVU247
 1394 0938 5381      		subq.l #1,%d1
 1395 093a 6600 FDE8 		jne .L30
 359:test3.c       ****                     {
 1396               		.loc 1 359 71 discriminator 1 view .LVU248
 1397 093e 2200      		move.l %d0,%d1
 1398 0940 D280      		add.l %d0,%d1
 1399 0942 2F41 002C 		move.l %d1,44(%sp)
 1400 0946 2241      		move.l %d1,%a1
 1401 0948 D3CA      		add.l %a2,%a1
 1402 094a 2209      		move.l %a1,%d1
 1403 094c D289      		add.l %a1,%d1
 1404 094e 43F9 0000 		lea last_keybuf,%a1
 1404      0000 
 1405 0954 1431 1800 		move.b (%a1,%d1.l),%d2
 359:test3.c       ****                     {
 1406               		.loc 1 359 54 discriminator 1 view .LVU249
 1407 0958 1202      		move.b %d2,%d1
 1408 095a 0601 FFE0 		add.b #-32,%d1
 1409 095e 0C01 005E 		cmp.b #94,%d1
 1410 0962 6200 FDC0 		jhi .L30
 361:test3.c       ****                         {
 1411               		.loc 1 361 25 is_stmt 1 view .LVU250
 361:test3.c       ****                         {
 1412               		.loc 1 361 40 is_stmt 0 view .LVU251
 1413 0966 43F9 0000 		lea cmd_buf_len,%a1
 1413      0000 
 1414 096c 222F 002C 		move.l 44(%sp),%d1
 1415 0970 2F71 1800 		move.l (%a1,%d1.l),48(%sp)
 1415      0030 
 361:test3.c       ****                         {
 1416               		.loc 1 361 28 view .LVU252
 1417 0976 7263      		moveq #99,%d1
 1418 0978 B2AF 0030 		cmp.l 48(%sp),%d1
 1419 097c 6500 018E 		jcs .L38
 363:test3.c       ****                             cmd_buf_len[i]++;
 1420               		.loc 1 363 29 is_stmt 1 view .LVU253
 363:test3.c       ****                             cmd_buf_len[i]++;
 1421               		.loc 1 363 56 is_stmt 0 view .LVU254
 1422 0980 D08A      		add.l %a2,%d0
 1423 0982 2200      		move.l %d0,%d1
 1424 0984 EB89      		lsl.l #5,%d1
 1425 0986 2241      		move.l %d1,%a1


 1426 0988 D3C0      		add.l %d0,%a1
 1427 098a D3CA      		add.l %a2,%a1
 1428 098c 2209      		move.l %a1,%d1
 1429 098e 0681 0000 		add.l #cmd_buf,%d1
 1429      0000 
 1430 0994 226F 0030 		move.l 48(%sp),%a1
 1431 0998 1382 1800 		move.b %d2,(%a1,%d1.l)
 364:test3.c       ****                             cmd_buf[i][cmd_buf_len[i]] = '\0';
 1432               		.loc 1 364 29 is_stmt 1 view .LVU255
 364:test3.c       ****                             cmd_buf[i][cmd_buf_len[i]] = '\0';
 1433               		.loc 1 364 43 is_stmt 0 view .LVU256
 1434 099c 2009      		move.l %a1,%d0
 1435 099e 5280      		addq.l #1,%d0
 1436 09a0 43F9 0000 		lea cmd_buf_len,%a1
 1436      0000 
 1437 09a6 242F 002C 		move.l 44(%sp),%d2
 1438 09aa 2380 2800 		move.l %d0,(%a1,%d2.l)
 365:test3.c       ****                             fast_printf(i == 0, i == 1, "\x1b[47;30m%s\x1b[0m", last_keybuf[i]); //
 1439               		.loc 1 365 29 is_stmt 1 view .LVU257
 365:test3.c       ****                             fast_printf(i == 0, i == 1, "\x1b[47;30m%s\x1b[0m", last_keybuf[i]); //
 1440               		.loc 1 365 56 is_stmt 0 view .LVU258
 1441 09ae 2241      		move.l %d1,%a1
 1442 09b0 4231 0800 		clr.b (%a1,%d0.l)
 366:test3.c       ****                         }
 1443               		.loc 1 366 29 is_stmt 1 view .LVU259
 1444 09b4 2F08      		move.l %a0,-(%sp)
 1445               		.cfi_def_cfa_offset 68
 1446 09b6 4879 0000 		pea .LC12
 1446      0000 
 1447               		.cfi_def_cfa_offset 72
 1448 09bc 7201      		moveq #1,%d1
 1449 09be B28A      		cmp.l %a2,%d1
 1450 09c0 57C0      		seq %d0
 1451 09c2 4880      		ext.w %d0
 1452 09c4 48C0      		ext.l %d0
 1453 09c6 4480      		neg.l %d0
 1454 09c8 2F00      		move.l %d0,-(%sp)
 1455               		.cfi_def_cfa_offset 76
 1456 09ca B4FC 0000 		cmp.w #0,%a2
 1457 09ce 57C0      		seq %d0
 1458 09d0 4880      		ext.w %d0
 1459 09d2 48C0      		ext.l %d0
 1460 09d4 4480      		neg.l %d0
 1461 09d6 2F00      		move.l %d0,-(%sp)
 1462               		.cfi_def_cfa_offset 80
 1463 09d8 4E93      		jsr (%a3)
 1464               	.LVL81:
 373:test3.c       ****                     last_keybuf_len[i] = 0;
 1465               		.loc 1 373 35 is_stmt 0 view .LVU260
 1466 09da 2479 0000 		move.l i,%a2
 1466      0000 
 1467 09e0 4FEF 0010 		lea (16,%sp),%sp
 1468               		.cfi_def_cfa_offset 64
 1469 09e4 200A      		move.l %a2,%d0
 1470 09e6 D08A      		add.l %a2,%d0
 373:test3.c       ****                     last_keybuf_len[i] = 0;
 1471               		.loc 1 373 21 is_stmt 1 view .LVU261


 373:test3.c       ****                     last_keybuf_len[i] = 0;
 1472               		.loc 1 373 39 is_stmt 0 view .LVU262
 1473 09e8 D080      		add.l %d0,%d0
 1474 09ea 2200      		move.l %d0,%d1
 1475 09ec D28A      		add.l %a2,%d1
 1476 09ee D281      		add.l %d1,%d1
 1477 09f0 41F9 0000 		lea last_keybuf,%a0
 1477      0000 
 1478 09f6 4230 1800 		clr.b (%a0,%d1.l)
 374:test3.c       ****                 }
 1479               		.loc 1 374 21 is_stmt 1 view .LVU263
 374:test3.c       ****                 }
 1480               		.loc 1 374 40 is_stmt 0 view .LVU264
 1481 09fa 43F9 0000 		lea last_keybuf_len,%a1
 1481      0000 
 1482 0a00 42B1 0800 		clr.l (%a1,%d0.l)
 1483 0a04 6000 FD3A 		jra .L56
 1484               	.L57:
 340:test3.c       ****                                 strncmp(cmd_buf[i], "help", 4) == 0 && cmd_buf_len[i] == 4)
 1485               		.loc 1 340 66 discriminator 1 view .LVU265
 1486 0a08 7001      		moveq #1,%d0
 1487 0a0a B082      		cmp.l %d2,%d0
 1488 0a0c 6600 FE8E 		jne .L35
 1489               	.L36:
 343:test3.c       ****                                 fast_printf(i == 0, i == 1, RESETSGR); // Reset text formatting
 1490               		.loc 1 343 33 is_stmt 1 view .LVU266
 1491 0a10 4878 002F 		pea 47.w
 1492               		.cfi_def_cfa_offset 68
 1493 0a14 4879 0000 		pea .LC14
 1493      0000 
 1494               		.cfi_def_cfa_offset 72
 1495 0a1a 7401      		moveq #1,%d2
 1496 0a1c B48A      		cmp.l %a2,%d2
 1497 0a1e 57C0      		seq %d0
 1498 0a20 4880      		ext.w %d0
 1499 0a22 48C0      		ext.l %d0
 1500 0a24 4480      		neg.l %d0
 1501 0a26 2F00      		move.l %d0,-(%sp)
 1502               		.cfi_def_cfa_offset 76
 1503 0a28 B4FC 0000 		cmp.w #0,%a2
 1504 0a2c 57C0      		seq %d0
 1505 0a2e 4880      		ext.w %d0
 1506 0a30 48C0      		ext.l %d0
 1507 0a32 4480      		neg.l %d0
 1508 0a34 2F00      		move.l %d0,-(%sp)
 1509               		.cfi_def_cfa_offset 80
 1510 0a36 4E93      		jsr (%a3)
 1511               	.LVL82:
 344:test3.c       ****                                 fast_printf(i == 0, i == 1, CLEARDISPLAY); // Clear the screen
 1512               		.loc 1 344 33 view .LVU267
 1513 0a38 2039 0000 		move.l i,%d0
 1513      0000 
 1514 0a3e 4879 0000 		pea .LC8
 1514      0000 
 1515               		.cfi_def_cfa_offset 84
 1516 0a44 B480      		cmp.l %d0,%d2
 1517 0a46 57C1      		seq %d1


 1518 0a48 4881      		ext.w %d1
 1519 0a4a 48C1      		ext.l %d1
 1520 0a4c 4481      		neg.l %d1
 1521 0a4e 2F01      		move.l %d1,-(%sp)
 1522               		.cfi_def_cfa_offset 88
 1523 0a50 4A80      		tst.l %d0
 1524 0a52 57C0      		seq %d0
 1525 0a54 4880      		ext.w %d0
 1526 0a56 48C0      		ext.l %d0
 1527 0a58 4480      		neg.l %d0
 1528 0a5a 2F00      		move.l %d0,-(%sp)
 1529               		.cfi_def_cfa_offset 92
 1530 0a5c 4E93      		jsr (%a3)
 1531               	.LVL83:
 345:test3.c       ****                                 fast_printf(i == 0, i == 1, help_text); // Display help text
 1532               		.loc 1 345 33 view .LVU268
 1533 0a5e 2039 0000 		move.l i,%d0
 1533      0000 
 1534 0a64 4879 0000 		pea .LC15
 1534      0000 
 1535               		.cfi_def_cfa_offset 96
 1536 0a6a B480      		cmp.l %d0,%d2
 1537 0a6c 57C1      		seq %d1
 1538 0a6e 4881      		ext.w %d1
 1539 0a70 48C1      		ext.l %d1
 1540 0a72 4481      		neg.l %d1
 1541 0a74 2F01      		move.l %d1,-(%sp)
 1542               		.cfi_def_cfa_offset 100
 1543 0a76 4A80      		tst.l %d0
 1544 0a78 57C0      		seq %d0
 1545 0a7a 4880      		ext.w %d0
 1546 0a7c 48C0      		ext.l %d0
 1547 0a7e 4480      		neg.l %d0
 1548 0a80 2F00      		move.l %d0,-(%sp)
 1549               		.cfi_def_cfa_offset 104
 1550 0a82 4E93      		jsr (%a3)
 1551               	.LVL84:
 346:test3.c       ****                                 in_alt_screen[i] = true; // Indicate alternate screen is active
 1552               		.loc 1 346 33 view .LVU269
 1553 0a84 2039 0000 		move.l i,%d0
 1553      0000 
 1554 0a8a 4FEF 0024 		lea (36,%sp),%sp
 1555               		.cfi_def_cfa_offset 68
 1556 0a8e 2EBC 0000 		move.l #help_text,(%sp)
 1556      0000 
 1557 0a94 B480      		cmp.l %d0,%d2
 1558 0a96 57C1      		seq %d1
 1559 0a98 4881      		ext.w %d1
 1560 0a9a 48C1      		ext.l %d1
 1561 0a9c 4481      		neg.l %d1
 1562 0a9e 2F01      		move.l %d1,-(%sp)
 1563               		.cfi_def_cfa_offset 72
 1564 0aa0 4A80      		tst.l %d0
 1565 0aa2 57C0      		seq %d0
 1566 0aa4 4880      		ext.w %d0
 1567 0aa6 48C0      		ext.l %d0
 1568 0aa8 4480      		neg.l %d0


 1569 0aaa 2F00      		move.l %d0,-(%sp)
 1570               		.cfi_def_cfa_offset 76
 1571 0aac 4E93      		jsr (%a3)
 1572               	.LVL85:
 347:test3.c       ****                                 cmd_buf_len[i] = 0; // Clear the command buffer
 1573               		.loc 1 347 33 view .LVU270
 347:test3.c       ****                                 cmd_buf_len[i] = 0; // Clear the command buffer
 1574               		.loc 1 347 46 is_stmt 0 view .LVU271
 1575 0aae 2479 0000 		move.l i,%a2
 1575      0000 
 347:test3.c       ****                                 cmd_buf_len[i] = 0; // Clear the command buffer
 1576               		.loc 1 347 50 view .LVU272
 1577 0ab4 41F9 0000 		lea in_alt_screen,%a0
 1577      0000 
 1578 0aba 11BC 0001 		move.b #1,(%a0,%a2.l)
 1578      A800 
 348:test3.c       ****                                 cmd_buf[i][0] = '\0';
 1579               		.loc 1 348 33 is_stmt 1 view .LVU273
 348:test3.c       ****                                 cmd_buf[i][0] = '\0';
 1580               		.loc 1 348 48 is_stmt 0 view .LVU274
 1581 0ac0 200A      		move.l %a2,%d0
 1582 0ac2 D08A      		add.l %a2,%d0
 1583 0ac4 2200      		move.l %d0,%d1
 1584 0ac6 D280      		add.l %d0,%d1
 1585 0ac8 43F9 0000 		lea cmd_buf_len,%a1
 1585      0000 
 1586 0ace 42B1 1800 		clr.l (%a1,%d1.l)
 349:test3.c       ****                             }
 1587               		.loc 1 349 33 is_stmt 1 view .LVU275
 349:test3.c       ****                             }
 1588               		.loc 1 349 47 is_stmt 0 view .LVU276
 1589 0ad2 2200      		move.l %d0,%d1
 1590 0ad4 D28A      		add.l %a2,%d1
 1591 0ad6 2401      		move.l %d1,%d2
 1592 0ad8 EB8A      		lsl.l #5,%d2
 1593 0ada D282      		add.l %d2,%d1
 1594 0adc D28A      		add.l %a2,%d1
 1595 0ade 41F9 0000 		lea cmd_buf,%a0
 1595      0000 
 1596 0ae4 4230 1800 		clr.b (%a0,%d1.l)
 1597 0ae8 4FEF 000C 		lea (12,%sp),%sp
 1598               		.cfi_def_cfa_offset 64
 373:test3.c       ****                     last_keybuf_len[i] = 0;
 1599               		.loc 1 373 21 is_stmt 1 view .LVU277
 373:test3.c       ****                     last_keybuf_len[i] = 0;
 1600               		.loc 1 373 39 is_stmt 0 view .LVU278
 1601 0aec D080      		add.l %d0,%d0
 1602 0aee 2200      		move.l %d0,%d1
 1603 0af0 D28A      		add.l %a2,%d1
 1604 0af2 D281      		add.l %d1,%d1
 1605 0af4 41F9 0000 		lea last_keybuf,%a0
 1605      0000 
 1606 0afa 4230 1800 		clr.b (%a0,%d1.l)
 374:test3.c       ****                 }
 1607               		.loc 1 374 21 is_stmt 1 view .LVU279
 374:test3.c       ****                 }
 1608               		.loc 1 374 40 is_stmt 0 view .LVU280


 1609 0afe 43F9 0000 		lea last_keybuf_len,%a1
 1609      0000 
 1610 0b04 42B1 0800 		clr.l (%a1,%d0.l)
 1611 0b08 6000 FC36 		jra .L56
 1612               	.L38:
 368:test3.c       ****                         {
 1613               		.loc 1 368 30 is_stmt 1 view .LVU281
 1614               	.LBB4:
 370:test3.c       ****                         }
 1615               		.loc 1 370 29 view .LVU282
 1616 0b0c 4878 0001 		pea 1.w
 1617               		.cfi_def_cfa_offset 68
 1618 0b10 2F08      		move.l %a0,-(%sp)
 1619               		.cfi_def_cfa_offset 72
 1620 0b12 486A 0003 		pea 3(%a2)
 1621               		.cfi_def_cfa_offset 76
 1622 0b16 4EB9 0000 		jsr write
 1622      0000 
 1623               	.LVL86:
 1624               	.LBE4:
 373:test3.c       ****                     last_keybuf_len[i] = 0;
 1625               		.loc 1 373 35 is_stmt 0 view .LVU283
 1626 0b1c 2479 0000 		move.l i,%a2
 1626      0000 
 1627 0b22 4FEF 000C 		lea (12,%sp),%sp
 1628               		.cfi_def_cfa_offset 64
 1629 0b26 200A      		move.l %a2,%d0
 1630 0b28 D08A      		add.l %a2,%d0
 373:test3.c       ****                     last_keybuf_len[i] = 0;
 1631               		.loc 1 373 21 is_stmt 1 view .LVU284
 373:test3.c       ****                     last_keybuf_len[i] = 0;
 1632               		.loc 1 373 39 is_stmt 0 view .LVU285
 1633 0b2a D080      		add.l %d0,%d0
 1634 0b2c 2200      		move.l %d0,%d1
 1635 0b2e D28A      		add.l %a2,%d1
 1636 0b30 D281      		add.l %d1,%d1
 1637 0b32 41F9 0000 		lea last_keybuf,%a0
 1637      0000 
 1638 0b38 4230 1800 		clr.b (%a0,%d1.l)
 374:test3.c       ****                 }
 1639               		.loc 1 374 21 is_stmt 1 view .LVU286
 374:test3.c       ****                 }
 1640               		.loc 1 374 40 is_stmt 0 view .LVU287
 1641 0b3c 43F9 0000 		lea last_keybuf_len,%a1
 1641      0000 
 1642 0b42 42B1 0800 		clr.l (%a1,%d0.l)
 1643 0b46 6000 FBF8 		jra .L56
 1644               		.cfi_endproc
 1645               	.LFE5:
 1646               		.size	command_bar, .-command_bar
 1647               		.section	.rodata.str1.1
 1648               	.LC16:
 1649 00bf 1B5B 306D 		.string	"\033[0m\n\342\224\202\033[1;38;5;%dm%s: \033[0m"
 1649      0AE2 9482 
 1649      1B5B 313B 
 1649      3338 3B35 
 1649      3B25 646D 


 1650               	.LC17:
 1651 00dc 1B5B 2564 		.string	"\033[%d;999H\342\224\202"
 1651      3B39 3939 
 1651      48E2 9482 
 1651      00
 1652               	.LC18:
 1653 00e9 1B5B 304B 		.string	"\033[0K"
 1653      00
 1654               	.LC19:
 1655 00ee 1B5B 3939 		.string	"\033[999;H\033[44;97m\033[5mSending Empty message is not allowed\033[K\033[0m"
 1655      393B 481B 
 1655      5B34 343B 
 1655      3937 6D1B 
 1655      5B35 6D53 
 1656               	.LC20:
 1657 012d 1B5B 3939 		.string	"\033[999;H\033[44;97m\033[5mMaximum character limit per message reached (%d characters)\0
 1657      393B 481B 
 1657      5B34 343B 
 1657      3937 6D1B 
 1657      5B35 6D4D 
 1658               		.text
 1659               		.align	2
 1660               		.globl	main_app
 1661               		.type	main_app, @function
 1662               	main_app:
 1663               	.LFB6:
 399:test3.c       ****     }
 400:test3.c       **** }
 401:test3.c       **** 
 402:test3.c       **** // Main application loop to handle user input and message processing
 403:test3.c       **** void main_app()
 404:test3.c       **** {
 1664               		.loc 1 404 1 is_stmt 1 view -0
 1665               		.cfi_startproc
 1666 0b4a 4FEF FFF4 		lea (-12,%sp),%sp
 1667               		.cfi_def_cfa_offset 16
 1668 0b4e 48E7 3F3E 		movem.l #16190,-(%sp)
 1669               		.cfi_def_cfa_offset 60
 1670               		.cfi_offset 2, -60
 1671               		.cfi_offset 3, -56
 1672               		.cfi_offset 4, -52
 1673               		.cfi_offset 5, -48
 1674               		.cfi_offset 6, -44
 1675               		.cfi_offset 7, -40
 1676               		.cfi_offset 10, -36
 1677               		.cfi_offset 11, -32
 1678               		.cfi_offset 12, -28
 1679               		.cfi_offset 13, -24
 1680               		.cfi_offset 14, -20
 405:test3.c       ****     bool warn_length[2] = {false, false}; // Tracks if a warning for maximum length was displayed
 1681               		.loc 1 405 5 view .LVU289
 1682               		.loc 1 405 10 is_stmt 0 view .LVU290
 1683 0b52 422F 0034 		clr.b 52(%sp)
 1684 0b56 422F 0035 		clr.b 53(%sp)
 406:test3.c       ****     bool warn_empty[2] = {false, false};  // Tracks if a warning for empty messages was displayed
 1685               		.loc 1 406 5 is_stmt 1 view .LVU291
 1686               		.loc 1 406 10 is_stmt 0 view .LVU292


 1687 0b5a 422F 0036 		clr.b 54(%sp)
 1688 0b5e 422F 0037 		clr.b 55(%sp)
 1689 0b62 47F9 0000 		lea P,%a3
 1689      0000 
 1690 0b68 4BF9 0000 		lea rand,%a5
 1690      0000 
 1691 0b6e 49F9 0000 		lea inappcom,%a4
 1691      0000 
 1692 0b74 263C 0000 		move.l #inkey,%d3
 1692      0000 
 1693 0b7a 4DF9 0000 		lea keypress,%a6
 1693      0000 
 1694 0b80 243C 0000 		move.l #last_keybuf_len,%d2
 1694      0000 
 1695 0b86 283C 0000 		move.l #last_keybuf,%d4
 1695      0000 
 1696 0b8c 2E3C 0000 		move.l #fast_printf,%d7
 1696      0000 
 1697 0b92 45F9 0000 		lea V,%a2
 1697      0000 
 407:test3.c       ****     int some_num1; // Random variable for potential delays or additional functionality
 1698               		.loc 1 407 5 is_stmt 1 view .LVU293
 408:test3.c       **** 
 409:test3.c       ****     // Infinite loop to process user input and messages
 410:test3.c       ****     while (1)
 1699               		.loc 1 410 5 view .LVU294
 411:test3.c       ****     {
 412:test3.c       ****         P(0); // Lock semaphore 0 for safe resource access
 1700               		.loc 1 412 9 view .LVU295
 1701 0b98 42A7      		clr.l -(%sp)
 1702               		.cfi_def_cfa_offset 64
 1703 0b9a 4E93      		jsr (%a3)
 1704               	.LVL87:
 413:test3.c       ****         P(1); // Lock semaphore 1 for additional synchronization
 1705               		.loc 1 413 9 view .LVU296
 1706 0b9c 4878 0001 		pea 1.w
 1707               		.cfi_def_cfa_offset 68
 1708 0ba0 4E93      		jsr (%a3)
 1709               	.LVL88:
 414:test3.c       **** 
 415:test3.c       ****         some_num1 = rand() %100 ; 
 1710               		.loc 1 415 9 view .LVU297
 1711               		.loc 1 415 21 is_stmt 0 view .LVU298
 1712 0ba2 4E95      		jsr (%a5)
 1713               	.LVL89:
 416:test3.c       **** 
 417:test3.c       ****         // Process input for each channel (0 and 1)
 418:test3.c       ****         for (i = 0; i <= 1; i++)
 1714               		.loc 1 418 9 is_stmt 1 view .LVU299
 1715               		.loc 1 418 16 is_stmt 0 view .LVU300
 1716 0ba4 42B9 0000 		clr.l i
 1716      0000 
 1717               		.loc 1 418 23 is_stmt 1 view .LVU301
 1718               		.loc 1 418 16 is_stmt 0 view .LVU302
 1719 0baa 508F      		addq.l #8,%sp
 1720               		.cfi_def_cfa_offset 60
 1721               		.loc 1 418 23 view .LVU303


 1722 0bac 91C8      		sub.l %a0,%a0
 1723               	.L82:
 419:test3.c       ****         {
 420:test3.c       ****             if (inappcom[i]) // If the user is in command input mode
 1724               		.loc 1 420 13 is_stmt 1 view .LVU304
 1725               		.loc 1 420 16 is_stmt 0 view .LVU305
 1726 0bae 4A34 8800 		tst.b (%a4,%a0.l)
 1727 0bb2 6638      		jne .L59
 418:test3.c       ****         {
 1728               		.loc 1 418 30 view .LVU306
 1729 0bb4 2079 0000 		move.l i,%a0
 1729      0000 
 1730               	.L60:
 418:test3.c       ****         {
 1731               		.loc 1 418 30 is_stmt 1 discriminator 2 view .LVU307
 1732 0bba 5288      		addq.l #1,%a0
 1733 0bbc 23C8 0000 		move.l %a0,i
 1733      0000 
 418:test3.c       ****         {
 1734               		.loc 1 418 23 discriminator 2 view .LVU308
 1735 0bc2 7001      		moveq #1,%d0
 1736 0bc4 B088      		cmp.l %a0,%d0
 1737 0bc6 6CE6      		jge .L82
 421:test3.c       ****             {
 422:test3.c       ****                 keypress[i] = inkey(i); // Get the keypress for the channel
 423:test3.c       **** 
 424:test3.c       ****                 if (keypress[i] != -1) // If a key is pressed
 425:test3.c       ****                 {
 426:test3.c       ****                     // Add the keypress to the key buffer
 427:test3.c       ****                     last_keybuf[i][last_keybuf_len[i]] = keypress[i];
 428:test3.c       ****                     last_keybuf_len[i]++;
 429:test3.c       ****                     last_keybuf[i][last_keybuf_len[i]] = '\0';
 430:test3.c       ****                 }
 431:test3.c       ****                 else
 432:test3.c       ****                 {
 433:test3.c       ****                     if (last_keybuf_len[i] > 0) // If there is data in the key buffer
 434:test3.c       ****                     {
 435:test3.c       ****                         if (strcmp(last_keybuf[i], ESC) == 0) // If Escape key is pressed
 436:test3.c       ****                         {
 437:test3.c       ****                             fast_printf(i == 0, i == 1, "\x1b[999;H\x1b[47;30m%s\x1b[K\x1b[0m", com
 438:test3.c       ****                             inappcom[i] = false; // Exit command input mode
 439:test3.c       ****                         }
 440:test3.c       ****                         else if (strcmp(last_keybuf[i], BACKSPACE) == 0) // If Backspace is pressed
 441:test3.c       ****                         {
 442:test3.c       ****                             if (msg_buf_len[i] > 0) // Ensure the message buffer is not empty
 443:test3.c       ****                             {
 444:test3.c       ****                                 write(i + 3, &term_backspace, 3); // Handle backspace visually
 445:test3.c       ****                                 msg_buf_len[i]--; // Remove the last character from the buffer
 446:test3.c       ****                                 msg_buf[i][msg_buf_len[i]] = '\0';
 447:test3.c       ****                             }
 448:test3.c       ****                         }
 449:test3.c       ****                         else if (strcmp(last_keybuf[i], ENTER) == 0) // If Enter is pressed
 450:test3.c       ****                         {
 451:test3.c       ****                             if (msg_buf_len[i] > 0) // If the message buffer contains data
 452:test3.c       ****                             {
 453:test3.c       ****                                 fast_printf(true, true, DECRESETMODE, 47); // Reset the screen mode
 454:test3.c       ****                                 if (warn_empty[i]) // If an empty message warning was displayed


 455:test3.c       ****                                 {
 456:test3.c       ****                                     fast_printf(i == 0, i == 1, CURSORINVISIBLE);
 457:test3.c       ****                                     fast_printf(i == 0, i == 1, SAVECURSORLOC);
 458:test3.c       ****                                     fast_printf(i == 0, i == 1, "\x1b[999;H\x1b[47;30m%s\x1b[K\x1b[
 459:test3.c       ****                                     fast_printf(i == 0, i == 1, RETCURSORLOC);
 460:test3.c       ****                                     fast_printf(i == 0, i == 1, CURSORVISIBLE);
 461:test3.c       ****                                     warn_empty[i] = false; // Clear the warning flag
 462:test3.c       ****                                 }
 463:test3.c       ****                                 // Display the message in the chat area
 464:test3.c       ****                                 fast_printf(true, true, CURSORINVISIBLE);
 465:test3.c       ****                                 fast_printf(true, true, CURSORMOVE, 1, 1);
 466:test3.c       ****                                 for (j = 0; j < chat_row; j++)
 467:test3.c       ****                                     printf_buf[j] = '\n';
 468:test3.c       ****                                 printf_buf[j + 1] = '\0';
 469:test3.c       ****                                 write(3, &printf_buf, chat_row); // Write the new message to channe
 470:test3.c       ****                                 write(4, &printf_buf, chat_row); // Write the new message to channe
 471:test3.c       ****                                 if (chat_row < screen_height - 5) // Increment chat row if within l
 472:test3.c       ****                                     chat_row++;
 473:test3.c       ****                                 fast_printf(true, true, "\x1b[0m\n│\x1b[1;38;5;%dm%s: \x1b[0m", c
 474:test3.c       ****                                 write(3, &msg_buf[i], msg_buf_len[i]); // Write the message content
 475:test3.c       ****                                 write(4, &msg_buf[i], msg_buf_len[i]);
 476:test3.c       ****                                 fast_printf(true, true, "\x1b[%d;999H│", chat_row + 1); // Update
 477:test3.c       ****                                 msg_buf_len[i] = 0; // Clear the message buffer
 478:test3.c       ****                                 msg_buf[i][0] = '\0';
 479:test3.c       **** 
 480:test3.c       ****                                 // Reset the input area
 481:test3.c       ****                                 fast_printf(true, false, CURSORMOVE, screen_height - 2, term_input_
 482:test3.c       ****                                 fast_printf(false, true, CURSORMOVE, screen_height - 2, term_input_
 483:test3.c       ****                                 fast_printf(i == 0, i == 1, DELETELINEAFTERCURSOR);
 484:test3.c       ****                                 fast_printf(true, true, "\x1b[%d;999H│", screen_height - 2);
 485:test3.c       ****                                 if (inappcom[0])
 486:test3.c       ****                                 {
 487:test3.c       ****                                     fast_printf(true, false, CURSORMOVE, screen_height - 2, term_in
 488:test3.c       ****                                 }
 489:test3.c       ****                                 else
 490:test3.c       ****                                 {
 491:test3.c       ****                                     fast_printf(true, false, CURSORMOVE, screen_height, strlen(comm
 492:test3.c       ****                                 }
 493:test3.c       ****                                 if (inappcom[1])
 494:test3.c       ****                                 {
 495:test3.c       ****                                     fast_printf(false, true, CURSORMOVE, screen_height - 2, term_in
 496:test3.c       ****                                 }
 497:test3.c       ****                                 else
 498:test3.c       ****                                 {
 499:test3.c       ****                                     fast_printf(false, true, CURSORMOVE, screen_height, strlen(comm
 500:test3.c       ****                                 }
 501:test3.c       ****                                 fast_printf(true, true, CURSORVISIBLE); // Make the cursor visible
 502:test3.c       ****                             }
 503:test3.c       ****                             else // If the message buffer is empty
 504:test3.c       ****                             {
 505:test3.c       ****                                 // Display a warning about empty messages
 506:test3.c       ****                                 fast_printf(i == 0, i == 1, CURSORINVISIBLE);
 507:test3.c       ****                                 fast_printf(i == 0, i == 1, SAVECURSORLOC);
 508:test3.c       ****                                 fast_printf(i == 0, i == 1, "\x1b[999;H\x1b[44;97m\x1b[5mSending Em
 509:test3.c       ****                                 fast_printf(i == 0, i == 1, RETCURSORLOC);
 510:test3.c       ****                                 fast_printf(i == 0, i == 1, CURSORVISIBLE);
 511:test3.c       ****                                 warn_empty[i] = true; // Set the warning flag


 512:test3.c       ****                             }
 513:test3.c       ****                             // Restore the alternate screen mode
 514:test3.c       ****                             fast_printf(in_alt_screen[0], in_alt_screen[1], DECSETMODE, 47);
 515:test3.c       ****                             fast_printf(in_alt_screen[0], in_alt_screen[1], CURSORMOVE, 1, 1);
 516:test3.c       ****                             fast_printf(in_alt_screen[0], in_alt_screen[1], help_text);
 517:test3.c       ****                         }
 518:test3.c       ****                         else if (last_keybuf_len[i] == 1 && last_keybuf[i][0] >= 32 && last_keybuf[
 519:test3.c       ****                         {
 520:test3.c       ****                             if (msg_buf_len[i] < 100) // Ensure the buffer does not exceed the limi
 521:test3.c       ****                             {
 522:test3.c       ****                                 msg_buf[i][msg_buf_len[i]] = last_keybuf[i][0]; // Add character to
 523:test3.c       ****                                 msg_buf_len[i]++;
 524:test3.c       ****                                 msg_buf[i][msg_buf_len[i]] = '\0';
 525:test3.c       ****                                 write(i + 3, &last_keybuf[i], last_keybuf_len[i]); // Write the key
 526:test3.c       ****                                 if (warn_length[i]) // If a length warning was displayed
 527:test3.c       ****                                 {
 528:test3.c       ****                                     fast_printf(i == 0, i == 1, CURSORINVISIBLE);
 529:test3.c       ****                                     fast_printf(i == 0, i == 1, SAVECURSORLOC);
 530:test3.c       ****                                     fast_printf(i == 0, i == 1, "\x1b[999;H\x1b[47;30m%s\x1b[K\x1b[
 531:test3.c       ****                                     fast_printf(i == 0, i == 1, RETCURSORLOC);
 532:test3.c       ****                                     fast_printf(i == 0, i == 1, CURSORVISIBLE);
 533:test3.c       ****                                     warn_length[i] = false; // Clear the warning flag
 534:test3.c       ****                                 }
 535:test3.c       ****                             }
 536:test3.c       ****                             else // If the buffer is full
 537:test3.c       ****                             {
 538:test3.c       ****                                 // Display a warning about maximum length
 539:test3.c       ****                                 fast_printf(i == 0, i == 1, CURSORINVISIBLE);
 540:test3.c       ****                                 fast_printf(i == 0, i == 1, SAVECURSORLOC);
 541:test3.c       ****                                 fast_printf(i == 0, i == 1, "\x1b[999;H\x1b[44;97m\x1b[5mMaximum ch
 542:test3.c       ****                                 fast_printf(i == 0, i == 1, RETCURSORLOC);
 543:test3.c       ****                                 fast_printf(i == 0, i == 1, CURSORVISIBLE);
 544:test3.c       ****                                 warn_length[i] = true; // Set the warning flag
 545:test3.c       ****                             }
 546:test3.c       ****                         }
 547:test3.c       ****                         else if (!(last_keybuf_len[i] == 3 && last_keybuf[i][0] == 27 && last_keybu
 548:test3.c       ****                         {
 549:test3.c       ****                             // Ignore arrow keys
 550:test3.c       ****                             write(i + 3, &last_keybuf[i], last_keybuf_len[i]);
 551:test3.c       ****                         }
 552:test3.c       ****                         last_keybuf[i][0] = '\0'; // Clear the key buffer
 553:test3.c       ****                         last_keybuf_len[i] = 0;
 554:test3.c       ****                     }
 555:test3.c       ****                 }
 556:test3.c       ****                 keypress[i] = -1; // Reset the keypress
 557:test3.c       ****             }
 558:test3.c       ****         }
 559:test3.c       ****         V(1); // Release semaphore 1
 1738               		.loc 1 559 9 view .LVU309
 1739 0bc8 4878 0001 		pea 1.w
 1740               		.cfi_def_cfa_offset 64
 1741 0bcc 4E92      		jsr (%a2)
 1742               	.LVL90:
 560:test3.c       ****         V(0); // Release semaphore 0
 1743               		.loc 1 560 9 view .LVU310
 1744 0bce 42A7      		clr.l -(%sp)
 1745               		.cfi_def_cfa_offset 68


 1746 0bd0 4E92      		jsr (%a2)
 1747               	.LVL91:
 410:test3.c       ****     {
 1748               		.loc 1 410 11 view .LVU311
 412:test3.c       ****         P(1); // Lock semaphore 1 for additional synchronization
 1749               		.loc 1 412 9 is_stmt 0 view .LVU312
 1750 0bd2 508F      		addq.l #8,%sp
 1751               		.cfi_def_cfa_offset 60
 407:test3.c       **** 
 1752               		.loc 1 407 5 is_stmt 1 view .LVU313
 410:test3.c       ****     {
 1753               		.loc 1 410 5 view .LVU314
 412:test3.c       ****         P(1); // Lock semaphore 1 for additional synchronization
 1754               		.loc 1 412 9 view .LVU315
 1755 0bd4 42A7      		clr.l -(%sp)
 1756               		.cfi_def_cfa_offset 64
 1757 0bd6 4E93      		jsr (%a3)
 1758               	.LVL92:
 413:test3.c       **** 
 1759               		.loc 1 413 9 view .LVU316
 1760 0bd8 4878 0001 		pea 1.w
 1761               		.cfi_def_cfa_offset 68
 1762 0bdc 4E93      		jsr (%a3)
 1763               	.LVL93:
 415:test3.c       **** 
 1764               		.loc 1 415 9 view .LVU317
 415:test3.c       **** 
 1765               		.loc 1 415 21 is_stmt 0 view .LVU318
 1766 0bde 4E95      		jsr (%a5)
 1767               	.LVL94:
 418:test3.c       ****         {
 1768               		.loc 1 418 9 is_stmt 1 view .LVU319
 418:test3.c       ****         {
 1769               		.loc 1 418 16 is_stmt 0 view .LVU320
 1770 0be0 42B9 0000 		clr.l i
 1770      0000 
 418:test3.c       ****         {
 1771               		.loc 1 418 23 is_stmt 1 view .LVU321
 418:test3.c       ****         {
 1772               		.loc 1 418 16 is_stmt 0 view .LVU322
 1773 0be6 508F      		addq.l #8,%sp
 1774               		.cfi_def_cfa_offset 60
 418:test3.c       ****         {
 1775               		.loc 1 418 23 view .LVU323
 1776 0be8 91C8      		sub.l %a0,%a0
 1777 0bea 60C2      		jra .L82
 1778               	.L59:
 422:test3.c       **** 
 1779               		.loc 1 422 17 is_stmt 1 view .LVU324
 422:test3.c       **** 
 1780               		.loc 1 422 31 is_stmt 0 view .LVU325
 1781 0bec B0FC 0000 		cmp.w #0,%a0
 1782 0bf0 56C0      		sne %d0
 1783 0bf2 4880      		ext.w %d0
 1784 0bf4 3040      		move.w %d0,%a0
 1785 0bf6 2008      		move.l %a0,%d0
 1786 0bf8 4480      		neg.l %d0


 1787 0bfa 2F00      		move.l %d0,-(%sp)
 1788               		.cfi_def_cfa_offset 64
 1789 0bfc 2043      		move.l %d3,%a0
 1790 0bfe 4E90      		jsr (%a0)
 1791               	.LVL95:
 422:test3.c       **** 
 1792               		.loc 1 422 25 view .LVU326
 1793 0c00 2079 0000 		move.l i,%a0
 1793      0000 
 422:test3.c       **** 
 1794               		.loc 1 422 29 view .LVU327
 1795 0c06 1D80 8800 		move.b %d0,(%a6,%a0.l)
 424:test3.c       ****                 {
 1796               		.loc 1 424 17 is_stmt 1 view .LVU328
 424:test3.c       ****                 {
 1797               		.loc 1 424 20 is_stmt 0 view .LVU329
 1798 0c0a 588F      		addq.l #4,%sp
 1799               		.cfi_def_cfa_offset 60
 1800 0c0c 0C00 FFFF 		cmp.b #-1,%d0
 1801 0c10 6732      		jeq .L61
 427:test3.c       ****                     last_keybuf_len[i]++;
 1802               		.loc 1 427 21 is_stmt 1 view .LVU330
 427:test3.c       ****                     last_keybuf_len[i]++;
 1803               		.loc 1 427 51 is_stmt 0 view .LVU331
 1804 0c12 2208      		move.l %a0,%d1
 1805 0c14 D288      		add.l %a0,%d1
 1806 0c16 D281      		add.l %d1,%d1
 1807 0c18 2242      		move.l %d2,%a1
 1808 0c1a 2A31 1800 		move.l (%a1,%d1.l),%d5
 427:test3.c       ****                     last_keybuf_len[i]++;
 1809               		.loc 1 427 56 view .LVU332
 1810 0c1e 43F0 1800 		lea (%a0,%d1.l),%a1
 1811 0c22 D3C9      		add.l %a1,%a1
 1812 0c24 2C09      		move.l %a1,%d6
 1813 0c26 DC84      		add.l %d4,%d6
 1814 0c28 2246      		move.l %d6,%a1
 1815 0c2a 1380 5800 		move.b %d0,(%a1,%d5.l)
 428:test3.c       ****                     last_keybuf[i][last_keybuf_len[i]] = '\0';
 1816               		.loc 1 428 21 is_stmt 1 view .LVU333
 428:test3.c       ****                     last_keybuf[i][last_keybuf_len[i]] = '\0';
 1817               		.loc 1 428 39 is_stmt 0 view .LVU334
 1818 0c2e 5285      		addq.l #1,%d5
 1819 0c30 2242      		move.l %d2,%a1
 1820 0c32 2385 1800 		move.l %d5,(%a1,%d1.l)
 429:test3.c       ****                 }
 1821               		.loc 1 429 21 is_stmt 1 view .LVU335
 429:test3.c       ****                 }
 1822               		.loc 1 429 56 is_stmt 0 view .LVU336
 1823 0c36 2246      		move.l %d6,%a1
 1824 0c38 4231 5800 		clr.b (%a1,%d5.l)
 1825               	.L62:
 556:test3.c       ****             }
 1826               		.loc 1 556 17 is_stmt 1 view .LVU337
 556:test3.c       ****             }
 1827               		.loc 1 556 29 is_stmt 0 view .LVU338
 1828 0c3c 50F6 8800 		st (%a6,%a0.l)
 1829 0c40 6000 FF78 		jra .L60


 1830               	.L61:
 433:test3.c       ****                     {
 1831               		.loc 1 433 21 is_stmt 1 view .LVU339
 433:test3.c       ****                     {
 1832               		.loc 1 433 40 is_stmt 0 view .LVU340
 1833 0c44 2008      		move.l %a0,%d0
 1834 0c46 D088      		add.l %a0,%d0
 1835 0c48 2240      		move.l %d0,%a1
 1836 0c4a D3C0      		add.l %d0,%a1
 1837 0c4c 2231 2800 		move.l (%a1,%d2.l),%d1
 433:test3.c       ****                     {
 1838               		.loc 1 433 24 view .LVU341
 1839 0c50 6FEA      		jle .L62
 435:test3.c       ****                         {
 1840               		.loc 1 435 25 is_stmt 1 view .LVU342
 435:test3.c       ****                         {
 1841               		.loc 1 435 47 is_stmt 0 view .LVU343
 1842 0c52 D3C8      		add.l %a0,%a1
 1843 0c54 D3C9      		add.l %a1,%a1
 1844 0c56 D3FC 0000 		add.l #last_keybuf,%a1
 1844      0000 
 1845 0c5c 2F49 002C 		move.l %a1,44(%sp)
 435:test3.c       ****                         {
 1846               		.loc 1 435 29 view .LVU344
 1847 0c60 7A00      		moveq #0,%d5
 1848 0c62 1A11      		move.b (%a1),%d5
 1849 0c64 7C1B      		moveq #27,%d6
 1850 0c66 BC85      		cmp.l %d5,%d6
 1851 0c68 6660      		jne .L64
 435:test3.c       ****                         {
 1852               		.loc 1 435 28 view .LVU345
 1853 0c6a 4A29 0001 		tst.b 1(%a1)
 1854 0c6e 665A      		jne .L64
 437:test3.c       ****                             inappcom[i] = false; // Exit command input mode
 1855               		.loc 1 437 29 is_stmt 1 view .LVU346
 1856 0c70 4879 0000 		pea command_prompt
 1856      0000 
 1857               		.cfi_def_cfa_offset 64
 1858 0c76 4879 0000 		pea .LC9
 1858      0000 
 1859               		.cfi_def_cfa_offset 68
 1860 0c7c 7201      		moveq #1,%d1
 1861 0c7e B288      		cmp.l %a0,%d1
 1862 0c80 57C0      		seq %d0
 1863 0c82 4880      		ext.w %d0
 1864 0c84 48C0      		ext.l %d0
 1865 0c86 4480      		neg.l %d0
 1866 0c88 2F00      		move.l %d0,-(%sp)
 1867               		.cfi_def_cfa_offset 72
 1868 0c8a B0FC 0000 		cmp.w #0,%a0
 1869 0c8e 57C0      		seq %d0
 1870 0c90 4880      		ext.w %d0
 1871 0c92 48C0      		ext.l %d0
 1872 0c94 4480      		neg.l %d0
 1873 0c96 2F00      		move.l %d0,-(%sp)
 1874               		.cfi_def_cfa_offset 76
 1875 0c98 2047      		move.l %d7,%a0


 1876 0c9a 4E90      		jsr (%a0)
 1877               	.LVL96:
 438:test3.c       ****                         }
 1878               		.loc 1 438 29 view .LVU347
 438:test3.c       ****                         }
 1879               		.loc 1 438 37 is_stmt 0 view .LVU348
 1880 0c9c 2079 0000 		move.l i,%a0
 1880      0000 
 438:test3.c       ****                         }
 1881               		.loc 1 438 41 view .LVU349
 1882 0ca2 4234 8800 		clr.b (%a4,%a0.l)
 1883 0ca6 4FEF 0010 		lea (16,%sp),%sp
 1884               		.cfi_def_cfa_offset 60
 1885 0caa 2008      		move.l %a0,%d0
 1886 0cac D088      		add.l %a0,%d0
 1887               	.L65:
 552:test3.c       ****                         last_keybuf_len[i] = 0;
 1888               		.loc 1 552 25 is_stmt 1 view .LVU350
 552:test3.c       ****                         last_keybuf_len[i] = 0;
 1889               		.loc 1 552 43 is_stmt 0 view .LVU351
 1890 0cae D080      		add.l %d0,%d0
 1891 0cb0 2200      		move.l %d0,%d1
 1892 0cb2 D288      		add.l %a0,%d1
 1893 0cb4 D281      		add.l %d1,%d1
 1894 0cb6 2244      		move.l %d4,%a1
 1895 0cb8 4231 1800 		clr.b (%a1,%d1.l)
 553:test3.c       ****                     }
 1896               		.loc 1 553 25 is_stmt 1 view .LVU352
 553:test3.c       ****                     }
 1897               		.loc 1 553 44 is_stmt 0 view .LVU353
 1898 0cbc 2242      		move.l %d2,%a1
 1899 0cbe 42B1 0800 		clr.l (%a1,%d0.l)
 1900               	.L94:
 556:test3.c       ****             }
 1901               		.loc 1 556 17 is_stmt 1 view .LVU354
 556:test3.c       ****             }
 1902               		.loc 1 556 29 is_stmt 0 view .LVU355
 1903 0cc2 50F6 8800 		st (%a6,%a0.l)
 1904 0cc6 6000 FEF2 		jra .L60
 1905               	.L64:
 440:test3.c       ****                         {
 1906               		.loc 1 440 30 is_stmt 1 view .LVU356
 440:test3.c       ****                         {
 1907               		.loc 1 440 34 is_stmt 0 view .LVU357
 1908 0cca 7C7F      		moveq #127,%d6
 1909 0ccc BC85      		cmp.l %d5,%d6
 1910 0cce 6600 0082 		jne .L67
 440:test3.c       ****                         {
 1911               		.loc 1 440 33 view .LVU358
 1912 0cd2 226F 002C 		move.l 44(%sp),%a1
 1913 0cd6 4A29 0001 		tst.b 1(%a1)
 1914 0cda 6676      		jne .L67
 442:test3.c       ****                             {
 1915               		.loc 1 442 29 is_stmt 1 view .LVU359
 442:test3.c       ****                             {
 1916               		.loc 1 442 44 is_stmt 0 view .LVU360
 1917 0cdc 2200      		move.l %d0,%d1


 1918 0cde D280      		add.l %d0,%d1
 442:test3.c       ****                             {
 1919               		.loc 1 442 32 view .LVU361
 1920 0ce0 43F9 0000 		lea msg_buf_len,%a1
 1920      0000 
 1921 0ce6 4AB1 1800 		tst.l (%a1,%d1.l)
 1922 0cea 67C2      		jeq .L65
 1923               	.LBB5:
 444:test3.c       ****                                 msg_buf_len[i]--; // Remove the last character from the buffer
 1924               		.loc 1 444 33 is_stmt 1 view .LVU362
 1925 0cec 4878 0003 		pea 3.w
 1926               		.cfi_def_cfa_offset 64
 1927 0cf0 4879 0000 		pea term_backspace
 1927      0000 
 1928               		.cfi_def_cfa_offset 68
 1929 0cf6 4868 0003 		pea 3(%a0)
 1930               		.cfi_def_cfa_offset 72
 1931 0cfa 4EB9 0000 		jsr write
 1931      0000 
 1932               	.LVL97:
 445:test3.c       ****                                 msg_buf[i][msg_buf_len[i]] = '\0';
 1933               		.loc 1 445 33 view .LVU363
 445:test3.c       ****                                 msg_buf[i][msg_buf_len[i]] = '\0';
 1934               		.loc 1 445 44 is_stmt 0 view .LVU364
 1935 0d00 2079 0000 		move.l i,%a0
 1935      0000 
 1936 0d06 2008      		move.l %a0,%d0
 1937 0d08 D088      		add.l %a0,%d0
 1938 0d0a 2200      		move.l %d0,%d1
 1939 0d0c D280      		add.l %d0,%d1
 445:test3.c       ****                                 msg_buf[i][msg_buf_len[i]] = '\0';
 1940               		.loc 1 445 47 view .LVU365
 1941 0d0e 43F9 0000 		lea msg_buf_len,%a1
 1941      0000 
 1942 0d14 2A31 1800 		move.l (%a1,%d1.l),%d5
 1943 0d18 5385      		subq.l #1,%d5
 1944 0d1a 2385 1800 		move.l %d5,(%a1,%d1.l)
 446:test3.c       ****                             }
 1945               		.loc 1 446 33 is_stmt 1 view .LVU366
 446:test3.c       ****                             }
 1946               		.loc 1 446 60 is_stmt 0 view .LVU367
 1947 0d1e 2200      		move.l %d0,%d1
 1948 0d20 D288      		add.l %a0,%d1
 1949 0d22 2C01      		move.l %d1,%d6
 1950 0d24 EB8E      		lsl.l #5,%d6
 1951 0d26 2241      		move.l %d1,%a1
 1952 0d28 D3C6      		add.l %d6,%a1
 1953 0d2a D3C8      		add.l %a0,%a1
 1954 0d2c D3FC 0000 		add.l #msg_buf,%a1
 1954      0000 
 1955 0d32 4231 5800 		clr.b (%a1,%d5.l)
 1956 0d36 4FEF 000C 		lea (12,%sp),%sp
 1957               		.cfi_def_cfa_offset 60
 1958               	.LBE5:
 552:test3.c       ****                         last_keybuf_len[i] = 0;
 1959               		.loc 1 552 25 is_stmt 1 view .LVU368
 552:test3.c       ****                         last_keybuf_len[i] = 0;


 1960               		.loc 1 552 43 is_stmt 0 view .LVU369
 1961 0d3a D080      		add.l %d0,%d0
 1962 0d3c 2200      		move.l %d0,%d1
 1963 0d3e D288      		add.l %a0,%d1
 1964 0d40 D281      		add.l %d1,%d1
 1965 0d42 2244      		move.l %d4,%a1
 1966 0d44 4231 1800 		clr.b (%a1,%d1.l)
 553:test3.c       ****                     }
 1967               		.loc 1 553 25 is_stmt 1 view .LVU370
 553:test3.c       ****                     }
 1968               		.loc 1 553 44 is_stmt 0 view .LVU371
 1969 0d48 2242      		move.l %d2,%a1
 1970 0d4a 42B1 0800 		clr.l (%a1,%d0.l)
 1971 0d4e 6000 FF72 		jra .L94
 1972               	.L67:
 449:test3.c       ****                         {
 1973               		.loc 1 449 30 is_stmt 1 view .LVU372
 449:test3.c       ****                         {
 1974               		.loc 1 449 34 is_stmt 0 view .LVU373
 1975 0d52 7C0D      		moveq #13,%d6
 1976 0d54 BC85      		cmp.l %d5,%d6
 1977 0d56 6600 018E 		jne .L69
 1978 0d5a 226F 002C 		move.l 44(%sp),%a1
 1979 0d5e 7A00      		moveq #0,%d5
 1980 0d60 1A29 0001 		move.b 1(%a1),%d5
 449:test3.c       ****                         {
 1981               		.loc 1 449 33 view .LVU374
 1982 0d64 4A85      		tst.l %d5
 1983 0d66 6600 017E 		jne .L69
 451:test3.c       ****                             {
 1984               		.loc 1 451 29 is_stmt 1 view .LVU375
 451:test3.c       ****                             {
 1985               		.loc 1 451 44 is_stmt 0 view .LVU376
 1986 0d6a D080      		add.l %d0,%d0
 451:test3.c       ****                             {
 1987               		.loc 1 451 32 view .LVU377
 1988 0d6c 43F9 0000 		lea msg_buf_len,%a1
 1988      0000 
 1989 0d72 4AB1 0800 		tst.l (%a1,%d0.l)
 1990 0d76 6600 03A4 		jne .L95
 506:test3.c       ****                                 fast_printf(i == 0, i == 1, SAVECURSORLOC);
 1991               		.loc 1 506 33 is_stmt 1 view .LVU378
 1992 0d7a 4879 0000 		pea .LC1
 1992      0000 
 1993               		.cfi_def_cfa_offset 64
 1994 0d80 7201      		moveq #1,%d1
 1995 0d82 B288      		cmp.l %a0,%d1
 1996 0d84 57C0      		seq %d0
 1997 0d86 4880      		ext.w %d0
 1998 0d88 48C0      		ext.l %d0
 1999 0d8a 4480      		neg.l %d0
 2000 0d8c 2F00      		move.l %d0,-(%sp)
 2001               		.cfi_def_cfa_offset 68
 2002 0d8e B0FC 0000 		cmp.w #0,%a0
 2003 0d92 57C0      		seq %d0
 2004 0d94 4880      		ext.w %d0
 2005 0d96 48C0      		ext.l %d0


 2006 0d98 4480      		neg.l %d0
 2007 0d9a 2F00      		move.l %d0,-(%sp)
 2008               		.cfi_def_cfa_offset 72
 2009 0d9c 2047      		move.l %d7,%a0
 2010 0d9e 4E90      		jsr (%a0)
 2011               	.LVL98:
 507:test3.c       ****                                 fast_printf(i == 0, i == 1, "\x1b[999;H\x1b[44;97m\x1b[5mSending Em
 2012               		.loc 1 507 33 view .LVU379
 2013 0da0 2039 0000 		move.l i,%d0
 2013      0000 
 2014 0da6 4879 0000 		pea .LC2
 2014      0000 
 2015               		.cfi_def_cfa_offset 76
 2016 0dac 7A01      		moveq #1,%d5
 2017 0dae BA80      		cmp.l %d0,%d5
 2018 0db0 57C1      		seq %d1
 2019 0db2 4881      		ext.w %d1
 2020 0db4 48C1      		ext.l %d1
 2021 0db6 4481      		neg.l %d1
 2022 0db8 2F01      		move.l %d1,-(%sp)
 2023               		.cfi_def_cfa_offset 80
 2024 0dba 4A80      		tst.l %d0
 2025 0dbc 57C0      		seq %d0
 2026 0dbe 4880      		ext.w %d0
 2027 0dc0 48C0      		ext.l %d0
 2028 0dc2 4480      		neg.l %d0
 2029 0dc4 2F00      		move.l %d0,-(%sp)
 2030               		.cfi_def_cfa_offset 84
 2031 0dc6 2047      		move.l %d7,%a0
 2032 0dc8 4E90      		jsr (%a0)
 2033               	.LVL99:
 508:test3.c       ****                                 fast_printf(i == 0, i == 1, RETCURSORLOC);
 2034               		.loc 1 508 33 view .LVU380
 2035 0dca 2039 0000 		move.l i,%d0
 2035      0000 
 2036 0dd0 4879 0000 		pea .LC19
 2036      0000 
 2037               		.cfi_def_cfa_offset 88
 2038 0dd6 BA80      		cmp.l %d0,%d5
 2039 0dd8 57C1      		seq %d1
 2040 0dda 4881      		ext.w %d1
 2041 0ddc 48C1      		ext.l %d1
 2042 0dde 4481      		neg.l %d1
 2043 0de0 2F01      		move.l %d1,-(%sp)
 2044               		.cfi_def_cfa_offset 92
 2045 0de2 4A80      		tst.l %d0
 2046 0de4 57C0      		seq %d0
 2047 0de6 4880      		ext.w %d0
 2048 0de8 48C0      		ext.l %d0
 2049 0dea 4480      		neg.l %d0
 2050 0dec 2F00      		move.l %d0,-(%sp)
 2051               		.cfi_def_cfa_offset 96
 2052 0dee 2247      		move.l %d7,%a1
 2053 0df0 4E91      		jsr (%a1)
 2054               	.LVL100:
 509:test3.c       ****                                 fast_printf(i == 0, i == 1, CURSORVISIBLE);
 2055               		.loc 1 509 33 view .LVU381


 2056 0df2 2039 0000 		move.l i,%d0
 2056      0000 
 2057 0df8 4FEF 0020 		lea (32,%sp),%sp
 2058               		.cfi_def_cfa_offset 64
 2059 0dfc 2EBC 0000 		move.l #.LC4,(%sp)
 2059      0000 
 2060 0e02 BA80      		cmp.l %d0,%d5
 2061 0e04 57C1      		seq %d1
 2062 0e06 4881      		ext.w %d1
 2063 0e08 48C1      		ext.l %d1
 2064 0e0a 4481      		neg.l %d1
 2065 0e0c 2F01      		move.l %d1,-(%sp)
 2066               		.cfi_def_cfa_offset 68
 2067 0e0e 4A80      		tst.l %d0
 2068 0e10 57C0      		seq %d0
 2069 0e12 4880      		ext.w %d0
 2070 0e14 48C0      		ext.l %d0
 2071 0e16 4480      		neg.l %d0
 2072 0e18 2F00      		move.l %d0,-(%sp)
 2073               		.cfi_def_cfa_offset 72
 2074 0e1a 2047      		move.l %d7,%a0
 2075 0e1c 4E90      		jsr (%a0)
 2076               	.LVL101:
 510:test3.c       ****                                 warn_empty[i] = true; // Set the warning flag
 2077               		.loc 1 510 33 view .LVU382
 2078 0e1e 2039 0000 		move.l i,%d0
 2078      0000 
 2079 0e24 4879 0000 		pea .LC5
 2079      0000 
 2080               		.cfi_def_cfa_offset 76
 2081 0e2a BA80      		cmp.l %d0,%d5
 2082 0e2c 57C1      		seq %d1
 2083 0e2e 4881      		ext.w %d1
 2084 0e30 48C1      		ext.l %d1
 2085 0e32 4481      		neg.l %d1
 2086 0e34 2F01      		move.l %d1,-(%sp)
 2087               		.cfi_def_cfa_offset 80
 2088 0e36 4A80      		tst.l %d0
 2089 0e38 57C0      		seq %d0
 2090 0e3a 4880      		ext.w %d0
 2091 0e3c 48C0      		ext.l %d0
 2092 0e3e 4480      		neg.l %d0
 2093 0e40 2F00      		move.l %d0,-(%sp)
 2094               		.cfi_def_cfa_offset 84
 2095 0e42 2247      		move.l %d7,%a1
 2096 0e44 4E91      		jsr (%a1)
 2097               	.LVL102:
 511:test3.c       ****                             }
 2098               		.loc 1 511 33 view .LVU383
 511:test3.c       ****                             }
 2099               		.loc 1 511 47 is_stmt 0 view .LVU384
 2100 0e46 2039 0000 		move.l i,%d0
 2100      0000 
 2101 0e4c 1FBC 0001 		move.b #1,78(%sp,%d0.l)
 2101      084E 
 2102 0e52 4FEF 0018 		lea (24,%sp),%sp
 2103               		.cfi_def_cfa_offset 60


 514:test3.c       ****                             fast_printf(in_alt_screen[0], in_alt_screen[1], CURSORMOVE, 1, 1);
 2104               		.loc 1 514 29 is_stmt 1 view .LVU385
 2105 0e56 4878 002F 		pea 47.w
 2106               		.cfi_def_cfa_offset 64
 2107 0e5a 4879 0000 		pea .LC14
 2107      0000 
 2108               		.cfi_def_cfa_offset 68
 2109 0e60 7000      		moveq #0,%d0
 2110 0e62 1039 0000 		move.b in_alt_screen+1,%d0
 2110      0000 
 2111 0e68 2F00      		move.l %d0,-(%sp)
 2112               		.cfi_def_cfa_offset 72
 2113 0e6a 41F9 0000 		lea in_alt_screen,%a0
 2113      0000 
 2114 0e70 1010      		move.b (%a0),%d0
 2115 0e72 2F00      		move.l %d0,-(%sp)
 2116               		.cfi_def_cfa_offset 76
 2117 0e74 2247      		move.l %d7,%a1
 2118 0e76 4E91      		jsr (%a1)
 2119               	.LVL103:
 515:test3.c       ****                             fast_printf(in_alt_screen[0], in_alt_screen[1], help_text);
 2120               		.loc 1 515 29 view .LVU386
 2121 0e78 4878 0001 		pea 1.w
 2122               		.cfi_def_cfa_offset 80
 2123 0e7c 4878 0001 		pea 1.w
 2124               		.cfi_def_cfa_offset 84
 2125 0e80 4879 0000 		pea .LC10
 2125      0000 
 2126               		.cfi_def_cfa_offset 88
 2127 0e86 7000      		moveq #0,%d0
 2128 0e88 1039 0000 		move.b in_alt_screen+1,%d0
 2128      0000 
 2129 0e8e 2F00      		move.l %d0,-(%sp)
 2130               		.cfi_def_cfa_offset 92
 2131 0e90 41F9 0000 		lea in_alt_screen,%a0
 2131      0000 
 2132 0e96 1010      		move.b (%a0),%d0
 2133 0e98 2F00      		move.l %d0,-(%sp)
 2134               		.cfi_def_cfa_offset 96
 2135 0e9a 2247      		move.l %d7,%a1
 2136 0e9c 4E91      		jsr (%a1)
 2137               	.LVL104:
 516:test3.c       ****                         }
 2138               		.loc 1 516 29 view .LVU387
 2139 0e9e 4FEF 0020 		lea (32,%sp),%sp
 2140               		.cfi_def_cfa_offset 64
 2141 0ea2 2EBC 0000 		move.l #help_text,(%sp)
 2141      0000 
 2142 0ea8 7000      		moveq #0,%d0
 2143 0eaa 1039 0000 		move.b in_alt_screen+1,%d0
 2143      0000 
 2144 0eb0 2F00      		move.l %d0,-(%sp)
 2145               		.cfi_def_cfa_offset 68
 2146 0eb2 41F9 0000 		lea in_alt_screen,%a0
 2146      0000 
 2147 0eb8 1010      		move.b (%a0),%d0
 2148 0eba 2F00      		move.l %d0,-(%sp)


 2149               		.cfi_def_cfa_offset 72
 2150 0ebc 2247      		move.l %d7,%a1
 2151 0ebe 4E91      		jsr (%a1)
 2152               	.LVL105:
 552:test3.c       ****                         last_keybuf_len[i] = 0;
 2153               		.loc 1 552 39 is_stmt 0 view .LVU388
 2154 0ec0 2079 0000 		move.l i,%a0
 2154      0000 
 2155 0ec6 4FEF 000C 		lea (12,%sp),%sp
 2156               		.cfi_def_cfa_offset 60
 2157 0eca 2008      		move.l %a0,%d0
 2158 0ecc D088      		add.l %a0,%d0
 2159               	.L99:
 552:test3.c       ****                         last_keybuf_len[i] = 0;
 2160               		.loc 1 552 25 is_stmt 1 view .LVU389
 552:test3.c       ****                         last_keybuf_len[i] = 0;
 2161               		.loc 1 552 43 is_stmt 0 view .LVU390
 2162 0ece D080      		add.l %d0,%d0
 2163 0ed0 2200      		move.l %d0,%d1
 2164 0ed2 D288      		add.l %a0,%d1
 2165 0ed4 D281      		add.l %d1,%d1
 2166 0ed6 2244      		move.l %d4,%a1
 2167 0ed8 4231 1800 		clr.b (%a1,%d1.l)
 553:test3.c       ****                     }
 2168               		.loc 1 553 25 is_stmt 1 view .LVU391
 553:test3.c       ****                     }
 2169               		.loc 1 553 44 is_stmt 0 view .LVU392
 2170 0edc 2242      		move.l %d2,%a1
 2171 0ede 42B1 0800 		clr.l (%a1,%d0.l)
 2172 0ee2 6000 FDDE 		jra .L94
 2173               	.L69:
 518:test3.c       ****                         {
 2174               		.loc 1 518 30 is_stmt 1 view .LVU393
 518:test3.c       ****                         {
 2175               		.loc 1 518 33 is_stmt 0 view .LVU394
 2176 0ee6 7A01      		moveq #1,%d5
 2177 0ee8 BA81      		cmp.l %d1,%d5
 2178 0eea 6750      		jeq .L96
 547:test3.c       ****                         {
 2179               		.loc 1 547 30 is_stmt 1 view .LVU395
 547:test3.c       ****                         {
 2180               		.loc 1 547 33 is_stmt 0 view .LVU396
 2181 0eec 7A03      		moveq #3,%d5
 2182 0eee BA81      		cmp.l %d1,%d5
 2183 0ef0 6614      		jne .L80
 547:test3.c       ****                         {
 2184               		.loc 1 547 77 discriminator 1 view .LVU397
 2185 0ef2 2A00      		move.l %d0,%d5
 2186 0ef4 DA80      		add.l %d0,%d5
 2187 0ef6 DA88      		add.l %a0,%d5
 2188 0ef8 DA85      		add.l %d5,%d5
 547:test3.c       ****                         {
 2189               		.loc 1 547 60 discriminator 1 view .LVU398
 2190 0efa 2244      		move.l %d4,%a1
 2191 0efc 0C31 001B 		cmp.b #27,(%a1,%d5.l)
 2191      5800 
 2192 0f02 6700 01DC 		jeq .L97


 2193               	.L80:
 2194               	.LBB6:
 550:test3.c       ****                         }
 2195               		.loc 1 550 29 is_stmt 1 view .LVU399
 2196 0f06 2F01      		move.l %d1,-(%sp)
 2197               		.cfi_def_cfa_offset 64
 2198 0f08 2F2F 0030 		move.l 48(%sp),-(%sp)
 2199               		.cfi_def_cfa_offset 68
 2200 0f0c 4868 0003 		pea 3(%a0)
 2201               		.cfi_def_cfa_offset 72
 2202 0f10 4EB9 0000 		jsr write
 2202      0000 
 2203               	.LVL106:
 2204               	.LBE6:
 552:test3.c       ****                         last_keybuf_len[i] = 0;
 2205               		.loc 1 552 39 is_stmt 0 view .LVU400
 2206 0f16 2079 0000 		move.l i,%a0
 2206      0000 
 2207 0f1c 4FEF 000C 		lea (12,%sp),%sp
 2208               		.cfi_def_cfa_offset 60
 2209               	.L91:
 2210 0f20 2008      		move.l %a0,%d0
 2211 0f22 D088      		add.l %a0,%d0
 552:test3.c       ****                         last_keybuf_len[i] = 0;
 2212               		.loc 1 552 25 is_stmt 1 view .LVU401
 552:test3.c       ****                         last_keybuf_len[i] = 0;
 2213               		.loc 1 552 43 is_stmt 0 view .LVU402
 2214 0f24 D080      		add.l %d0,%d0
 2215 0f26 2200      		move.l %d0,%d1
 2216 0f28 D288      		add.l %a0,%d1
 2217 0f2a D281      		add.l %d1,%d1
 2218 0f2c 2244      		move.l %d4,%a1
 2219 0f2e 4231 1800 		clr.b (%a1,%d1.l)
 553:test3.c       ****                     }
 2220               		.loc 1 553 25 is_stmt 1 view .LVU403
 553:test3.c       ****                     }
 2221               		.loc 1 553 44 is_stmt 0 view .LVU404
 2222 0f32 2242      		move.l %d2,%a1
 2223 0f34 42B1 0800 		clr.l (%a1,%d0.l)
 2224 0f38 6000 FD88 		jra .L94
 2225               	.L96:
 518:test3.c       ****                         {
 2226               		.loc 1 518 75 discriminator 1 view .LVU405
 2227 0f3c 2C00      		move.l %d0,%d6
 2228 0f3e DC80      		add.l %d0,%d6
 2229 0f40 2F46 0030 		move.l %d6,48(%sp)
 2230 0f44 2A06      		move.l %d6,%d5
 2231 0f46 DA88      		add.l %a0,%d5
 2232 0f48 DA85      		add.l %d5,%d5
 2233 0f4a 2244      		move.l %d4,%a1
 2234 0f4c 1A31 5800 		move.b (%a1,%d5.l),%d5
 518:test3.c       ****                         {
 2235               		.loc 1 518 58 discriminator 1 view .LVU406
 2236 0f50 1C05      		move.b %d5,%d6
 2237 0f52 0606 FFE0 		add.b #-32,%d6
 2238 0f56 0C06 005E 		cmp.b #94,%d6
 2239 0f5a 62AA      		jhi .L80


 520:test3.c       ****                             {
 2240               		.loc 1 520 29 is_stmt 1 view .LVU407
 520:test3.c       ****                             {
 2241               		.loc 1 520 44 is_stmt 0 view .LVU408
 2242 0f5c 43F9 0000 		lea msg_buf_len,%a1
 2242      0000 
 2243 0f62 222F 0030 		move.l 48(%sp),%d1
 2244 0f66 2C31 1800 		move.l (%a1,%d1.l),%d6
 520:test3.c       ****                             {
 2245               		.loc 1 520 32 view .LVU409
 2246 0f6a 7263      		moveq #99,%d1
 2247 0f6c B286      		cmp.l %d6,%d1
 2248 0f6e 6500 0672 		jcs .L81
 2249               	.LBB7:
 522:test3.c       ****                                 msg_buf_len[i]++;
 2250               		.loc 1 522 33 is_stmt 1 view .LVU410
 522:test3.c       ****                                 msg_buf_len[i]++;
 2251               		.loc 1 522 60 is_stmt 0 view .LVU411
 2252 0f72 D088      		add.l %a0,%d0
 2253 0f74 2200      		move.l %d0,%d1
 2254 0f76 EB89      		lsl.l #5,%d1
 2255 0f78 D081      		add.l %d1,%d0
 2256 0f7a D088      		add.l %a0,%d0
 2257 0f7c 0680 0000 		add.l #msg_buf,%d0
 2257      0000 
 2258 0f82 2240      		move.l %d0,%a1
 2259 0f84 1385 6800 		move.b %d5,(%a1,%d6.l)
 523:test3.c       ****                                 msg_buf[i][msg_buf_len[i]] = '\0';
 2260               		.loc 1 523 33 is_stmt 1 view .LVU412
 523:test3.c       ****                                 msg_buf[i][msg_buf_len[i]] = '\0';
 2261               		.loc 1 523 47 is_stmt 0 view .LVU413
 2262 0f88 5286      		addq.l #1,%d6
 2263 0f8a 43F9 0000 		lea msg_buf_len,%a1
 2263      0000 
 2264 0f90 222F 0030 		move.l 48(%sp),%d1
 2265 0f94 2386 1800 		move.l %d6,(%a1,%d1.l)
 524:test3.c       ****                                 write(i + 3, &last_keybuf[i], last_keybuf_len[i]); // Write the key
 2266               		.loc 1 524 33 is_stmt 1 view .LVU414
 524:test3.c       ****                                 write(i + 3, &last_keybuf[i], last_keybuf_len[i]); // Write the key
 2267               		.loc 1 524 60 is_stmt 0 view .LVU415
 2268 0f98 2240      		move.l %d0,%a1
 2269 0f9a 4231 6800 		clr.b (%a1,%d6.l)
 525:test3.c       ****                                 if (warn_length[i]) // If a length warning was displayed
 2270               		.loc 1 525 33 is_stmt 1 view .LVU416
 2271 0f9e 4878 0001 		pea 1.w
 2272               		.cfi_def_cfa_offset 64
 2273 0fa2 2F2F 0030 		move.l 48(%sp),-(%sp)
 2274               		.cfi_def_cfa_offset 68
 2275 0fa6 4868 0003 		pea 3(%a0)
 2276               		.cfi_def_cfa_offset 72
 2277 0faa 4EB9 0000 		jsr write
 2277      0000 
 2278               	.LVL107:
 526:test3.c       ****                                 {
 2279               		.loc 1 526 33 view .LVU417
 526:test3.c       ****                                 {
 2280               		.loc 1 526 48 is_stmt 0 view .LVU418


 2281 0fb0 2079 0000 		move.l i,%a0
 2281      0000 
 526:test3.c       ****                                 {
 2282               		.loc 1 526 36 view .LVU419
 2283 0fb6 4FEF 000C 		lea (12,%sp),%sp
 2284               		.cfi_def_cfa_offset 60
 2285 0fba 4A37 8834 		tst.b 52(%sp,%a0.l)
 2286 0fbe 6700 FF60 		jeq .L91
 528:test3.c       ****                                     fast_printf(i == 0, i == 1, SAVECURSORLOC);
 2287               		.loc 1 528 37 is_stmt 1 view .LVU420
 2288 0fc2 4879 0000 		pea .LC1
 2288      0000 
 2289               		.cfi_def_cfa_offset 64
 2290 0fc8 7201      		moveq #1,%d1
 2291 0fca B288      		cmp.l %a0,%d1
 2292 0fcc 57C0      		seq %d0
 2293 0fce 4880      		ext.w %d0
 2294 0fd0 48C0      		ext.l %d0
 2295 0fd2 4480      		neg.l %d0
 2296 0fd4 2F00      		move.l %d0,-(%sp)
 2297               		.cfi_def_cfa_offset 68
 2298 0fd6 B0FC 0000 		cmp.w #0,%a0
 2299 0fda 57C0      		seq %d0
 2300 0fdc 4880      		ext.w %d0
 2301 0fde 48C0      		ext.l %d0
 2302 0fe0 4480      		neg.l %d0
 2303 0fe2 2F00      		move.l %d0,-(%sp)
 2304               		.cfi_def_cfa_offset 72
 2305 0fe4 2047      		move.l %d7,%a0
 2306 0fe6 4E90      		jsr (%a0)
 2307               	.LVL108:
 529:test3.c       ****                                     fast_printf(i == 0, i == 1, "\x1b[999;H\x1b[47;30m%s\x1b[K\x1b[
 2308               		.loc 1 529 37 view .LVU421
 2309 0fe8 2039 0000 		move.l i,%d0
 2309      0000 
 2310 0fee 4879 0000 		pea .LC2
 2310      0000 
 2311               		.cfi_def_cfa_offset 76
 2312 0ff4 7A01      		moveq #1,%d5
 2313 0ff6 BA80      		cmp.l %d0,%d5
 2314 0ff8 57C1      		seq %d1
 2315 0ffa 4881      		ext.w %d1
 2316 0ffc 48C1      		ext.l %d1
 2317 0ffe 4481      		neg.l %d1
 2318 1000 2F01      		move.l %d1,-(%sp)
 2319               		.cfi_def_cfa_offset 80
 2320 1002 4A80      		tst.l %d0
 2321 1004 57C0      		seq %d0
 2322 1006 4880      		ext.w %d0
 2323 1008 48C0      		ext.l %d0
 2324 100a 4480      		neg.l %d0
 2325 100c 2F00      		move.l %d0,-(%sp)
 2326               		.cfi_def_cfa_offset 84
 2327 100e 2047      		move.l %d7,%a0
 2328 1010 4E90      		jsr (%a0)
 2329               	.LVL109:
 530:test3.c       ****                                     fast_printf(i == 0, i == 1, RETCURSORLOC);


 2330               		.loc 1 530 37 view .LVU422
 530:test3.c       ****                                     fast_printf(i == 0, i == 1, RETCURSORLOC);
 2331               		.loc 1 530 121 is_stmt 0 view .LVU423
 2332 1012 2039 0000 		move.l i,%d0
 2332      0000 
 2333 1018 2200      		move.l %d0,%d1
 2334 101a D280      		add.l %d0,%d1
 2335 101c D281      		add.l %d1,%d1
 530:test3.c       ****                                     fast_printf(i == 0, i == 1, RETCURSORLOC);
 2336               		.loc 1 530 113 view .LVU424
 2337 101e 43F9 0000 		lea tip_num,%a1
 2337      0000 
 2338 1024 2071 1800 		move.l (%a1,%d1.l),%a0
 2339 1028 2208      		move.l %a0,%d1
 2340 102a D288      		add.l %a0,%d1
 2341 102c D288      		add.l %a0,%d1
 2342 102e 2A01      		move.l %d1,%d5
 2343 1030 EB8D      		lsl.l #5,%d5
 2344 1032 D285      		add.l %d5,%d1
 2345 1034 D288      		add.l %a0,%d1
 530:test3.c       ****                                     fast_printf(i == 0, i == 1, RETCURSORLOC);
 2346               		.loc 1 530 37 view .LVU425
 2347 1036 0681 0000 		add.l #tip_list,%d1
 2347      0000 
 2348 103c 2F01      		move.l %d1,-(%sp)
 2349               		.cfi_def_cfa_offset 88
 2350 103e 4879 0000 		pea .LC9
 2350      0000 
 2351               		.cfi_def_cfa_offset 92
 2352 1044 7A01      		moveq #1,%d5
 2353 1046 BA80      		cmp.l %d0,%d5
 2354 1048 57C1      		seq %d1
 2355 104a 4881      		ext.w %d1
 2356 104c 48C1      		ext.l %d1
 2357 104e 4481      		neg.l %d1
 2358 1050 2F01      		move.l %d1,-(%sp)
 2359               		.cfi_def_cfa_offset 96
 2360 1052 4A80      		tst.l %d0
 2361 1054 57C0      		seq %d0
 2362 1056 4880      		ext.w %d0
 2363 1058 48C0      		ext.l %d0
 2364 105a 4480      		neg.l %d0
 2365 105c 2F00      		move.l %d0,-(%sp)
 2366               		.cfi_def_cfa_offset 100
 2367 105e 2047      		move.l %d7,%a0
 2368 1060 4E90      		jsr (%a0)
 2369               	.LVL110:
 531:test3.c       ****                                     fast_printf(i == 0, i == 1, CURSORVISIBLE);
 2370               		.loc 1 531 37 is_stmt 1 view .LVU426
 2371 1062 2039 0000 		move.l i,%d0
 2371      0000 
 2372 1068 4FEF 0024 		lea (36,%sp),%sp
 2373               		.cfi_def_cfa_offset 64
 2374 106c 2EBC 0000 		move.l #.LC4,(%sp)
 2374      0000 
 2375 1072 BA80      		cmp.l %d0,%d5
 2376 1074 57C1      		seq %d1


 2377 1076 4881      		ext.w %d1
 2378 1078 48C1      		ext.l %d1
 2379 107a 4481      		neg.l %d1
 2380 107c 2F01      		move.l %d1,-(%sp)
 2381               		.cfi_def_cfa_offset 68
 2382 107e 4A80      		tst.l %d0
 2383 1080 57C0      		seq %d0
 2384 1082 4880      		ext.w %d0
 2385 1084 48C0      		ext.l %d0
 2386 1086 4480      		neg.l %d0
 2387 1088 2F00      		move.l %d0,-(%sp)
 2388               		.cfi_def_cfa_offset 72
 2389 108a 2247      		move.l %d7,%a1
 2390 108c 4E91      		jsr (%a1)
 2391               	.LVL111:
 532:test3.c       ****                                     warn_length[i] = false; // Clear the warning flag
 2392               		.loc 1 532 37 view .LVU427
 2393 108e 2039 0000 		move.l i,%d0
 2393      0000 
 2394 1094 4879 0000 		pea .LC5
 2394      0000 
 2395               		.cfi_def_cfa_offset 76
 2396 109a BA80      		cmp.l %d0,%d5
 2397 109c 57C1      		seq %d1
 2398 109e 4881      		ext.w %d1
 2399 10a0 48C1      		ext.l %d1
 2400 10a2 4481      		neg.l %d1
 2401 10a4 2F01      		move.l %d1,-(%sp)
 2402               		.cfi_def_cfa_offset 80
 2403 10a6 4A80      		tst.l %d0
 2404 10a8 57C0      		seq %d0
 2405 10aa 4880      		ext.w %d0
 2406 10ac 48C0      		ext.l %d0
 2407 10ae 4480      		neg.l %d0
 2408 10b0 2F00      		move.l %d0,-(%sp)
 2409               		.cfi_def_cfa_offset 84
 2410 10b2 2047      		move.l %d7,%a0
 2411 10b4 4E90      		jsr (%a0)
 2412               	.LVL112:
 533:test3.c       ****                                 }
 2413               		.loc 1 533 37 view .LVU428
 533:test3.c       ****                                 }
 2414               		.loc 1 533 48 is_stmt 0 view .LVU429
 2415 10b6 2079 0000 		move.l i,%a0
 2415      0000 
 533:test3.c       ****                                 }
 2416               		.loc 1 533 52 view .LVU430
 2417 10bc 4237 884C 		clr.b 76(%sp,%a0.l)
 2418 10c0 4FEF 0018 		lea (24,%sp),%sp
 2419               		.cfi_def_cfa_offset 60
 2420 10c4 2008      		move.l %a0,%d0
 2421 10c6 D088      		add.l %a0,%d0
 2422               	.LBE7:
 552:test3.c       ****                         last_keybuf_len[i] = 0;
 2423               		.loc 1 552 25 is_stmt 1 view .LVU431
 552:test3.c       ****                         last_keybuf_len[i] = 0;
 2424               		.loc 1 552 43 is_stmt 0 view .LVU432


 2425 10c8 D080      		add.l %d0,%d0
 2426 10ca 2200      		move.l %d0,%d1
 2427 10cc D288      		add.l %a0,%d1
 2428 10ce D281      		add.l %d1,%d1
 2429 10d0 2244      		move.l %d4,%a1
 2430 10d2 4231 1800 		clr.b (%a1,%d1.l)
 553:test3.c       ****                     }
 2431               		.loc 1 553 25 is_stmt 1 view .LVU433
 553:test3.c       ****                     }
 2432               		.loc 1 553 44 is_stmt 0 view .LVU434
 2433 10d6 2242      		move.l %d2,%a1
 2434 10d8 42B1 0800 		clr.l (%a1,%d0.l)
 2435 10dc 6000 FBE4 		jra .L94
 2436               	.L97:
 547:test3.c       ****                         {
 2437               		.loc 1 547 104 discriminator 2 view .LVU435
 2438 10e0 DA84      		add.l %d4,%d5
 547:test3.c       ****                         {
 2439               		.loc 1 547 87 discriminator 2 view .LVU436
 2440 10e2 2245      		move.l %d5,%a1
 2441 10e4 0C29 005B 		cmp.b #91,1(%a1)
 2441      0001 
 2442 10ea 6600 FE1A 		jne .L80
 547:test3.c       ****                         {
 2443               		.loc 1 547 114 discriminator 3 view .LVU437
 2444 10ee 1A29 0002 		move.b 2(%a1),%d5
 2445 10f2 0605 FFBF 		add.b #-65,%d5
 2446 10f6 0C05 0003 		cmp.b #3,%d5
 2447 10fa 6300 FBB2 		jls .L65
 2448               	.LBB8:
 550:test3.c       ****                         }
 2449               		.loc 1 550 29 is_stmt 1 view .LVU438
 2450 10fe 2F01      		move.l %d1,-(%sp)
 2451               		.cfi_def_cfa_offset 64
 2452 1100 2F2F 0030 		move.l 48(%sp),-(%sp)
 2453               		.cfi_def_cfa_offset 68
 2454 1104 4868 0003 		pea 3(%a0)
 2455               		.cfi_def_cfa_offset 72
 2456 1108 4EB9 0000 		jsr write
 2456      0000 
 2457               	.LVL113:
 2458               	.LBE8:
 552:test3.c       ****                         last_keybuf_len[i] = 0;
 2459               		.loc 1 552 39 is_stmt 0 view .LVU439
 2460 110e 2079 0000 		move.l i,%a0
 2460      0000 
 2461 1114 4FEF 000C 		lea (12,%sp),%sp
 2462               		.cfi_def_cfa_offset 60
 2463 1118 6000 FE06 		jra .L91
 2464               	.L95:
 2465               	.LBB9:
 453:test3.c       ****                                 if (warn_empty[i]) // If an empty message warning was displayed
 2466               		.loc 1 453 33 is_stmt 1 view .LVU440
 2467 111c 4878 002F 		pea 47.w
 2468               		.cfi_def_cfa_offset 64
 2469 1120 4879 0000 		pea .LC6
 2469      0000 


 2470               		.cfi_def_cfa_offset 68
 2471 1126 4878 0001 		pea 1.w
 2472               		.cfi_def_cfa_offset 72
 2473 112a 4878 0001 		pea 1.w
 2474               		.cfi_def_cfa_offset 76
 2475 112e 2047      		move.l %d7,%a0
 2476 1130 4E90      		jsr (%a0)
 2477               	.LVL114:
 454:test3.c       ****                                 {
 2478               		.loc 1 454 33 view .LVU441
 454:test3.c       ****                                 {
 2479               		.loc 1 454 47 is_stmt 0 view .LVU442
 2480 1132 2039 0000 		move.l i,%d0
 2480      0000 
 454:test3.c       ****                                 {
 2481               		.loc 1 454 36 view .LVU443
 2482 1138 4FEF 0010 		lea (16,%sp),%sp
 2483               		.cfi_def_cfa_offset 60
 2484 113c 4A37 0836 		tst.b 54(%sp,%d0.l)
 2485 1140 6600 039E 		jne .L98
 2486               	.L71:
 464:test3.c       ****                                 fast_printf(true, true, CURSORMOVE, 1, 1);
 2487               		.loc 1 464 33 is_stmt 1 view .LVU444
 2488 1144 4879 0000 		pea .LC1
 2488      0000 
 2489               		.cfi_def_cfa_offset 64
 2490 114a 4878 0001 		pea 1.w
 2491               		.cfi_def_cfa_offset 68
 2492 114e 4878 0001 		pea 1.w
 2493               		.cfi_def_cfa_offset 72
 2494 1152 2247      		move.l %d7,%a1
 2495 1154 4E91      		jsr (%a1)
 2496               	.LVL115:
 465:test3.c       ****                                 for (j = 0; j < chat_row; j++)
 2497               		.loc 1 465 33 view .LVU445
 2498 1156 4878 0001 		pea 1.w
 2499               		.cfi_def_cfa_offset 76
 2500 115a 4878 0001 		pea 1.w
 2501               		.cfi_def_cfa_offset 80
 2502 115e 4879 0000 		pea .LC10
 2502      0000 
 2503               		.cfi_def_cfa_offset 84
 2504 1164 4878 0001 		pea 1.w
 2505               		.cfi_def_cfa_offset 88
 2506 1168 4878 0001 		pea 1.w
 2507               		.cfi_def_cfa_offset 92
 2508 116c 2047      		move.l %d7,%a0
 2509 116e 4E90      		jsr (%a0)
 2510               	.LVL116:
 466:test3.c       ****                                     printf_buf[j] = '\n';
 2511               		.loc 1 466 33 view .LVU446
 466:test3.c       ****                                     printf_buf[j] = '\n';
 2512               		.loc 1 466 40 is_stmt 0 view .LVU447
 2513 1170 42B9 0000 		clr.l j
 2513      0000 
 466:test3.c       ****                                     printf_buf[j] = '\n';
 2514               		.loc 1 466 47 is_stmt 1 view .LVU448


 2515 1176 2C39 0000 		move.l chat_row,%d6
 2515      0000 
 2516 117c 4FEF 0020 		lea (32,%sp),%sp
 2517               		.cfi_def_cfa_offset 60
 2518 1180 671E      		jeq .L72
 467:test3.c       ****                                 printf_buf[j + 1] = '\0';
 2519               		.loc 1 467 51 is_stmt 0 view .LVU449
 2520 1182 2F06      		move.l %d6,-(%sp)
 2521               		.cfi_def_cfa_offset 64
 2522 1184 4878 000A 		pea 10.w
 2523               		.cfi_def_cfa_offset 68
 2524 1188 4879 0000 		pea printf_buf
 2524      0000 
 2525               		.cfi_def_cfa_offset 72
 2526 118e 4EB9 0000 		jsr memset
 2526      0000 
 2527               	.LVL117:
 466:test3.c       ****                                     printf_buf[j] = '\n';
 2528               		.loc 1 466 60 view .LVU450
 2529 1194 2A06      		move.l %d6,%d5
 2530 1196 23C6 0000 		move.l %d6,j
 2530      0000 
 2531 119c 4FEF 000C 		lea (12,%sp),%sp
 2532               		.cfi_def_cfa_offset 60
 2533               	.L72:
 468:test3.c       ****                                 write(3, &printf_buf, chat_row); // Write the new message to channe
 2534               		.loc 1 468 33 is_stmt 1 view .LVU451
 468:test3.c       ****                                 write(3, &printf_buf, chat_row); // Write the new message to channe
 2535               		.loc 1 468 51 is_stmt 0 view .LVU452
 2536 11a0 43F9 0000 		lea printf_buf,%a1
 2536      0000 
 2537 11a6 4231 5801 		clr.b 1(%a1,%d5.l)
 469:test3.c       ****                                 write(4, &printf_buf, chat_row); // Write the new message to channe
 2538               		.loc 1 469 33 is_stmt 1 view .LVU453
 2539 11aa 2F06      		move.l %d6,-(%sp)
 2540               		.cfi_def_cfa_offset 64
 2541 11ac 2F09      		move.l %a1,-(%sp)
 2542               		.cfi_def_cfa_offset 68
 2543 11ae 4878 0003 		pea 3.w
 2544               		.cfi_def_cfa_offset 72
 2545 11b2 4EB9 0000 		jsr write
 2545      0000 
 2546               	.LVL118:
 470:test3.c       ****                                 if (chat_row < screen_height - 5) // Increment chat row if within l
 2547               		.loc 1 470 33 view .LVU454
 2548 11b8 2F39 0000 		move.l chat_row,-(%sp)
 2548      0000 
 2549               		.cfi_def_cfa_offset 76
 2550 11be 4879 0000 		pea printf_buf
 2550      0000 
 2551               		.cfi_def_cfa_offset 80
 2552 11c4 4878 0004 		pea 4.w
 2553               		.cfi_def_cfa_offset 84
 2554 11c8 4EB9 0000 		jsr write
 2554      0000 
 2555               	.LVL119:
 471:test3.c       ****                                     chat_row++;


 2556               		.loc 1 471 33 view .LVU455
 471:test3.c       ****                                     chat_row++;
 2557               		.loc 1 471 46 is_stmt 0 view .LVU456
 2558 11ce 2039 0000 		move.l chat_row,%d0
 2558      0000 
 471:test3.c       ****                                     chat_row++;
 2559               		.loc 1 471 62 view .LVU457
 2560 11d4 2239 0000 		move.l screen_height,%d1
 2560      0000 
 2561 11da 5B81      		subq.l #5,%d1
 471:test3.c       ****                                     chat_row++;
 2562               		.loc 1 471 36 view .LVU458
 2563 11dc 4FEF 0018 		lea (24,%sp),%sp
 2564               		.cfi_def_cfa_offset 60
 2565 11e0 B081      		cmp.l %d1,%d0
 2566 11e2 6408      		jcc .L73
 472:test3.c       ****                                 fast_printf(true, true, "\x1b[0m\n│\x1b[1;38;5;%dm%s: \x1b[0m", c
 2567               		.loc 1 472 37 is_stmt 1 view .LVU459
 472:test3.c       ****                                 fast_printf(true, true, "\x1b[0m\n│\x1b[1;38;5;%dm%s: \x1b[0m", c
 2568               		.loc 1 472 45 is_stmt 0 view .LVU460
 2569 11e4 5280      		addq.l #1,%d0
 2570 11e6 23C0 0000 		move.l %d0,chat_row
 2570      0000 
 2571               	.L73:
 473:test3.c       ****                                 write(3, &msg_buf[i], msg_buf_len[i]); // Write the message content
 2572               		.loc 1 473 33 is_stmt 1 view .LVU461
 473:test3.c       ****                                 write(3, &msg_buf[i], msg_buf_len[i]); // Write the message content
 2573               		.loc 1 473 140 is_stmt 0 view .LVU462
 2574 11ec 2239 0000 		move.l i,%d1
 2574      0000 
 2575 11f2 2001      		move.l %d1,%d0
 2576 11f4 D081      		add.l %d1,%d0
 2577 11f6 D080      		add.l %d0,%d0
 2578 11f8 D081      		add.l %d1,%d0
 2579 11fa D080      		add.l %d0,%d0
 473:test3.c       ****                                 write(3, &msg_buf[i], msg_buf_len[i]); // Write the message content
 2580               		.loc 1 473 33 view .LVU463
 2581 11fc 0680 0000 		add.l #client_nickname,%d0
 2581      0000 
 2582 1202 2F00      		move.l %d0,-(%sp)
 2583               		.cfi_def_cfa_offset 64
 2584 1204 41F9 0000 		lea client_nickname_color,%a0
 2584      0000 
 2585 120a 1030 1800 		move.b (%a0,%d1.l),%d0
 2586 120e 4880      		ext.w %d0
 2587 1210 3240      		move.w %d0,%a1
 2588 1212 2F09      		move.l %a1,-(%sp)
 2589               		.cfi_def_cfa_offset 68
 2590 1214 4879 0000 		pea .LC16
 2590      0000 
 2591               		.cfi_def_cfa_offset 72
 2592 121a 4878 0001 		pea 1.w
 2593               		.cfi_def_cfa_offset 76
 2594 121e 4878 0001 		pea 1.w
 2595               		.cfi_def_cfa_offset 80
 2596 1222 2047      		move.l %d7,%a0
 2597 1224 4E90      		jsr (%a0)


 2598               	.LVL120:
 474:test3.c       ****                                 write(4, &msg_buf[i], msg_buf_len[i]);
 2599               		.loc 1 474 33 is_stmt 1 view .LVU464
 2600 1226 2239 0000 		move.l i,%d1
 2600      0000 
 2601 122c 2001      		move.l %d1,%d0
 2602 122e D081      		add.l %d1,%d0
 2603 1230 2040      		move.l %d0,%a0
 2604 1232 D1C0      		add.l %d0,%a0
 2605 1234 43F9 0000 		lea msg_buf_len,%a1
 2605      0000 
 2606 123a 2F31 8800 		move.l (%a1,%a0.l),-(%sp)
 2607               		.cfi_def_cfa_offset 84
 2608 123e D081      		add.l %d1,%d0
 2609 1240 2A00      		move.l %d0,%d5
 2610 1242 EB8D      		lsl.l #5,%d5
 2611 1244 D085      		add.l %d5,%d0
 2612 1246 D081      		add.l %d1,%d0
 2613 1248 0680 0000 		add.l #msg_buf,%d0
 2613      0000 
 2614 124e 2F00      		move.l %d0,-(%sp)
 2615               		.cfi_def_cfa_offset 88
 2616 1250 4878 0003 		pea 3.w
 2617               		.cfi_def_cfa_offset 92
 2618 1254 4EB9 0000 		jsr write
 2618      0000 
 2619               	.LVL121:
 475:test3.c       ****                                 fast_printf(true, true, "\x1b[%d;999H│", chat_row + 1); // Update
 2620               		.loc 1 475 33 view .LVU465
 2621 125a 2239 0000 		move.l i,%d1
 2621      0000 
 2622 1260 4FEF 0020 		lea (32,%sp),%sp
 2623               		.cfi_def_cfa_offset 60
 2624 1264 2001      		move.l %d1,%d0
 2625 1266 D081      		add.l %d1,%d0
 2626 1268 2040      		move.l %d0,%a0
 2627 126a D1C0      		add.l %d0,%a0
 2628 126c 43F9 0000 		lea msg_buf_len,%a1
 2628      0000 
 2629 1272 2F31 8800 		move.l (%a1,%a0.l),-(%sp)
 2630               		.cfi_def_cfa_offset 64
 2631 1276 D081      		add.l %d1,%d0
 2632 1278 2A00      		move.l %d0,%d5
 2633 127a EB8D      		lsl.l #5,%d5
 2634 127c D085      		add.l %d5,%d0
 2635 127e D081      		add.l %d1,%d0
 2636 1280 0680 0000 		add.l #msg_buf,%d0
 2636      0000 
 2637 1286 2F00      		move.l %d0,-(%sp)
 2638               		.cfi_def_cfa_offset 68
 2639 1288 4878 0004 		pea 4.w
 2640               		.cfi_def_cfa_offset 72
 2641 128c 4EB9 0000 		jsr write
 2641      0000 
 2642               	.LVL122:
 476:test3.c       ****                                 msg_buf_len[i] = 0; // Clear the message buffer
 2643               		.loc 1 476 33 view .LVU466


 2644 1292 2039 0000 		move.l chat_row,%d0
 2644      0000 
 2645 1298 5280      		addq.l #1,%d0
 2646 129a 2F00      		move.l %d0,-(%sp)
 2647               		.cfi_def_cfa_offset 76
 2648 129c 4879 0000 		pea .LC17
 2648      0000 
 2649               		.cfi_def_cfa_offset 80
 2650 12a2 4878 0001 		pea 1.w
 2651               		.cfi_def_cfa_offset 84
 2652 12a6 4878 0001 		pea 1.w
 2653               		.cfi_def_cfa_offset 88
 2654 12aa 2047      		move.l %d7,%a0
 2655 12ac 4E90      		jsr (%a0)
 2656               	.LVL123:
 477:test3.c       ****                                 msg_buf[i][0] = '\0';
 2657               		.loc 1 477 33 view .LVU467
 477:test3.c       ****                                 msg_buf[i][0] = '\0';
 2658               		.loc 1 477 44 is_stmt 0 view .LVU468
 2659 12ae 2239 0000 		move.l i,%d1
 2659      0000 
 477:test3.c       ****                                 msg_buf[i][0] = '\0';
 2660               		.loc 1 477 48 view .LVU469
 2661 12b4 2001      		move.l %d1,%d0
 2662 12b6 D081      		add.l %d1,%d0
 2663 12b8 2040      		move.l %d0,%a0
 2664 12ba D1C0      		add.l %d0,%a0
 2665 12bc 43F9 0000 		lea msg_buf_len,%a1
 2665      0000 
 2666 12c2 42B1 8800 		clr.l (%a1,%a0.l)
 478:test3.c       **** 
 2667               		.loc 1 478 33 is_stmt 1 view .LVU470
 478:test3.c       **** 
 2668               		.loc 1 478 47 is_stmt 0 view .LVU471
 2669 12c6 D081      		add.l %d1,%d0
 2670 12c8 2A00      		move.l %d0,%d5
 2671 12ca EB8D      		lsl.l #5,%d5
 2672 12cc D085      		add.l %d5,%d0
 2673 12ce D081      		add.l %d1,%d0
 2674 12d0 41F9 0000 		lea msg_buf,%a0
 2674      0000 
 2675 12d6 4230 0800 		clr.b (%a0,%d0.l)
 481:test3.c       ****                                 fast_printf(false, true, CURSORMOVE, screen_height - 2, term_input_
 2676               		.loc 1 481 33 is_stmt 1 view .LVU472
 2677 12da 41F9 0000 		lea term_input_col,%a0
 2677      0000 
 2678 12e0 2010      		move.l (%a0),%d0
 2679 12e2 D091      		add.l (%a1),%d0
 2680 12e4 2F00      		move.l %d0,-(%sp)
 2681               		.cfi_def_cfa_offset 92
 2682 12e6 2039 0000 		move.l screen_height,%d0
 2682      0000 
 2683 12ec 5580      		subq.l #2,%d0
 2684 12ee 2F00      		move.l %d0,-(%sp)
 2685               		.cfi_def_cfa_offset 96
 2686 12f0 4879 0000 		pea .LC10
 2686      0000 


 2687               		.cfi_def_cfa_offset 100
 2688 12f6 42A7      		clr.l -(%sp)
 2689               		.cfi_def_cfa_offset 104
 2690 12f8 4878 0001 		pea 1.w
 2691               		.cfi_def_cfa_offset 108
 2692 12fc 2047      		move.l %d7,%a0
 2693 12fe 4E90      		jsr (%a0)
 2694               	.LVL124:
 482:test3.c       ****                                 fast_printf(i == 0, i == 1, DELETELINEAFTERCURSOR);
 2695               		.loc 1 482 33 view .LVU473
 2696 1300 4FEF 0030 		lea (48,%sp),%sp
 2697               		.cfi_def_cfa_offset 60
 2698 1304 2039 0000 		move.l term_input_col+4,%d0
 2698      0000 
 2699 130a D0B9 0000 		add.l msg_buf_len+4,%d0
 2699      0000 
 2700 1310 2F00      		move.l %d0,-(%sp)
 2701               		.cfi_def_cfa_offset 64
 2702 1312 2239 0000 		move.l screen_height,%d1
 2702      0000 
 2703 1318 5581      		subq.l #2,%d1
 2704 131a 2F01      		move.l %d1,-(%sp)
 2705               		.cfi_def_cfa_offset 68
 2706 131c 4879 0000 		pea .LC10
 2706      0000 
 2707               		.cfi_def_cfa_offset 72
 2708 1322 4878 0001 		pea 1.w
 2709               		.cfi_def_cfa_offset 76
 2710 1326 42A7      		clr.l -(%sp)
 2711               		.cfi_def_cfa_offset 80
 2712 1328 2047      		move.l %d7,%a0
 2713 132a 4E90      		jsr (%a0)
 2714               	.LVL125:
 483:test3.c       ****                                 fast_printf(true, true, "\x1b[%d;999H│", screen_height - 2);
 2715               		.loc 1 483 33 view .LVU474
 2716 132c 2039 0000 		move.l i,%d0
 2716      0000 
 2717 1332 4879 0000 		pea .LC18
 2717      0000 
 2718               		.cfi_def_cfa_offset 84
 2719 1338 7A01      		moveq #1,%d5
 2720 133a BA80      		cmp.l %d0,%d5
 2721 133c 57C1      		seq %d1
 2722 133e 4881      		ext.w %d1
 2723 1340 48C1      		ext.l %d1
 2724 1342 4481      		neg.l %d1
 2725 1344 2F01      		move.l %d1,-(%sp)
 2726               		.cfi_def_cfa_offset 88
 2727 1346 4A80      		tst.l %d0
 2728 1348 57C0      		seq %d0
 2729 134a 4880      		ext.w %d0
 2730 134c 48C0      		ext.l %d0
 2731 134e 4480      		neg.l %d0
 2732 1350 2F00      		move.l %d0,-(%sp)
 2733               		.cfi_def_cfa_offset 92
 2734 1352 2047      		move.l %d7,%a0
 2735 1354 4E90      		jsr (%a0)


 2736               	.LVL126:
 484:test3.c       ****                                 if (inappcom[0])
 2737               		.loc 1 484 33 view .LVU475
 2738 1356 4FEF 0020 		lea (32,%sp),%sp
 2739               		.cfi_def_cfa_offset 60
 2740 135a 2039 0000 		move.l screen_height,%d0
 2740      0000 
 2741 1360 5580      		subq.l #2,%d0
 2742 1362 2F00      		move.l %d0,-(%sp)
 2743               		.cfi_def_cfa_offset 64
 2744 1364 4879 0000 		pea .LC17
 2744      0000 
 2745               		.cfi_def_cfa_offset 68
 2746 136a 4878 0001 		pea 1.w
 2747               		.cfi_def_cfa_offset 72
 2748 136e 4878 0001 		pea 1.w
 2749               		.cfi_def_cfa_offset 76
 2750 1372 2047      		move.l %d7,%a0
 2751 1374 4E90      		jsr (%a0)
 2752               	.LVL127:
 485:test3.c       ****                                 {
 2753               		.loc 1 485 33 view .LVU476
 485:test3.c       ****                                 {
 2754               		.loc 1 485 36 is_stmt 0 view .LVU477
 2755 1376 4FEF 0010 		lea (16,%sp),%sp
 2756               		.cfi_def_cfa_offset 60
 2757 137a 4A39 0000 		tst.b inappcom.l
 2757      0000 
 2758 1380 6700 0134 		jeq .L74
 487:test3.c       ****                                 }
 2759               		.loc 1 487 37 is_stmt 1 view .LVU478
 2760 1384 41F9 0000 		lea term_input_col,%a0
 2760      0000 
 2761 138a 2010      		move.l (%a0),%d0
 2762 138c 41F9 0000 		lea msg_buf_len,%a0
 2762      0000 
 2763 1392 D090      		add.l (%a0),%d0
 2764 1394 2F00      		move.l %d0,-(%sp)
 2765               		.cfi_def_cfa_offset 64
 2766 1396 2039 0000 		move.l screen_height,%d0
 2766      0000 
 2767 139c 5580      		subq.l #2,%d0
 2768 139e 2F00      		move.l %d0,-(%sp)
 2769               		.cfi_def_cfa_offset 68
 2770 13a0 4879 0000 		pea .LC10
 2770      0000 
 2771               		.cfi_def_cfa_offset 72
 2772 13a6 42A7      		clr.l -(%sp)
 2773               		.cfi_def_cfa_offset 76
 2774 13a8 4878 0001 		pea 1.w
 2775               		.cfi_def_cfa_offset 80
 2776 13ac 2047      		move.l %d7,%a0
 2777 13ae 4E90      		jsr (%a0)
 2778               	.LVL128:
 2779 13b0 4FEF 0014 		lea (20,%sp),%sp
 2780               		.cfi_def_cfa_offset 60
 2781               	.L75:


 493:test3.c       ****                                 {
 2782               		.loc 1 493 33 view .LVU479
 495:test3.c       ****                                 }
 2783               		.loc 1 495 37 is_stmt 0 view .LVU480
 2784 13b4 2079 0000 		move.l screen_height,%a0
 2784      0000 
 493:test3.c       ****                                 {
 2785               		.loc 1 493 36 view .LVU481
 2786 13ba 4A39 0000 		tst.b inappcom+1.l
 2786      0000 
 2787 13c0 6700 00BA 		jeq .L76
 495:test3.c       ****                                 }
 2788               		.loc 1 495 37 is_stmt 1 view .LVU482
 2789 13c4 2039 0000 		move.l term_input_col+4,%d0
 2789      0000 
 2790 13ca D0B9 0000 		add.l msg_buf_len+4,%d0
 2790      0000 
 2791 13d0 2F00      		move.l %d0,-(%sp)
 2792               		.cfi_def_cfa_offset 64
 2793 13d2 4868 FFFE 		pea -2(%a0)
 2794               		.cfi_def_cfa_offset 68
 499:test3.c       ****                                 }
 2795               		.loc 1 499 37 is_stmt 0 view .LVU483
 2796 13d6 4879 0000 		pea .LC10
 2796      0000 
 2797               		.cfi_def_cfa_offset 72
 2798 13dc 4878 0001 		pea 1.w
 2799               		.cfi_def_cfa_offset 76
 2800 13e0 42A7      		clr.l -(%sp)
 2801               		.cfi_def_cfa_offset 80
 2802 13e2 2047      		move.l %d7,%a0
 2803 13e4 4E90      		jsr (%a0)
 2804               	.LVL129:
 501:test3.c       ****                             }
 2805               		.loc 1 501 33 view .LVU484
 2806 13e6 4FEF 0010 		lea (16,%sp),%sp
 2807               		.cfi_def_cfa_offset 64
 2808 13ea 2EBC 0000 		move.l #.LC5,(%sp)
 2808      0000 
 2809 13f0 4878 0001 		pea 1.w
 2810               		.cfi_def_cfa_offset 68
 2811 13f4 4878 0001 		pea 1.w
 2812               		.cfi_def_cfa_offset 72
 2813 13f8 2247      		move.l %d7,%a1
 2814 13fa 4E91      		jsr (%a1)
 2815               	.LVL130:
 2816               	.LBE9:
 2817 13fc 4FEF 000C 		lea (12,%sp),%sp
 2818               		.cfi_def_cfa_offset 60
 2819               	.L100:
 514:test3.c       ****                             fast_printf(in_alt_screen[0], in_alt_screen[1], CURSORMOVE, 1, 1);
 2820               		.loc 1 514 29 is_stmt 1 view .LVU485
 2821 1400 4878 002F 		pea 47.w
 2822               		.cfi_def_cfa_offset 64
 2823 1404 4879 0000 		pea .LC14
 2823      0000 
 2824               		.cfi_def_cfa_offset 68


 2825 140a 7000      		moveq #0,%d0
 2826 140c 1039 0000 		move.b in_alt_screen+1,%d0
 2826      0000 
 2827 1412 2F00      		move.l %d0,-(%sp)
 2828               		.cfi_def_cfa_offset 72
 2829 1414 41F9 0000 		lea in_alt_screen,%a0
 2829      0000 
 2830 141a 1010      		move.b (%a0),%d0
 2831 141c 2F00      		move.l %d0,-(%sp)
 2832               		.cfi_def_cfa_offset 76
 2833 141e 2247      		move.l %d7,%a1
 2834 1420 4E91      		jsr (%a1)
 2835               	.LVL131:
 515:test3.c       ****                             fast_printf(in_alt_screen[0], in_alt_screen[1], help_text);
 2836               		.loc 1 515 29 view .LVU486
 2837 1422 4878 0001 		pea 1.w
 2838               		.cfi_def_cfa_offset 80
 2839 1426 4878 0001 		pea 1.w
 2840               		.cfi_def_cfa_offset 84
 2841 142a 4879 0000 		pea .LC10
 2841      0000 
 2842               		.cfi_def_cfa_offset 88
 2843 1430 7000      		moveq #0,%d0
 2844 1432 1039 0000 		move.b in_alt_screen+1,%d0
 2844      0000 
 2845 1438 2F00      		move.l %d0,-(%sp)
 2846               		.cfi_def_cfa_offset 92
 2847 143a 41F9 0000 		lea in_alt_screen,%a0
 2847      0000 
 2848 1440 1010      		move.b (%a0),%d0
 2849 1442 2F00      		move.l %d0,-(%sp)
 2850               		.cfi_def_cfa_offset 96
 2851 1444 2247      		move.l %d7,%a1
 2852 1446 4E91      		jsr (%a1)
 2853               	.LVL132:
 516:test3.c       ****                         }
 2854               		.loc 1 516 29 view .LVU487
 2855 1448 4FEF 0020 		lea (32,%sp),%sp
 2856               		.cfi_def_cfa_offset 64
 2857 144c 2EBC 0000 		move.l #help_text,(%sp)
 2857      0000 
 2858 1452 7000      		moveq #0,%d0
 2859 1454 1039 0000 		move.b in_alt_screen+1,%d0
 2859      0000 
 2860 145a 2F00      		move.l %d0,-(%sp)
 2861               		.cfi_def_cfa_offset 68
 2862 145c 41F9 0000 		lea in_alt_screen,%a0
 2862      0000 
 2863 1462 1010      		move.b (%a0),%d0
 2864 1464 2F00      		move.l %d0,-(%sp)
 2865               		.cfi_def_cfa_offset 72
 2866 1466 2247      		move.l %d7,%a1
 2867 1468 4E91      		jsr (%a1)
 2868               	.LVL133:
 552:test3.c       ****                         last_keybuf_len[i] = 0;
 2869               		.loc 1 552 39 is_stmt 0 view .LVU488
 2870 146a 2079 0000 		move.l i,%a0


 2870      0000 
 2871 1470 4FEF 000C 		lea (12,%sp),%sp
 2872               		.cfi_def_cfa_offset 60
 2873 1474 2008      		move.l %a0,%d0
 2874 1476 D088      		add.l %a0,%d0
 2875 1478 6000 FA54 		jra .L99
 2876               	.L76:
 2877               	.LBB10:
 499:test3.c       ****                                 }
 2878               		.loc 1 499 37 is_stmt 1 view .LVU489
 2879 147c 700A      		moveq #10,%d0
 2880 147e D0B9 0000 		add.l cmd_buf_len+4,%d0
 2880      0000 
 2881 1484 2F00      		move.l %d0,-(%sp)
 2882               		.cfi_def_cfa_offset 64
 2883 1486 2F08      		move.l %a0,-(%sp)
 2884               		.cfi_def_cfa_offset 68
 2885 1488 4879 0000 		pea .LC10
 2885      0000 
 2886               		.cfi_def_cfa_offset 72
 2887 148e 4878 0001 		pea 1.w
 2888               		.cfi_def_cfa_offset 76
 2889 1492 42A7      		clr.l -(%sp)
 2890               		.cfi_def_cfa_offset 80
 2891 1494 2047      		move.l %d7,%a0
 2892 1496 4E90      		jsr (%a0)
 2893               	.LVL134:
 501:test3.c       ****                             }
 2894               		.loc 1 501 33 is_stmt 0 view .LVU490
 2895 1498 4FEF 0010 		lea (16,%sp),%sp
 2896               		.cfi_def_cfa_offset 64
 2897 149c 2EBC 0000 		move.l #.LC5,(%sp)
 2897      0000 
 2898 14a2 4878 0001 		pea 1.w
 2899               		.cfi_def_cfa_offset 68
 2900 14a6 4878 0001 		pea 1.w
 2901               		.cfi_def_cfa_offset 72
 2902 14aa 2247      		move.l %d7,%a1
 2903 14ac 4E91      		jsr (%a1)
 2904               	.LVL135:
 2905               	.LBE10:
 2906 14ae 4FEF 000C 		lea (12,%sp),%sp
 2907               		.cfi_def_cfa_offset 60
 2908 14b2 6000 FF4C 		jra .L100
 2909               	.L74:
 2910               	.LBB11:
 491:test3.c       ****                                 }
 2911               		.loc 1 491 37 is_stmt 1 view .LVU491
 2912 14b6 700A      		moveq #10,%d0
 2913 14b8 41F9 0000 		lea cmd_buf_len,%a0
 2913      0000 
 2914 14be D090      		add.l (%a0),%d0
 2915 14c0 2F00      		move.l %d0,-(%sp)
 2916               		.cfi_def_cfa_offset 64
 2917 14c2 2F39 0000 		move.l screen_height,-(%sp)
 2917      0000 
 2918               		.cfi_def_cfa_offset 68


 2919 14c8 4879 0000 		pea .LC10
 2919      0000 
 2920               		.cfi_def_cfa_offset 72
 2921 14ce 42A7      		clr.l -(%sp)
 2922               		.cfi_def_cfa_offset 76
 2923 14d0 4878 0001 		pea 1.w
 2924               		.cfi_def_cfa_offset 80
 2925 14d4 2247      		move.l %d7,%a1
 2926 14d6 4E91      		jsr (%a1)
 2927               	.LVL136:
 2928 14d8 4FEF 0014 		lea (20,%sp),%sp
 2929               		.cfi_def_cfa_offset 60
 2930 14dc 6000 FED6 		jra .L75
 2931               	.L98:
 456:test3.c       ****                                     fast_printf(i == 0, i == 1, SAVECURSORLOC);
 2932               		.loc 1 456 37 view .LVU492
 2933 14e0 4879 0000 		pea .LC1
 2933      0000 
 2934               		.cfi_def_cfa_offset 64
 2935 14e6 7C01      		moveq #1,%d6
 2936 14e8 BC80      		cmp.l %d0,%d6
 2937 14ea 57C1      		seq %d1
 2938 14ec 4881      		ext.w %d1
 2939 14ee 48C1      		ext.l %d1
 2940 14f0 4481      		neg.l %d1
 2941 14f2 2F01      		move.l %d1,-(%sp)
 2942               		.cfi_def_cfa_offset 68
 2943 14f4 4A80      		tst.l %d0
 2944 14f6 57C0      		seq %d0
 2945 14f8 4880      		ext.w %d0
 2946 14fa 48C0      		ext.l %d0
 2947 14fc 4480      		neg.l %d0
 2948 14fe 2F00      		move.l %d0,-(%sp)
 2949               		.cfi_def_cfa_offset 72
 2950 1500 2047      		move.l %d7,%a0
 2951 1502 4E90      		jsr (%a0)
 2952               	.LVL137:
 457:test3.c       ****                                     fast_printf(i == 0, i == 1, "\x1b[999;H\x1b[47;30m%s\x1b[K\x1b[
 2953               		.loc 1 457 37 view .LVU493
 2954 1504 2039 0000 		move.l i,%d0
 2954      0000 
 2955 150a 4879 0000 		pea .LC2
 2955      0000 
 2956               		.cfi_def_cfa_offset 76
 2957 1510 BC80      		cmp.l %d0,%d6
 2958 1512 57C1      		seq %d1
 2959 1514 4881      		ext.w %d1
 2960 1516 48C1      		ext.l %d1
 2961 1518 4481      		neg.l %d1
 2962 151a 2F01      		move.l %d1,-(%sp)
 2963               		.cfi_def_cfa_offset 80
 2964 151c 4A80      		tst.l %d0
 2965 151e 57C0      		seq %d0
 2966 1520 4880      		ext.w %d0
 2967 1522 48C0      		ext.l %d0
 2968 1524 4480      		neg.l %d0
 2969 1526 2F00      		move.l %d0,-(%sp)


 2970               		.cfi_def_cfa_offset 84
 2971 1528 2247      		move.l %d7,%a1
 2972 152a 4E91      		jsr (%a1)
 2973               	.LVL138:
 458:test3.c       ****                                     fast_printf(i == 0, i == 1, RETCURSORLOC);
 2974               		.loc 1 458 37 view .LVU494
 458:test3.c       ****                                     fast_printf(i == 0, i == 1, RETCURSORLOC);
 2975               		.loc 1 458 121 is_stmt 0 view .LVU495
 2976 152c 2039 0000 		move.l i,%d0
 2976      0000 
 2977 1532 2200      		move.l %d0,%d1
 2978 1534 D280      		add.l %d0,%d1
 2979 1536 D281      		add.l %d1,%d1
 458:test3.c       ****                                     fast_printf(i == 0, i == 1, RETCURSORLOC);
 2980               		.loc 1 458 113 view .LVU496
 2981 1538 43F9 0000 		lea tip_num,%a1
 2981      0000 
 2982 153e 2071 1800 		move.l (%a1,%d1.l),%a0
 2983 1542 2208      		move.l %a0,%d1
 2984 1544 D288      		add.l %a0,%d1
 2985 1546 D288      		add.l %a0,%d1
 2986 1548 2C01      		move.l %d1,%d6
 2987 154a EB8E      		lsl.l #5,%d6
 2988 154c D286      		add.l %d6,%d1
 2989 154e D288      		add.l %a0,%d1
 458:test3.c       ****                                     fast_printf(i == 0, i == 1, RETCURSORLOC);
 2990               		.loc 1 458 37 view .LVU497
 2991 1550 0681 0000 		add.l #tip_list,%d1
 2991      0000 
 2992 1556 2F01      		move.l %d1,-(%sp)
 2993               		.cfi_def_cfa_offset 88
 2994 1558 4879 0000 		pea .LC9
 2994      0000 
 2995               		.cfi_def_cfa_offset 92
 2996 155e 7C01      		moveq #1,%d6
 2997 1560 BC80      		cmp.l %d0,%d6
 2998 1562 57C1      		seq %d1
 2999 1564 4881      		ext.w %d1
 3000 1566 48C1      		ext.l %d1
 3001 1568 4481      		neg.l %d1
 3002 156a 2F01      		move.l %d1,-(%sp)
 3003               		.cfi_def_cfa_offset 96
 3004 156c 4A80      		tst.l %d0
 3005 156e 57C0      		seq %d0
 3006 1570 4880      		ext.w %d0
 3007 1572 48C0      		ext.l %d0
 3008 1574 4480      		neg.l %d0
 3009 1576 2F00      		move.l %d0,-(%sp)
 3010               		.cfi_def_cfa_offset 100
 3011 1578 2047      		move.l %d7,%a0
 3012 157a 4E90      		jsr (%a0)
 3013               	.LVL139:
 459:test3.c       ****                                     fast_printf(i == 0, i == 1, CURSORVISIBLE);
 3014               		.loc 1 459 37 is_stmt 1 view .LVU498
 3015 157c 2039 0000 		move.l i,%d0
 3015      0000 
 3016 1582 4FEF 0024 		lea (36,%sp),%sp


 3017               		.cfi_def_cfa_offset 64
 3018 1586 2EBC 0000 		move.l #.LC4,(%sp)
 3018      0000 
 3019 158c BC80      		cmp.l %d0,%d6
 3020 158e 57C1      		seq %d1
 3021 1590 4881      		ext.w %d1
 3022 1592 48C1      		ext.l %d1
 3023 1594 4481      		neg.l %d1
 3024 1596 2F01      		move.l %d1,-(%sp)
 3025               		.cfi_def_cfa_offset 68
 3026 1598 4A80      		tst.l %d0
 3027 159a 57C0      		seq %d0
 3028 159c 4880      		ext.w %d0
 3029 159e 48C0      		ext.l %d0
 3030 15a0 4480      		neg.l %d0
 3031 15a2 2F00      		move.l %d0,-(%sp)
 3032               		.cfi_def_cfa_offset 72
 3033 15a4 2247      		move.l %d7,%a1
 3034 15a6 4E91      		jsr (%a1)
 3035               	.LVL140:
 460:test3.c       ****                                     warn_empty[i] = false; // Clear the warning flag
 3036               		.loc 1 460 37 view .LVU499
 3037 15a8 2039 0000 		move.l i,%d0
 3037      0000 
 3038 15ae 4879 0000 		pea .LC5
 3038      0000 
 3039               		.cfi_def_cfa_offset 76
 3040 15b4 BC80      		cmp.l %d0,%d6
 3041 15b6 57C1      		seq %d1
 3042 15b8 4881      		ext.w %d1
 3043 15ba 48C1      		ext.l %d1
 3044 15bc 4481      		neg.l %d1
 3045 15be 2F01      		move.l %d1,-(%sp)
 3046               		.cfi_def_cfa_offset 80
 3047 15c0 4A80      		tst.l %d0
 3048 15c2 57C0      		seq %d0
 3049 15c4 4880      		ext.w %d0
 3050 15c6 48C0      		ext.l %d0
 3051 15c8 4480      		neg.l %d0
 3052 15ca 2F00      		move.l %d0,-(%sp)
 3053               		.cfi_def_cfa_offset 84
 3054 15cc 2047      		move.l %d7,%a0
 3055 15ce 4E90      		jsr (%a0)
 3056               	.LVL141:
 461:test3.c       ****                                 }
 3057               		.loc 1 461 37 view .LVU500
 461:test3.c       ****                                 }
 3058               		.loc 1 461 51 is_stmt 0 view .LVU501
 3059 15d0 2039 0000 		move.l i,%d0
 3059      0000 
 3060 15d6 4237 084E 		clr.b 78(%sp,%d0.l)
 3061 15da 4FEF 0018 		lea (24,%sp),%sp
 3062               		.cfi_def_cfa_offset 60
 3063 15de 6000 FB64 		jra .L71
 3064               	.L81:
 3065               	.LBE11:
 539:test3.c       ****                                 fast_printf(i == 0, i == 1, SAVECURSORLOC);


 3066               		.loc 1 539 33 is_stmt 1 view .LVU502
 3067 15e2 4879 0000 		pea .LC1
 3067      0000 
 3068               		.cfi_def_cfa_offset 64
 3069 15e8 7201      		moveq #1,%d1
 3070 15ea B288      		cmp.l %a0,%d1
 3071 15ec 57C0      		seq %d0
 3072 15ee 4880      		ext.w %d0
 3073 15f0 48C0      		ext.l %d0
 3074 15f2 4480      		neg.l %d0
 3075 15f4 2F00      		move.l %d0,-(%sp)
 3076               		.cfi_def_cfa_offset 68
 3077 15f6 B0FC 0000 		cmp.w #0,%a0
 3078 15fa 57C0      		seq %d0
 3079 15fc 4880      		ext.w %d0
 3080 15fe 48C0      		ext.l %d0
 3081 1600 4480      		neg.l %d0
 3082 1602 2F00      		move.l %d0,-(%sp)
 3083               		.cfi_def_cfa_offset 72
 3084 1604 2047      		move.l %d7,%a0
 3085 1606 4E90      		jsr (%a0)
 3086               	.LVL142:
 540:test3.c       ****                                 fast_printf(i == 0, i == 1, "\x1b[999;H\x1b[44;97m\x1b[5mMaximum ch
 3087               		.loc 1 540 33 view .LVU503
 3088 1608 2039 0000 		move.l i,%d0
 3088      0000 
 3089 160e 4879 0000 		pea .LC2
 3089      0000 
 3090               		.cfi_def_cfa_offset 76
 3091 1614 7A01      		moveq #1,%d5
 3092 1616 BA80      		cmp.l %d0,%d5
 3093 1618 57C1      		seq %d1
 3094 161a 4881      		ext.w %d1
 3095 161c 48C1      		ext.l %d1
 3096 161e 4481      		neg.l %d1
 3097 1620 2F01      		move.l %d1,-(%sp)
 3098               		.cfi_def_cfa_offset 80
 3099 1622 4A80      		tst.l %d0
 3100 1624 57C0      		seq %d0
 3101 1626 4880      		ext.w %d0
 3102 1628 48C0      		ext.l %d0
 3103 162a 4480      		neg.l %d0
 3104 162c 2F00      		move.l %d0,-(%sp)
 3105               		.cfi_def_cfa_offset 84
 3106 162e 2047      		move.l %d7,%a0
 3107 1630 4E90      		jsr (%a0)
 3108               	.LVL143:
 541:test3.c       ****                                 fast_printf(i == 0, i == 1, RETCURSORLOC);
 3109               		.loc 1 541 33 view .LVU504
 3110 1632 2039 0000 		move.l i,%d0
 3110      0000 
 3111 1638 4878 0064 		pea 100.w
 3112               		.cfi_def_cfa_offset 88
 3113 163c 4879 0000 		pea .LC20
 3113      0000 
 3114               		.cfi_def_cfa_offset 92
 3115 1642 BA80      		cmp.l %d0,%d5


 3116 1644 57C1      		seq %d1
 3117 1646 4881      		ext.w %d1
 3118 1648 48C1      		ext.l %d1
 3119 164a 4481      		neg.l %d1
 3120 164c 2F01      		move.l %d1,-(%sp)
 3121               		.cfi_def_cfa_offset 96
 3122 164e 4A80      		tst.l %d0
 3123 1650 57C0      		seq %d0
 3124 1652 4880      		ext.w %d0
 3125 1654 48C0      		ext.l %d0
 3126 1656 4480      		neg.l %d0
 3127 1658 2F00      		move.l %d0,-(%sp)
 3128               		.cfi_def_cfa_offset 100
 3129 165a 2247      		move.l %d7,%a1
 3130 165c 4E91      		jsr (%a1)
 3131               	.LVL144:
 542:test3.c       ****                                 fast_printf(i == 0, i == 1, CURSORVISIBLE);
 3132               		.loc 1 542 33 view .LVU505
 3133 165e 2039 0000 		move.l i,%d0
 3133      0000 
 3134 1664 4FEF 0024 		lea (36,%sp),%sp
 3135               		.cfi_def_cfa_offset 64
 3136 1668 2EBC 0000 		move.l #.LC4,(%sp)
 3136      0000 
 3137 166e BA80      		cmp.l %d0,%d5
 3138 1670 57C1      		seq %d1
 3139 1672 4881      		ext.w %d1
 3140 1674 48C1      		ext.l %d1
 3141 1676 4481      		neg.l %d1
 3142 1678 2F01      		move.l %d1,-(%sp)
 3143               		.cfi_def_cfa_offset 68
 3144 167a 4A80      		tst.l %d0
 3145 167c 57C0      		seq %d0
 3146 167e 4880      		ext.w %d0
 3147 1680 48C0      		ext.l %d0
 3148 1682 4480      		neg.l %d0
 3149 1684 2F00      		move.l %d0,-(%sp)
 3150               		.cfi_def_cfa_offset 72
 3151 1686 2047      		move.l %d7,%a0
 3152 1688 4E90      		jsr (%a0)
 3153               	.LVL145:
 543:test3.c       ****                                 warn_length[i] = true; // Set the warning flag
 3154               		.loc 1 543 33 view .LVU506
 3155 168a 2039 0000 		move.l i,%d0
 3155      0000 
 3156 1690 4879 0000 		pea .LC5
 3156      0000 
 3157               		.cfi_def_cfa_offset 76
 3158 1696 BA80      		cmp.l %d0,%d5
 3159 1698 57C1      		seq %d1
 3160 169a 4881      		ext.w %d1
 3161 169c 48C1      		ext.l %d1
 3162 169e 4481      		neg.l %d1
 3163 16a0 2F01      		move.l %d1,-(%sp)
 3164               		.cfi_def_cfa_offset 80
 3165 16a2 4A80      		tst.l %d0
 3166 16a4 57C0      		seq %d0


 3167 16a6 4880      		ext.w %d0
 3168 16a8 48C0      		ext.l %d0
 3169 16aa 4480      		neg.l %d0
 3170 16ac 2F00      		move.l %d0,-(%sp)
 3171               		.cfi_def_cfa_offset 84
 3172 16ae 2247      		move.l %d7,%a1
 3173 16b0 4E91      		jsr (%a1)
 3174               	.LVL146:
 544:test3.c       ****                             }
 3175               		.loc 1 544 33 view .LVU507
 544:test3.c       ****                             }
 3176               		.loc 1 544 44 is_stmt 0 view .LVU508
 3177 16b2 2079 0000 		move.l i,%a0
 3177      0000 
 544:test3.c       ****                             }
 3178               		.loc 1 544 48 view .LVU509
 3179 16b8 1FBC 0001 		move.b #1,76(%sp,%a0.l)
 3179      884C 
 3180 16be 4FEF 0018 		lea (24,%sp),%sp
 3181               		.cfi_def_cfa_offset 60
 3182 16c2 2008      		move.l %a0,%d0
 3183 16c4 D088      		add.l %a0,%d0
 552:test3.c       ****                         last_keybuf_len[i] = 0;
 3184               		.loc 1 552 25 is_stmt 1 view .LVU510
 552:test3.c       ****                         last_keybuf_len[i] = 0;
 3185               		.loc 1 552 43 is_stmt 0 view .LVU511
 3186 16c6 D080      		add.l %d0,%d0
 3187 16c8 2200      		move.l %d0,%d1
 3188 16ca D288      		add.l %a0,%d1
 3189 16cc D281      		add.l %d1,%d1
 3190 16ce 2244      		move.l %d4,%a1
 3191 16d0 4231 1800 		clr.b (%a1,%d1.l)
 553:test3.c       ****                     }
 3192               		.loc 1 553 25 is_stmt 1 view .LVU512
 553:test3.c       ****                     }
 3193               		.loc 1 553 44 is_stmt 0 view .LVU513
 3194 16d4 2242      		move.l %d2,%a1
 3195 16d6 42B1 0800 		clr.l (%a1,%d0.l)
 3196 16da 6000 F5E6 		jra .L94
 3197               		.cfi_endproc
 3198               	.LFE6:
 3199               		.size	main_app, .-main_app
 3200               		.section	.rodata.str1.1
 3201               	.LC21:
 3202 0183 1B5B 7200 		.string	"\033[r"
 3203               	.LC22:
 3204 0187 1B5B 3437 		.string	"\033[47;30mRuntime 00:00:00\033[K\033[0m\033[999;H\033[47;30m%s\033[K\033[0m"
 3204      3B33 306D 
 3204      5275 6E74 
 3204      696D 6520 
 3204      3030 3A30 
 3205               	.LC23:
 3206 01bf 1B5B 2564 		.string	"\033[%d;%dr"
 3206      3B25 6472 
 3206      00
 3207               	.LC24:
 3208 01c8 E294 8C00 		.string	"\342\224\214"


 3209               	.LC25:
 3210 01cc E294 9000 		.string	"\342\224\220"
 3211               	.LC26:
 3212 01d0 E294 8000 		.string	"\342\224\200"
 3213               	.LC27:
 3214 01d4 E294 8200 		.string	"\342\224\202"
 3215               	.LC28:
 3216 01d8 E294 9C00 		.string	"\342\224\234"
 3217               	.LC29:
 3218 01dc E294 A400 		.string	"\342\224\244"
 3219               	.LC30:
 3220 01e0 E294 9400 		.string	"\342\224\224"
 3221               	.LC31:
 3222 01e4 E294 AC00 		.string	"\342\224\254"
 3223               	.LC32:
 3224 01e8 E294 9800 		.string	"\342\224\230"
 3225               	.LC33:
 3226 01ec 1B5B 316D 		.string	"\033[1m%s\033[0m"
 3226      2573 1B5B 
 3226      306D 00
 3227               	.LC34:
 3228 01f7 E294 B400 		.string	"\342\224\264"
 3229               		.text
 3230               		.align	2
 3231               		.globl	init_ui
 3232               		.type	init_ui, @function
 3233               	init_ui:
 3234               	.LFB7:
 561:test3.c       ****     }
 562:test3.c       **** }
 563:test3.c       **** 
 564:test3.c       **** // Initialize the user interface and layout of the terminal
 565:test3.c       **** void init_ui()
 566:test3.c       **** {
 3235               		.loc 1 566 1 is_stmt 1 view -0
 3236               		.cfi_startproc
 3237 16de 48E7 2030 		movem.l #8240,-(%sp)
 3238               		.cfi_def_cfa_offset 16
 3239               		.cfi_offset 2, -16
 3240               		.cfi_offset 10, -12
 3241               		.cfi_offset 11, -8
 567:test3.c       ****     // Set initial positions for input columns based on the message input prompt length
 568:test3.c       ****     for (i = 0; i <= 1; i++)
 3242               		.loc 1 568 5 view .LVU515
 3243               		.loc 1 568 19 view .LVU516
 569:test3.c       ****     {
 570:test3.c       ****         term_input_col[i] = strlen(msg_input_prompt) + 3;
 3244               		.loc 1 570 9 view .LVU517
 3245               		.loc 1 570 27 is_stmt 0 view .LVU518
 3246 16e2 700F      		moveq #15,%d0
 3247 16e4 23C0 0000 		move.l %d0,term_input_col
 3247      0000 
 568:test3.c       ****     {
 3248               		.loc 1 568 26 is_stmt 1 view .LVU519
 568:test3.c       ****     {
 3249               		.loc 1 568 19 view .LVU520
 3250               		.loc 1 570 9 view .LVU521


 3251               		.loc 1 570 27 is_stmt 0 view .LVU522
 3252 16ea 23C0 0000 		move.l %d0,term_input_col+4
 3252      0000 
 568:test3.c       ****     {
 3253               		.loc 1 568 26 is_stmt 1 view .LVU523
 568:test3.c       ****     {
 3254               		.loc 1 568 19 view .LVU524
 3255 16f0 7402      		moveq #2,%d2
 3256 16f2 23C2 0000 		move.l %d2,i
 3256      0000 
 571:test3.c       ****     }
 572:test3.c       **** 
 573:test3.c       ****     // Configure terminal screen settings
 574:test3.c       ****     fast_printf(true, true, SETSCREENSIZE, screen_height, screen_width); // Set screen size
 3257               		.loc 1 574 5 view .LVU525
 3258 16f8 2F39 0000 		move.l screen_width,-(%sp)
 3258      0000 
 3259               		.cfi_def_cfa_offset 20
 3260 16fe 2F39 0000 		move.l screen_height,-(%sp)
 3260      0000 
 3261               		.cfi_def_cfa_offset 24
 3262 1704 4879 0000 		pea .LC0
 3262      0000 
 3263               		.cfi_def_cfa_offset 28
 3264 170a 4878 0001 		pea 1.w
 3265               		.cfi_def_cfa_offset 32
 3266 170e 4878 0001 		pea 1.w
 3267               		.cfi_def_cfa_offset 36
 3268 1712 45FA E8EC 		lea fast_printf,%a2
 3269 1716 4E92      		jsr (%a2)
 3270               	.LVL147:
 575:test3.c       ****     fast_printf(true, true, DECRESETMODE, 47); // Reset scroll mode
 3271               		.loc 1 575 5 view .LVU526
 3272 1718 4878 002F 		pea 47.w
 3273               		.cfi_def_cfa_offset 40
 3274 171c 4879 0000 		pea .LC6
 3274      0000 
 3275               		.cfi_def_cfa_offset 44
 3276 1722 4878 0001 		pea 1.w
 3277               		.cfi_def_cfa_offset 48
 3278 1726 4878 0001 		pea 1.w
 3279               		.cfi_def_cfa_offset 52
 3280 172a 4E92      		jsr (%a2)
 3281               	.LVL148:
 576:test3.c       ****     fast_printf(true, true, CLEARDISPLAY); // Clear the terminal display
 3282               		.loc 1 576 5 view .LVU527
 3283 172c 4FEF 0020 		lea (32,%sp),%sp
 3284               		.cfi_def_cfa_offset 20
 3285 1730 2EBC 0000 		move.l #.LC15,(%sp)
 3285      0000 
 3286 1736 4878 0001 		pea 1.w
 3287               		.cfi_def_cfa_offset 24
 3288 173a 4878 0001 		pea 1.w
 3289               		.cfi_def_cfa_offset 28
 3290 173e 4E92      		jsr (%a2)
 3291               	.LVL149:
 577:test3.c       ****     fast_printf(true, true, RESETSGR); // Reset text formatting


 3292               		.loc 1 577 5 view .LVU528
 3293 1740 4879 0000 		pea .LC8
 3293      0000 
 3294               		.cfi_def_cfa_offset 32
 3295 1746 4878 0001 		pea 1.w
 3296               		.cfi_def_cfa_offset 36
 3297 174a 4878 0001 		pea 1.w
 3298               		.cfi_def_cfa_offset 40
 3299 174e 4E92      		jsr (%a2)
 3300               	.LVL150:
 578:test3.c       ****     fast_printf(true, true, RESETSCROLLROWS); // Reset scroll rows
 3301               		.loc 1 578 5 view .LVU529
 3302 1750 4879 0000 		pea .LC21
 3302      0000 
 3303               		.cfi_def_cfa_offset 44
 3304 1756 4878 0001 		pea 1.w
 3305               		.cfi_def_cfa_offset 48
 3306 175a 4878 0001 		pea 1.w
 3307               		.cfi_def_cfa_offset 52
 3308 175e 4E92      		jsr (%a2)
 3309               	.LVL151:
 579:test3.c       ****     fast_printf(true, true, DECSETMODE, 19); // Enable a specific terminal mode
 3310               		.loc 1 579 5 view .LVU530
 3311 1760 4FEF 0024 		lea (36,%sp),%sp
 3312               		.cfi_def_cfa_offset 16
 3313 1764 4878 0013 		pea 19.w
 3314               		.cfi_def_cfa_offset 20
 3315 1768 4879 0000 		pea .LC14
 3315      0000 
 3316               		.cfi_def_cfa_offset 24
 3317 176e 4878 0001 		pea 1.w
 3318               		.cfi_def_cfa_offset 28
 3319 1772 4878 0001 		pea 1.w
 3320               		.cfi_def_cfa_offset 32
 3321 1776 4E92      		jsr (%a2)
 3322               	.LVL152:
 580:test3.c       **** 
 581:test3.c       ****     // Display runtime and initial tip
 582:test3.c       ****     fast_printf(true, true, "\x1b[47;30mRuntime 00:00:00\x1b[K\x1b[0m\x1b[999;H\x1b[47;30m%s\x1b[K\
 3323               		.loc 1 582 5 view .LVU531
 3324 1778 4879 0000 		pea tip_list
 3324      0000 
 3325               		.cfi_def_cfa_offset 36
 3326 177e 4879 0000 		pea .LC22
 3326      0000 
 3327               		.cfi_def_cfa_offset 40
 3328 1784 4878 0001 		pea 1.w
 3329               		.cfi_def_cfa_offset 44
 3330 1788 4878 0001 		pea 1.w
 3331               		.cfi_def_cfa_offset 48
 3332 178c 4E92      		jsr (%a2)
 3333               	.LVL153:
 583:test3.c       **** 
 584:test3.c       ****     // Configure scrolling region
 585:test3.c       ****     fast_printf(true, true, CHANGESCROLLROWS, 2, screen_height - 4);
 3334               		.loc 1 585 5 view .LVU532
 3335 178e 4FEF 0020 		lea (32,%sp),%sp


 3336               		.cfi_def_cfa_offset 16
 3337 1792 2039 0000 		move.l screen_height,%d0
 3337      0000 
 3338 1798 5980      		subq.l #4,%d0
 3339 179a 2F00      		move.l %d0,-(%sp)
 3340               		.cfi_def_cfa_offset 20
 3341 179c 4878 0002 		pea 2.w
 3342               		.cfi_def_cfa_offset 24
 3343 17a0 4879 0000 		pea .LC23
 3343      0000 
 3344               		.cfi_def_cfa_offset 28
 3345 17a6 4878 0001 		pea 1.w
 3346               		.cfi_def_cfa_offset 32
 3347 17aa 4878 0001 		pea 1.w
 3348               		.cfi_def_cfa_offset 36
 3349 17ae 4E92      		jsr (%a2)
 3350               	.LVL154:
 586:test3.c       ****     fast_printf(true, true, DECRESETMODE, 19); // Reset terminal mode
 3351               		.loc 1 586 5 view .LVU533
 3352 17b0 4878 0013 		pea 19.w
 3353               		.cfi_def_cfa_offset 40
 3354 17b4 4879 0000 		pea .LC6
 3354      0000 
 3355               		.cfi_def_cfa_offset 44
 3356 17ba 4878 0001 		pea 1.w
 3357               		.cfi_def_cfa_offset 48
 3358 17be 4878 0001 		pea 1.w
 3359               		.cfi_def_cfa_offset 52
 3360 17c2 4E92      		jsr (%a2)
 3361               	.LVL155:
 587:test3.c       ****     fast_printf(true, true, CURSORINVISIBLE); // Make the cursor invisible
 3362               		.loc 1 587 5 view .LVU534
 3363 17c4 4FEF 0020 		lea (32,%sp),%sp
 3364               		.cfi_def_cfa_offset 20
 3365 17c8 2EBC 0000 		move.l #.LC1,(%sp)
 3365      0000 
 3366 17ce 4878 0001 		pea 1.w
 3367               		.cfi_def_cfa_offset 24
 3368 17d2 4878 0001 		pea 1.w
 3369               		.cfi_def_cfa_offset 28
 3370 17d6 4E92      		jsr (%a2)
 3371               	.LVL156:
 588:test3.c       **** 
 589:test3.c       ****     // Draw the top border of the UI
 590:test3.c       ****     fast_printf(true, true, CURSORMOVE, 2, 1);
 3372               		.loc 1 590 5 view .LVU535
 3373 17d8 4878 0001 		pea 1.w
 3374               		.cfi_def_cfa_offset 32
 3375 17dc 4878 0002 		pea 2.w
 3376               		.cfi_def_cfa_offset 36
 3377 17e0 4879 0000 		pea .LC10
 3377      0000 
 3378               		.cfi_def_cfa_offset 40
 3379 17e6 4878 0001 		pea 1.w
 3380               		.cfi_def_cfa_offset 44
 3381 17ea 4878 0001 		pea 1.w
 3382               		.cfi_def_cfa_offset 48


 3383 17ee 4E92      		jsr (%a2)
 3384               	.LVL157:
 591:test3.c       ****     fast_printf(true, true, "┌"); // Top left corner
 3385               		.loc 1 591 5 view .LVU536
 3386 17f0 4FEF 001C 		lea (28,%sp),%sp
 3387               		.cfi_def_cfa_offset 20
 3388 17f4 2EBC 0000 		move.l #.LC24,(%sp)
 3388      0000 
 3389 17fa 4878 0001 		pea 1.w
 3390               		.cfi_def_cfa_offset 24
 3391 17fe 4878 0001 		pea 1.w
 3392               		.cfi_def_cfa_offset 28
 3393 1802 4E92      		jsr (%a2)
 3394               	.LVL158:
 592:test3.c       ****     for (i = 1; i <= screen_width - 2; i++)
 3395               		.loc 1 592 5 view .LVU537
 3396               		.loc 1 592 12 is_stmt 0 view .LVU538
 3397 1804 7401      		moveq #1,%d2
 3398 1806 23C2 0000 		move.l %d2,i
 3398      0000 
 3399               		.loc 1 592 19 is_stmt 1 view .LVU539
 3400 180c 4FEF 000C 		lea (12,%sp),%sp
 3401               		.cfi_def_cfa_offset 16
 3402 1810 7002      		moveq #2,%d0
 3403 1812 B0B9 0000 		cmp.l screen_width.l,%d0
 3403      0000 
 3404 1818 672E      		jeq .L105
 3405               	.L102:
 593:test3.c       ****         fast_printf(true, true, "─"); // Top horizontal border
 3406               		.loc 1 593 9 discriminator 3 view .LVU540
 3407 181a 4879 0000 		pea .LC26
 3407      0000 
 3408               		.cfi_def_cfa_offset 20
 3409 1820 4878 0001 		pea 1.w
 3410               		.cfi_def_cfa_offset 24
 3411 1824 4878 0001 		pea 1.w
 3412               		.cfi_def_cfa_offset 28
 3413 1828 4E92      		jsr (%a2)
 3414               	.LVL159:
 592:test3.c       ****     for (i = 1; i <= screen_width - 2; i++)
 3415               		.loc 1 592 41 discriminator 3 view .LVU541
 3416 182a 2039 0000 		move.l i,%d0
 3416      0000 
 3417 1830 5280      		addq.l #1,%d0
 3418 1832 23C0 0000 		move.l %d0,i
 3418      0000 
 592:test3.c       ****     for (i = 1; i <= screen_width - 2; i++)
 3419               		.loc 1 592 19 discriminator 3 view .LVU542
 592:test3.c       ****     for (i = 1; i <= screen_width - 2; i++)
 3420               		.loc 1 592 35 is_stmt 0 discriminator 3 view .LVU543
 3421 1838 2239 0000 		move.l screen_width,%d1
 3421      0000 
 3422 183e 5581      		subq.l #2,%d1
 592:test3.c       ****     for (i = 1; i <= screen_width - 2; i++)
 3423               		.loc 1 592 19 discriminator 3 view .LVU544
 3424 1840 4FEF 000C 		lea (12,%sp),%sp
 3425               		.cfi_def_cfa_offset 16


 3426 1844 B081      		cmp.l %d1,%d0
 3427 1846 63D2      		jls .L102
 3428               	.L105:
 594:test3.c       ****     fast_printf(true, true, "┐"); // Top right corner
 3429               		.loc 1 594 5 is_stmt 1 view .LVU545
 3430 1848 4879 0000 		pea .LC25
 3430      0000 
 3431               		.cfi_def_cfa_offset 20
 3432 184e 4878 0001 		pea 1.w
 3433               		.cfi_def_cfa_offset 24
 3434 1852 4878 0001 		pea 1.w
 3435               		.cfi_def_cfa_offset 28
 3436 1856 4E92      		jsr (%a2)
 3437               	.LVL160:
 595:test3.c       **** 
 596:test3.c       ****     // Draw the vertical borders
 597:test3.c       ****     for (i = 3; i <= screen_height - 4; i++)
 3438               		.loc 1 597 5 view .LVU546
 3439               		.loc 1 597 12 is_stmt 0 view .LVU547
 3440 1858 7403      		moveq #3,%d2
 3441 185a 23C2 0000 		move.l %d2,i
 3441      0000 
 3442               		.loc 1 597 19 is_stmt 1 view .LVU548
 3443               		.loc 1 597 36 is_stmt 0 view .LVU549
 3444 1860 2079 0000 		move.l screen_height,%a0
 3444      0000 
 3445 1866 2208      		move.l %a0,%d1
 3446 1868 5981      		subq.l #4,%d1
 3447               		.loc 1 597 19 view .LVU550
 3448 186a 4FEF 000C 		lea (12,%sp),%sp
 3449               		.cfi_def_cfa_offset 16
 3450 186e 7003      		moveq #3,%d0
 3451 1870 7402      		moveq #2,%d2
 3452 1872 B481      		cmp.l %d1,%d2
 3453 1874 6476      		jcc .L104
 3454               	.L103:
 598:test3.c       ****     {
 599:test3.c       ****         fast_printf(true, true, CURSORMOVE, i, 1);
 3455               		.loc 1 599 9 is_stmt 1 discriminator 3 view .LVU551
 3456 1876 4878 0001 		pea 1.w
 3457               		.cfi_def_cfa_offset 20
 3458 187a 2F00      		move.l %d0,-(%sp)
 3459               		.cfi_def_cfa_offset 24
 3460 187c 4879 0000 		pea .LC10
 3460      0000 
 3461               		.cfi_def_cfa_offset 28
 3462 1882 4878 0001 		pea 1.w
 3463               		.cfi_def_cfa_offset 32
 3464 1886 4878 0001 		pea 1.w
 3465               		.cfi_def_cfa_offset 36
 3466 188a 4E92      		jsr (%a2)
 3467               	.LVL161:
 600:test3.c       ****         fast_printf(true, true, "│"); // Left vertical border
 3468               		.loc 1 600 9 discriminator 3 view .LVU552
 3469 188c 4879 0000 		pea .LC27
 3469      0000 
 3470               		.cfi_def_cfa_offset 40


 3471 1892 4878 0001 		pea 1.w
 3472               		.cfi_def_cfa_offset 44
 3473 1896 4878 0001 		pea 1.w
 3474               		.cfi_def_cfa_offset 48
 3475 189a 4E92      		jsr (%a2)
 3476               	.LVL162:
 601:test3.c       ****         fast_printf(true, true, CURSORMOVE, i, screen_width);
 3477               		.loc 1 601 9 discriminator 3 view .LVU553
 3478 189c 4FEF 001C 		lea (28,%sp),%sp
 3479               		.cfi_def_cfa_offset 20
 3480 18a0 2EB9 0000 		move.l screen_width,(%sp)
 3480      0000 
 3481 18a6 2F39 0000 		move.l i,-(%sp)
 3481      0000 
 3482               		.cfi_def_cfa_offset 24
 3483 18ac 4879 0000 		pea .LC10
 3483      0000 
 3484               		.cfi_def_cfa_offset 28
 3485 18b2 4878 0001 		pea 1.w
 3486               		.cfi_def_cfa_offset 32
 3487 18b6 4878 0001 		pea 1.w
 3488               		.cfi_def_cfa_offset 36
 3489 18ba 4E92      		jsr (%a2)
 3490               	.LVL163:
 602:test3.c       ****         fast_printf(true, true, "│"); // Right vertical border
 3491               		.loc 1 602 9 discriminator 3 view .LVU554
 3492 18bc 4879 0000 		pea .LC27
 3492      0000 
 3493               		.cfi_def_cfa_offset 40
 3494 18c2 4878 0001 		pea 1.w
 3495               		.cfi_def_cfa_offset 44
 3496 18c6 4878 0001 		pea 1.w
 3497               		.cfi_def_cfa_offset 48
 3498 18ca 4E92      		jsr (%a2)
 3499               	.LVL164:
 597:test3.c       ****     {
 3500               		.loc 1 597 42 discriminator 3 view .LVU555
 3501 18cc 2039 0000 		move.l i,%d0
 3501      0000 
 3502 18d2 5280      		addq.l #1,%d0
 3503 18d4 23C0 0000 		move.l %d0,i
 3503      0000 
 597:test3.c       ****     {
 3504               		.loc 1 597 19 discriminator 3 view .LVU556
 597:test3.c       ****     {
 3505               		.loc 1 597 36 is_stmt 0 discriminator 3 view .LVU557
 3506 18da 2079 0000 		move.l screen_height,%a0
 3506      0000 
 3507 18e0 2208      		move.l %a0,%d1
 3508 18e2 5981      		subq.l #4,%d1
 597:test3.c       ****     {
 3509               		.loc 1 597 19 discriminator 3 view .LVU558
 3510 18e4 4FEF 0020 		lea (32,%sp),%sp
 3511               		.cfi_def_cfa_offset 16
 3512 18e8 B081      		cmp.l %d1,%d0
 3513 18ea 638A      		jls .L103
 3514               	.L104:


 603:test3.c       ****     }
 604:test3.c       **** 
 605:test3.c       ****     // Draw the divider above the message input box
 606:test3.c       ****     fast_printf(true, true, CURSORMOVE, screen_height - 3, 1);
 3515               		.loc 1 606 5 is_stmt 1 view .LVU559
 3516 18ec 4878 0001 		pea 1.w
 3517               		.cfi_def_cfa_offset 20
 3518 18f0 4868 FFFD 		pea -3(%a0)
 3519               		.cfi_def_cfa_offset 24
 3520 18f4 4879 0000 		pea .LC10
 3520      0000 
 3521               		.cfi_def_cfa_offset 28
 3522 18fa 4878 0001 		pea 1.w
 3523               		.cfi_def_cfa_offset 32
 3524 18fe 4878 0001 		pea 1.w
 3525               		.cfi_def_cfa_offset 36
 3526 1902 4E92      		jsr (%a2)
 3527               	.LVL165:
 607:test3.c       ****     fast_printf(true, true, "├"); // Left corner of the divider
 3528               		.loc 1 607 5 view .LVU560
 3529 1904 4879 0000 		pea .LC28
 3529      0000 
 3530               		.cfi_def_cfa_offset 40
 3531 190a 4878 0001 		pea 1.w
 3532               		.cfi_def_cfa_offset 44
 3533 190e 4878 0001 		pea 1.w
 3534               		.cfi_def_cfa_offset 48
 3535 1912 4E92      		jsr (%a2)
 3536               	.LVL166:
 608:test3.c       ****     for (i = 1; i <= screen_width - 2; i++)
 3537               		.loc 1 608 5 view .LVU561
 3538               		.loc 1 608 12 is_stmt 0 view .LVU562
 3539 1914 7001      		moveq #1,%d0
 3540 1916 23C0 0000 		move.l %d0,i
 3540      0000 
 3541               		.loc 1 608 19 is_stmt 1 view .LVU563
 3542 191c 4FEF 0020 		lea (32,%sp),%sp
 3543               		.cfi_def_cfa_offset 16
 3544 1920 7402      		moveq #2,%d2
 3545 1922 B4B9 0000 		cmp.l screen_width.l,%d2
 3545      0000 
 3546 1928 6740      		jeq .L111
 3547 192a 7001      		moveq #1,%d0
 3548 192c 47F9 0000 		lea term_input_col,%a3
 3548      0000 
 3549               	.L106:
 609:test3.c       ****     {
 610:test3.c       ****         if (i == term_input_col[0] - 2)
 3550               		.loc 1 610 9 view .LVU564
 3551               		.loc 1 610 36 is_stmt 0 view .LVU565
 3552 1932 2213      		move.l (%a3),%d1
 3553 1934 5581      		subq.l #2,%d1
 3554               		.loc 1 610 12 view .LVU566
 3555 1936 B081      		cmp.l %d1,%d0
 3556 1938 6700 01A0 		jeq .L126
 611:test3.c       ****             fast_printf(true, true, "┬"); // Intersection for input column
 612:test3.c       ****         else


 613:test3.c       ****             fast_printf(true, true, "─"); // Horizontal divider
 3557               		.loc 1 613 13 is_stmt 1 view .LVU567
 3558 193c 4879 0000 		pea .LC26
 3558      0000 
 3559               		.cfi_def_cfa_offset 20
 3560 1942 4878 0001 		pea 1.w
 3561               		.cfi_def_cfa_offset 24
 3562 1946 4878 0001 		pea 1.w
 3563               		.cfi_def_cfa_offset 28
 3564 194a 4E92      		jsr (%a2)
 3565               	.LVL167:
 3566 194c 4FEF 000C 		lea (12,%sp),%sp
 3567               		.cfi_def_cfa_offset 16
 608:test3.c       ****     {
 3568               		.loc 1 608 41 view .LVU568
 3569 1950 2039 0000 		move.l i,%d0
 3569      0000 
 3570 1956 5280      		addq.l #1,%d0
 3571 1958 23C0 0000 		move.l %d0,i
 3571      0000 
 608:test3.c       ****     {
 3572               		.loc 1 608 19 view .LVU569
 608:test3.c       ****     {
 3573               		.loc 1 608 35 is_stmt 0 view .LVU570
 3574 195e 2239 0000 		move.l screen_width,%d1
 3574      0000 
 3575 1964 5581      		subq.l #2,%d1
 608:test3.c       ****     {
 3576               		.loc 1 608 19 view .LVU571
 3577 1966 B081      		cmp.l %d1,%d0
 3578 1968 63C8      		jls .L106
 3579               	.L111:
 614:test3.c       ****     }
 615:test3.c       ****     fast_printf(true, true, "┤"); // Right corner of the divider
 3580               		.loc 1 615 5 is_stmt 1 view .LVU572
 3581 196a 4879 0000 		pea .LC29
 3581      0000 
 3582               		.cfi_def_cfa_offset 20
 3583 1970 4878 0001 		pea 1.w
 3584               		.cfi_def_cfa_offset 24
 3585 1974 4878 0001 		pea 1.w
 3586               		.cfi_def_cfa_offset 28
 3587 1978 4E92      		jsr (%a2)
 3588               	.LVL168:
 616:test3.c       **** 
 617:test3.c       ****     // Draw the input box borders
 618:test3.c       ****     fast_printf(true, true, CURSORMOVE, screen_height - 2, 1);
 3589               		.loc 1 618 5 view .LVU573
 3590 197a 4878 0001 		pea 1.w
 3591               		.cfi_def_cfa_offset 32
 3592 197e 2039 0000 		move.l screen_height,%d0
 3592      0000 
 3593 1984 5580      		subq.l #2,%d0
 3594 1986 2F00      		move.l %d0,-(%sp)
 3595               		.cfi_def_cfa_offset 36
 3596 1988 4879 0000 		pea .LC10
 3596      0000 


 3597               		.cfi_def_cfa_offset 40
 3598 198e 4878 0001 		pea 1.w
 3599               		.cfi_def_cfa_offset 44
 3600 1992 4878 0001 		pea 1.w
 3601               		.cfi_def_cfa_offset 48
 3602 1996 4E92      		jsr (%a2)
 3603               	.LVL169:
 619:test3.c       ****     fast_printf(true, true, "│"); // Left border of the input box
 3604               		.loc 1 619 5 view .LVU574
 3605 1998 4FEF 001C 		lea (28,%sp),%sp
 3606               		.cfi_def_cfa_offset 20
 3607 199c 2EBC 0000 		move.l #.LC27,(%sp)
 3607      0000 
 3608 19a2 4878 0001 		pea 1.w
 3609               		.cfi_def_cfa_offset 24
 3610 19a6 4878 0001 		pea 1.w
 3611               		.cfi_def_cfa_offset 28
 3612 19aa 4E92      		jsr (%a2)
 3613               	.LVL170:
 620:test3.c       ****     fast_printf(true, true, CURSORMOVE, screen_height - 2, screen_width);
 3614               		.loc 1 620 5 view .LVU575
 3615 19ac 2F39 0000 		move.l screen_width,-(%sp)
 3615      0000 
 3616               		.cfi_def_cfa_offset 32
 3617 19b2 2439 0000 		move.l screen_height,%d2
 3617      0000 
 3618 19b8 5582      		subq.l #2,%d2
 3619 19ba 2F02      		move.l %d2,-(%sp)
 3620               		.cfi_def_cfa_offset 36
 3621 19bc 4879 0000 		pea .LC10
 3621      0000 
 3622               		.cfi_def_cfa_offset 40
 3623 19c2 4878 0001 		pea 1.w
 3624               		.cfi_def_cfa_offset 44
 3625 19c6 4878 0001 		pea 1.w
 3626               		.cfi_def_cfa_offset 48
 3627 19ca 4E92      		jsr (%a2)
 3628               	.LVL171:
 621:test3.c       ****     fast_printf(true, true, "│"); // Right border of the input box
 3629               		.loc 1 621 5 view .LVU576
 3630 19cc 4FEF 001C 		lea (28,%sp),%sp
 3631               		.cfi_def_cfa_offset 20
 3632 19d0 2EBC 0000 		move.l #.LC27,(%sp)
 3632      0000 
 3633 19d6 4878 0001 		pea 1.w
 3634               		.cfi_def_cfa_offset 24
 3635 19da 4878 0001 		pea 1.w
 3636               		.cfi_def_cfa_offset 28
 3637 19de 4E92      		jsr (%a2)
 3638               	.LVL172:
 622:test3.c       **** 
 623:test3.c       ****     // Draw the bottom border of the UI
 624:test3.c       ****     fast_printf(true, true, CURSORMOVE, screen_height - 1, 1);
 3639               		.loc 1 624 5 view .LVU577
 3640 19e0 4878 0001 		pea 1.w
 3641               		.cfi_def_cfa_offset 32
 3642 19e4 2039 0000 		move.l screen_height,%d0


 3642      0000 
 3643 19ea 5380      		subq.l #1,%d0
 3644 19ec 2F00      		move.l %d0,-(%sp)
 3645               		.cfi_def_cfa_offset 36
 3646 19ee 4879 0000 		pea .LC10
 3646      0000 
 3647               		.cfi_def_cfa_offset 40
 3648 19f4 4878 0001 		pea 1.w
 3649               		.cfi_def_cfa_offset 44
 3650 19f8 4878 0001 		pea 1.w
 3651               		.cfi_def_cfa_offset 48
 3652 19fc 4E92      		jsr (%a2)
 3653               	.LVL173:
 625:test3.c       ****     fast_printf(true, true, "└"); // Bottom left corner
 3654               		.loc 1 625 5 view .LVU578
 3655 19fe 4FEF 001C 		lea (28,%sp),%sp
 3656               		.cfi_def_cfa_offset 20
 3657 1a02 2EBC 0000 		move.l #.LC30,(%sp)
 3657      0000 
 3658 1a08 4878 0001 		pea 1.w
 3659               		.cfi_def_cfa_offset 24
 3660 1a0c 4878 0001 		pea 1.w
 3661               		.cfi_def_cfa_offset 28
 3662 1a10 4E92      		jsr (%a2)
 3663               	.LVL174:
 626:test3.c       ****     for (i = 1; i <= screen_width - 2; i++)
 3664               		.loc 1 626 5 view .LVU579
 3665               		.loc 1 626 12 is_stmt 0 view .LVU580
 3666 1a12 7401      		moveq #1,%d2
 3667 1a14 23C2 0000 		move.l %d2,i
 3667      0000 
 3668               		.loc 1 626 19 is_stmt 1 view .LVU581
 3669 1a1a 4FEF 000C 		lea (12,%sp),%sp
 3670               		.cfi_def_cfa_offset 16
 3671 1a1e 7002      		moveq #2,%d0
 3672 1a20 B0B9 0000 		cmp.l screen_width.l,%d0
 3672      0000 
 3673 1a26 6740      		jeq .L108
 3674 1a28 7001      		moveq #1,%d0
 3675 1a2a 47F9 0000 		lea term_input_col,%a3
 3675      0000 
 3676               	.L107:
 627:test3.c       ****     {
 628:test3.c       ****         if (i == term_input_col[0] - 2)
 3677               		.loc 1 628 9 view .LVU582
 3678               		.loc 1 628 36 is_stmt 0 view .LVU583
 3679 1a30 2213      		move.l (%a3),%d1
 3680 1a32 5581      		subq.l #2,%d1
 3681               		.loc 1 628 12 view .LVU584
 3682 1a34 B081      		cmp.l %d1,%d0
 3683 1a36 6700 00D6 		jeq .L127
 629:test3.c       ****             fast_printf(true, true, "┴"); // Intersection for input column
 630:test3.c       ****         else
 631:test3.c       ****             fast_printf(true, true, "─"); // Bottom horizontal border
 3684               		.loc 1 631 13 is_stmt 1 view .LVU585
 3685 1a3a 4879 0000 		pea .LC26
 3685      0000 


 3686               		.cfi_def_cfa_offset 20
 3687 1a40 4878 0001 		pea 1.w
 3688               		.cfi_def_cfa_offset 24
 3689 1a44 4878 0001 		pea 1.w
 3690               		.cfi_def_cfa_offset 28
 3691 1a48 4E92      		jsr (%a2)
 3692               	.LVL175:
 3693 1a4a 4FEF 000C 		lea (12,%sp),%sp
 3694               		.cfi_def_cfa_offset 16
 626:test3.c       ****     {
 3695               		.loc 1 626 41 view .LVU586
 3696 1a4e 2039 0000 		move.l i,%d0
 3696      0000 
 3697 1a54 5280      		addq.l #1,%d0
 3698 1a56 23C0 0000 		move.l %d0,i
 3698      0000 
 626:test3.c       ****     {
 3699               		.loc 1 626 19 view .LVU587
 626:test3.c       ****     {
 3700               		.loc 1 626 35 is_stmt 0 view .LVU588
 3701 1a5c 2239 0000 		move.l screen_width,%d1
 3701      0000 
 3702 1a62 5581      		subq.l #2,%d1
 626:test3.c       ****     {
 3703               		.loc 1 626 19 view .LVU589
 3704 1a64 B081      		cmp.l %d1,%d0
 3705 1a66 63C8      		jls .L107
 3706               	.L108:
 632:test3.c       ****     }
 633:test3.c       ****     fast_printf(true, true, "┘"); // Bottom right corner
 3707               		.loc 1 633 5 is_stmt 1 view .LVU590
 3708 1a68 4879 0000 		pea .LC32
 3708      0000 
 3709               		.cfi_def_cfa_offset 20
 3710 1a6e 4878 0001 		pea 1.w
 3711               		.cfi_def_cfa_offset 24
 3712 1a72 4878 0001 		pea 1.w
 3713               		.cfi_def_cfa_offset 28
 3714 1a76 4E92      		jsr (%a2)
 3715               	.LVL176:
 634:test3.c       **** 
 635:test3.c       ****     // Position and display the message input prompt
 636:test3.c       ****     fast_printf(true, true, CURSORMOVE, screen_height - 2, 2);
 3716               		.loc 1 636 5 view .LVU591
 3717 1a78 4878 0002 		pea 2.w
 3718               		.cfi_def_cfa_offset 32
 3719 1a7c 2439 0000 		move.l screen_height,%d2
 3719      0000 
 3720 1a82 5582      		subq.l #2,%d2
 3721 1a84 2F02      		move.l %d2,-(%sp)
 3722               		.cfi_def_cfa_offset 36
 3723 1a86 4879 0000 		pea .LC10
 3723      0000 
 3724               		.cfi_def_cfa_offset 40
 3725 1a8c 4878 0001 		pea 1.w
 3726               		.cfi_def_cfa_offset 44
 3727 1a90 4878 0001 		pea 1.w


 3728               		.cfi_def_cfa_offset 48
 3729 1a94 4E92      		jsr (%a2)
 3730               	.LVL177:
 637:test3.c       ****     fast_printf(true, true, "\x1b[1m%s\x1b[0m", msg_input_prompt);
 3731               		.loc 1 637 5 view .LVU592
 3732 1a96 4FEF 001C 		lea (28,%sp),%sp
 3733               		.cfi_def_cfa_offset 20
 3734 1a9a 2EBC 0000 		move.l #msg_input_prompt,(%sp)
 3734      0000 
 3735 1aa0 4879 0000 		pea .LC33
 3735      0000 
 3736               		.cfi_def_cfa_offset 24
 3737 1aa6 4878 0001 		pea 1.w
 3738               		.cfi_def_cfa_offset 28
 3739 1aaa 4878 0001 		pea 1.w
 3740               		.cfi_def_cfa_offset 32
 3741 1aae 4E92      		jsr (%a2)
 3742               	.LVL178:
 638:test3.c       ****     fast_printf(true, true, "│"); // Vertical middle border of the input box
 3743               		.loc 1 638 5 view .LVU593
 3744 1ab0 4879 0000 		pea .LC27
 3744      0000 
 3745               		.cfi_def_cfa_offset 36
 3746 1ab6 4878 0001 		pea 1.w
 3747               		.cfi_def_cfa_offset 40
 3748 1aba 4878 0001 		pea 1.w
 3749               		.cfi_def_cfa_offset 44
 3750 1abe 4E92      		jsr (%a2)
 3751               	.LVL179:
 639:test3.c       **** 
 640:test3.c       ****     // Make the cursor visible again
 641:test3.c       ****     fast_printf(true, true, CURSORVISIBLE);
 3752               		.loc 1 641 5 view .LVU594
 3753 1ac0 4879 0000 		pea .LC5
 3753      0000 
 3754               		.cfi_def_cfa_offset 48
 3755 1ac6 4878 0001 		pea 1.w
 3756               		.cfi_def_cfa_offset 52
 3757 1aca 4878 0001 		pea 1.w
 3758               		.cfi_def_cfa_offset 56
 3759 1ace 4E92      		jsr (%a2)
 3760               	.LVL180:
 642:test3.c       **** }
 3761               		.loc 1 642 1 is_stmt 0 view .LVU595
 3762 1ad0 4FEF 0028 		lea (40,%sp),%sp
 3763               		.cfi_def_cfa_offset 16
 3764 1ad4 4CDF 0C04 		movem.l (%sp)+,#3076
 3765 1ad8 4E75      		rts
 3766               	.L126:
 611:test3.c       ****         else
 3767               		.loc 1 611 13 is_stmt 1 view .LVU596
 3768 1ada 4879 0000 		pea .LC31
 3768      0000 
 3769               		.cfi_def_cfa_offset 20
 3770 1ae0 4878 0001 		pea 1.w
 3771               		.cfi_def_cfa_offset 24
 3772 1ae4 4878 0001 		pea 1.w


 3773               		.cfi_def_cfa_offset 28
 3774 1ae8 4E92      		jsr (%a2)
 3775               	.LVL181:
 3776 1aea 4FEF 000C 		lea (12,%sp),%sp
 3777               		.cfi_def_cfa_offset 16
 608:test3.c       ****     {
 3778               		.loc 1 608 41 view .LVU597
 3779 1aee 2039 0000 		move.l i,%d0
 3779      0000 
 3780 1af4 5280      		addq.l #1,%d0
 3781 1af6 23C0 0000 		move.l %d0,i
 3781      0000 
 608:test3.c       ****     {
 3782               		.loc 1 608 19 view .LVU598
 608:test3.c       ****     {
 3783               		.loc 1 608 35 is_stmt 0 view .LVU599
 3784 1afc 2239 0000 		move.l screen_width,%d1
 3784      0000 
 3785 1b02 5581      		subq.l #2,%d1
 608:test3.c       ****     {
 3786               		.loc 1 608 19 view .LVU600
 3787 1b04 B081      		cmp.l %d1,%d0
 3788 1b06 6300 FE2A 		jls .L106
 3789 1b0a 6000 FE5E 		jra .L111
 3790               	.L127:
 629:test3.c       ****         else
 3791               		.loc 1 629 13 is_stmt 1 view .LVU601
 3792 1b0e 4879 0000 		pea .LC34
 3792      0000 
 3793               		.cfi_def_cfa_offset 20
 3794 1b14 4878 0001 		pea 1.w
 3795               		.cfi_def_cfa_offset 24
 3796 1b18 4878 0001 		pea 1.w
 3797               		.cfi_def_cfa_offset 28
 3798 1b1c 4E92      		jsr (%a2)
 3799               	.LVL182:
 3800 1b1e 4FEF 000C 		lea (12,%sp),%sp
 3801               		.cfi_def_cfa_offset 16
 626:test3.c       ****     {
 3802               		.loc 1 626 41 view .LVU602
 3803 1b22 2039 0000 		move.l i,%d0
 3803      0000 
 3804 1b28 5280      		addq.l #1,%d0
 3805 1b2a 23C0 0000 		move.l %d0,i
 3805      0000 
 626:test3.c       ****     {
 3806               		.loc 1 626 19 view .LVU603
 626:test3.c       ****     {
 3807               		.loc 1 626 35 is_stmt 0 view .LVU604
 3808 1b30 2239 0000 		move.l screen_width,%d1
 3808      0000 
 3809 1b36 5581      		subq.l #2,%d1
 626:test3.c       ****     {
 3810               		.loc 1 626 19 view .LVU605
 3811 1b38 B081      		cmp.l %d1,%d0
 3812 1b3a 6300 FEF4 		jls .L107
 3813 1b3e 6000 FF28 		jra .L108


 3814               		.cfi_endproc
 3815               	.LFE7:
 3816               		.size	init_ui, .-init_ui
 3817               		.section	.text.startup,"ax",@progbits
 3818               		.align	2
 3819               		.globl	main
 3820               		.type	main, @function
 3821               	main:
 3822               	.LFB8:
 643:test3.c       **** 
 644:test3.c       **** void main()
 645:test3.c       **** {
 3823               		.loc 1 645 1 is_stmt 1 view -0
 3824               		.cfi_startproc
 3825 0000 2F0A      		move.l %a2,-(%sp)
 3826               		.cfi_def_cfa_offset 8
 3827               		.cfi_offset 10, -8
 646:test3.c       ****     init_kernel();
 3828               		.loc 1 646 5 view .LVU607
 3829 0002 4EB9 0000 		jsr init_kernel
 3829      0000 
 3830               	.LVL183:
 647:test3.c       ****     init_io();
 3831               		.loc 1 647 5 view .LVU608
 3832 0008 4EB9 0000 		jsr init_io
 3832      0000 
 3833               	.LVL184:
 648:test3.c       ****     init_ui();
 3834               		.loc 1 648 5 view .LVU609
 3835 000e 4EB9 0000 		jsr init_ui
 3835      0000 
 3836               	.LVL185:
 649:test3.c       ****     set_task(runtime_clock);
 3837               		.loc 1 649 5 view .LVU610
 3838 0014 4879 0000 		pea runtime_clock
 3838      0000 
 3839               		.cfi_def_cfa_offset 12
 3840 001a 45F9 0000 		lea set_task,%a2
 3840      0000 
 3841 0020 4E92      		jsr (%a2)
 3842               	.LVL186:
 650:test3.c       ****     set_task(command_bar);
 3843               		.loc 1 650 5 view .LVU611
 3844 0022 4879 0000 		pea command_bar
 3844      0000 
 3845               		.cfi_def_cfa_offset 16
 3846 0028 4E92      		jsr (%a2)
 3847               	.LVL187:
 651:test3.c       ****     set_task(main_app);
 3848               		.loc 1 651 5 view .LVU612
 3849 002a 4879 0000 		pea main_app
 3849      0000 
 3850               		.cfi_def_cfa_offset 20
 3851 0030 4E92      		jsr (%a2)
 3852               	.LVL188:
 652:test3.c       ****     begin_sch();
 3853               		.loc 1 652 5 view .LVU613


 3854 0032 4FEF 000C 		lea (12,%sp),%sp
 3855               		.cfi_def_cfa_offset 8
 653:test3.c       **** }
 3856               		.loc 1 653 1 is_stmt 0 view .LVU614
 3857 0036 245F      		move.l (%sp)+,%a2
 652:test3.c       ****     begin_sch();
 3858               		.loc 1 652 5 view .LVU615
 3859 0038 4EF9 0000 		jra begin_sch
 3859      0000 
 3860               	.LVL189:
 3861               		.cfi_endproc
 3862               	.LFE8:
 3863               		.size	main, .-main
 3864               		.globl	help_text
 3865               		.section	.rodata
 3866               		.type	help_text, @object
 3867               		.size	help_text, 147
 3868               	help_text:
 3869 0000 0A1B 5B31 		.string	"\n\033[1;4mManual page for the chat application\033[0m\n\nThis page should be populated w
 3869      3B34 6D4D 
 3869      616E 7561 
 3869      6C20 7061 
 3869      6765 2066 
 3870               		.globl	tip_list
 3871               		.type	tip_list, @object
 3872               		.size	tip_list, 400
 3873               	tip_list:
 3874 0093 5072 6573 		.string	"Press ESC to enter command mode"
 3874      7320 4553 
 3874      4320 746F 
 3874      2065 6E74 
 3874      6572 2063 
 3875 00b3 0000 0000 		.zero	68
 3875      0000 0000 
 3875      0000 0000 
 3875      0000 0000 
 3875      0000 0000 
 3876 00f7 4D61 7869 		.string	"Maximum length of each message is 100 characters"
 3876      6D75 6D20 
 3876      6C65 6E67 
 3876      7468 206F 
 3876      6620 6561 
 3877 0128 0000 0000 		.zero	51
 3877      0000 0000 
 3877      0000 0000 
 3877      0000 0000 
 3877      0000 0000 
 3878 015b 4675 6E63 		.string	"Functionality of the arrow keys is suppressed"
 3878      7469 6F6E 
 3878      616C 6974 
 3878      7920 6F66 
 3878      2074 6865 
 3879 0189 0000 0000 		.zero	54
 3879      0000 0000 
 3879      0000 0000 
 3879      0000 0000 
 3879      0000 0000 


 3880 01bf 4F6E 6C79 		.string	"Only help command is available for now"
 3880      2068 656C 
 3880      7020 636F 
 3880      6D6D 616E 
 3880      6420 6973 
 3881 01e6 0000 0000 		.zero	61
 3881      0000 0000 
 3881      0000 0000 
 3881      0000 0000 
 3881      0000 0000 
 3882               		.globl	command_prompt
 3883               		.type	command_prompt, @object
 3884               		.size	command_prompt, 10
 3885               	command_prompt:
 3886 0223 436F 6D6D 		.string	"Command: "
 3886      616E 643A 
 3886      2000 
 3887               		.globl	msg_input_prompt
 3888               		.type	msg_input_prompt, @object
 3889               		.size	msg_input_prompt, 13
 3890               	msg_input_prompt:
 3891 022d 596F 7572 		.string	"Your message"
 3891      206D 6573 
 3891      7361 6765 
 3891      00
 3892               		.globl	term_line10
 3893               		.type	term_line10, @object
 3894               		.size	term_line10, 7
 3895               	term_line10:
 3896 023a 1B5B 3130 		.string	"\033[10;H"
 3896      3B48 00
 3897               		.globl	term_backspace
 3898               		.type	term_backspace, @object
 3899               		.size	term_backspace, 4
 3900               	term_backspace:
 3901 0241 0820 0800 		.string	"\b \b"
 3902               		.globl	chat_row
 3903               		.data
 3904               		.align	2
 3905               		.type	chat_row, @object
 3906               		.size	chat_row, 4
 3907               	chat_row:
 3908 0000 0000 0001 		.long	1
 3909               		.globl	screen_width
 3910               		.align	2
 3911               		.type	screen_width, @object
 3912               		.size	screen_width, 4
 3913               	screen_width:
 3914 0004 0000 00CB 		.long	203
 3915               		.globl	screen_height
 3916               		.align	2
 3917               		.type	screen_height, @object
 3918               		.size	screen_height, 4
 3919               	screen_height:
 3920 0008 0000 0023 		.long	35
 3921               		.globl	tip_num
 3922               		.section	.bss


 3923               		.align	2
 3924               		.type	tip_num, @object
 3925               		.size	tip_num, 8
 3926               	tip_num:
 3927 0000 0000 0000 		.zero	8
 3927      0000 0000 
 3928               		.globl	printf_buf
 3929               		.type	printf_buf, @object
 3930               		.size	printf_buf, 100
 3931               	printf_buf:
 3932 0008 0000 0000 		.zero	100
 3932      0000 0000 
 3932      0000 0000 
 3932      0000 0000 
 3932      0000 0000 
 3933               		.globl	cmd_buf_len
 3934               		.align	2
 3935               		.type	cmd_buf_len, @object
 3936               		.size	cmd_buf_len, 8
 3937               	cmd_buf_len:
 3938 006c 0000 0000 		.zero	8
 3938      0000 0000 
 3939               		.globl	cmd_buf
 3940               		.type	cmd_buf, @object
 3941               		.size	cmd_buf, 200
 3942               	cmd_buf:
 3943 0074 0000 0000 		.zero	200
 3943      0000 0000 
 3943      0000 0000 
 3943      0000 0000 
 3943      0000 0000 
 3944               		.globl	msg_buf_len
 3945               		.align	2
 3946               		.type	msg_buf_len, @object
 3947               		.size	msg_buf_len, 8
 3948               	msg_buf_len:
 3949 013c 0000 0000 		.zero	8
 3949      0000 0000 
 3950               		.globl	msg_buf
 3951               		.type	msg_buf, @object
 3952               		.size	msg_buf, 200
 3953               	msg_buf:
 3954 0144 0000 0000 		.zero	200
 3954      0000 0000 
 3954      0000 0000 
 3954      0000 0000 
 3954      0000 0000 
 3955               		.globl	term_input_col
 3956               		.align	2
 3957               		.type	term_input_col, @object
 3958               		.size	term_input_col, 8
 3959               	term_input_col:
 3960 020c 0000 0000 		.zero	8
 3960      0000 0000 
 3961               		.globl	client_nickname_set
 3962               		.type	client_nickname_set, @object
 3963               		.size	client_nickname_set, 2


 3964               	client_nickname_set:
 3965 0214 0000      		.zero	2
 3966               		.globl	client_nickname
 3967               		.data
 3968               		.type	client_nickname, @object
 3969               		.size	client_nickname, 20
 3970               	client_nickname:
 3971 000c 5553 4552 		.string	"USER1"
 3971      3100 
 3972 0012 0000 0000 		.zero	4
 3973 0016 5553 4552 		.string	"USER2"
 3973      3200 
 3974 001c 0000 0000 		.zero	4
 3975               		.globl	client_nickname_color
 3976               		.type	client_nickname_color, @object
 3977               		.size	client_nickname_color, 2
 3978               	client_nickname_color:
 3979 0020 0B0E      		.ascii	"\013\016"
 3980               		.globl	last_keybuf_len
 3981               		.section	.bss
 3982               		.align	2
 3983               		.type	last_keybuf_len, @object
 3984               		.size	last_keybuf_len, 8
 3985               	last_keybuf_len:
 3986 0216 0000 0000 		.zero	8
 3986      0000 0000 
 3987               		.globl	last_keybuf
 3988               		.type	last_keybuf, @object
 3989               		.size	last_keybuf, 20
 3990               	last_keybuf:
 3991 021e 0000 0000 		.zero	20
 3991      0000 0000 
 3991      0000 0000 
 3991      0000 0000 
 3991      0000 0000 
 3992               		.globl	keypress
 3993               		.data
 3994               		.type	keypress, @object
 3995               		.size	keypress, 2
 3996               	keypress:
 3997 0022 FFFF      		.ascii	"\377\377"
 3998               		.globl	inappcom
 3999               		.type	inappcom, @object
 4000               		.size	inappcom, 2
 4001               	inappcom:
 4002 0024 01        		.byte	1
 4003 0025 01        		.byte	1
 4004               		.globl	in_alt_screen
 4005               		.section	.bss
 4006               		.type	in_alt_screen, @object
 4007               		.size	in_alt_screen, 2
 4008               	in_alt_screen:
 4009 0232 0000      		.zero	2
 4010               		.globl	j
 4011               		.align	2
 4012               		.type	j, @object
 4013               		.size	j, 4


 4014               	j:
 4015 0234 0000 0000 		.zero	4
 4016               		.globl	i
 4017               		.align	2
 4018               		.type	i, @object
 4019               		.size	i, 4
 4020               	i:
 4021 0238 0000 0000 		.zero	4
 4022               		.text
 4023               	.Letext0:
 4024               		.file 2 "/usr/local/lib/gcc/m68k-elf/11.4.0/include/stdarg.h"
 4025               		.file 3 "/usr/local/lib/gcc/m68k-elf/11.4.0/include/stddef.h"
 4026               		.file 4 "mtk_c.h"
 4027               		.file 5 "/usr/local/m68k-elf/include/string.h"
 4028               		.file 6 "/usr/local/m68k-elf/include/stdio.h"
 4029               		.file 7 "/usr/local/m68k-elf/include/stdlib.h"
 4030               		.file 8 "<built-in>"
 4031               		.section	.debug_info,"",@progbits
 4032               	.Ldebug_info0:
 4033 0000 0000 0C80 		.long	0xc80
 4034 0004 0005      		.word	0x5
 4035 0006 01        		.byte	0x1
 4036 0007 04        		.byte	0x4
 4037 0008 0000 0000 		.long	.Ldebug_abbrev0
 4038 000c 18        		.uleb128 0x18
 4039 000d 0000 0000 		.long	.LASF63
 4040 0011 1D        		.byte	0x1d
 4041 0012 0000 0000 		.long	.LASF64
 4042 0016 0000 0000 		.long	.LASF65
 4043 001a 0000 0000 		.long	.LLRL11
 4044 001e 0000 0000 		.long	0
 4045 0022 0000 0000 		.long	.Ldebug_line0
 4046 0026 0D        		.uleb128 0xd
 4047 0027 0000 0000 		.long	.LASF0
 4048 002b 02        		.byte	0x2
 4049 002c 28        		.byte	0x28
 4050 002d 1B        		.byte	0x1b
 4051 002e 0000 0032 		.long	0x32
 4052 0032 19        		.uleb128 0x19
 4053 0033 04        		.byte	0x4
 4054 0034 0000 0000 		.long	.LASF66
 4055 0038 0D        		.uleb128 0xd
 4056 0039 0000 0000 		.long	.LASF1
 4057 003d 02        		.byte	0x2
 4058 003e 63        		.byte	0x63
 4059 003f 18        		.byte	0x18
 4060 0040 0000 0026 		.long	0x26
 4061 0044 06        		.uleb128 0x6
 4062 0045 01        		.byte	0x1
 4063 0046 06        		.byte	0x6
 4064 0047 0000 0000 		.long	.LASF2
 4065 004b 06        		.uleb128 0x6
 4066 004c 01        		.byte	0x1
 4067 004d 08        		.byte	0x8
 4068 004e 0000 0000 		.long	.LASF3
 4069 0052 06        		.uleb128 0x6
 4070 0053 02        		.byte	0x2


 4071 0054 05        		.byte	0x5
 4072 0055 0000 0000 		.long	.LASF4
 4073 0059 06        		.uleb128 0x6
 4074 005a 02        		.byte	0x2
 4075 005b 07        		.byte	0x7
 4076 005c 0000 0000 		.long	.LASF5
 4077 0060 06        		.uleb128 0x6
 4078 0061 04        		.byte	0x4
 4079 0062 05        		.byte	0x5
 4080 0063 0000 0000 		.long	.LASF6
 4081 0067 06        		.uleb128 0x6
 4082 0068 04        		.byte	0x4
 4083 0069 07        		.byte	0x7
 4084 006a 0000 0000 		.long	.LASF7
 4085 006e 06        		.uleb128 0x6
 4086 006f 08        		.byte	0x8
 4087 0070 05        		.byte	0x5
 4088 0071 0000 0000 		.long	.LASF8
 4089 0075 06        		.uleb128 0x6
 4090 0076 08        		.byte	0x8
 4091 0077 07        		.byte	0x7
 4092 0078 0000 0000 		.long	.LASF9
 4093 007c 0D        		.uleb128 0xd
 4094 007d 0000 0000 		.long	.LASF10
 4095 0081 03        		.byte	0x3
 4096 0082 D1        		.byte	0xd1
 4097 0083 17        		.byte	0x17
 4098 0084 0000 0067 		.long	0x67
 4099 0088 06        		.uleb128 0x6
 4100 0089 0C        		.byte	0xc
 4101 008a 04        		.byte	0x4
 4102 008b 0000 0000 		.long	.LASF11
 4103 008f 06        		.uleb128 0x6
 4104 0090 04        		.byte	0x4
 4105 0091 07        		.byte	0x7
 4106 0092 0000 0000 		.long	.LASF12
 4107 0096 1A        		.uleb128 0x1a
 4108 0097 04        		.byte	0x4
 4109 0098 05        		.byte	0x5
 4110 0099 696E 7400 		.string	"int"
 4111 009d 1B        		.uleb128 0x1b
 4112 009e 04        		.byte	0x4
 4113 009f 12        		.uleb128 0x12
 4114 00a0 0000 00A4 		.long	0xa4
 4115 00a4 06        		.uleb128 0x6
 4116 00a5 01        		.byte	0x1
 4117 00a6 06        		.byte	0x6
 4118 00a7 0000 0000 		.long	.LASF13
 4119 00ab 08        		.uleb128 0x8
 4120 00ac 0000 00A4 		.long	0xa4
 4121 00b0 12        		.uleb128 0x12
 4122 00b1 0000 00AB 		.long	0xab
 4123 00b5 1C        		.uleb128 0x1c
 4124 00b6 0000 0000 		.long	.LASF14
 4125 00ba 04        		.byte	0x4
 4126 00bb 20        		.byte	0x20
 4127 00bc 15        		.byte	0x15


 4128 00bd 0000 008F 		.long	0x8f
 4129 00c1 13        		.uleb128 0x13
 4130 00c2 6900      		.string	"i"
 4131 00c4 8C        		.byte	0x8c
 4132 00c5 05        		.byte	0x5
 4133 00c6 0000 0096 		.long	0x96
 4134 00ca 05        		.uleb128 0x5
 4135 00cb 03        		.byte	0x3
 4136 00cc 0000 0000 		.long	i
 4137 00d0 13        		.uleb128 0x13
 4138 00d1 6A00      		.string	"j"
 4139 00d3 8C        		.byte	0x8c
 4140 00d4 08        		.byte	0x8
 4141 00d5 0000 0096 		.long	0x96
 4142 00d9 05        		.uleb128 0x5
 4143 00da 03        		.byte	0x3
 4144 00db 0000 0000 		.long	j
 4145 00df 04        		.uleb128 0x4
 4146 00e0 0000 00EF 		.long	0xef
 4147 00e4 0000 00EF 		.long	0xef
 4148 00e8 03        		.uleb128 0x3
 4149 00e9 0000 0067 		.long	0x67
 4150 00ed 01        		.byte	0x1
 4151 00ee 00        		.byte	0
 4152 00ef 06        		.uleb128 0x6
 4153 00f0 01        		.byte	0x1
 4154 00f1 02        		.byte	0x2
 4155 00f2 0000 0000 		.long	.LASF15
 4156 00f6 08        		.uleb128 0x8
 4157 00f7 0000 00EF 		.long	0xef
 4158 00fb 02        		.uleb128 0x2
 4159 00fc 0000 0000 		.long	.LASF16
 4160 0100 8F        		.byte	0x8f
 4161 0101 06        		.byte	0x6
 4162 0102 0000 00DF 		.long	0xdf
 4163 0106 05        		.uleb128 0x5
 4164 0107 03        		.byte	0x3
 4165 0108 0000 0000 		.long	in_alt_screen
 4166 010c 02        		.uleb128 0x2
 4167 010d 0000 0000 		.long	.LASF17
 4168 0111 90        		.byte	0x90
 4169 0112 06        		.byte	0x6
 4170 0113 0000 00DF 		.long	0xdf
 4171 0117 05        		.uleb128 0x5
 4172 0118 03        		.byte	0x3
 4173 0119 0000 0000 		.long	inappcom
 4174 011d 04        		.uleb128 0x4
 4175 011e 0000 00A4 		.long	0xa4
 4176 0122 0000 012D 		.long	0x12d
 4177 0126 03        		.uleb128 0x3
 4178 0127 0000 0067 		.long	0x67
 4179 012b 01        		.byte	0x1
 4180 012c 00        		.byte	0
 4181 012d 02        		.uleb128 0x2
 4182 012e 0000 0000 		.long	.LASF18
 4183 0132 93        		.byte	0x93
 4184 0133 06        		.byte	0x6


 4185 0134 0000 011D 		.long	0x11d
 4186 0138 05        		.uleb128 0x5
 4187 0139 03        		.byte	0x3
 4188 013a 0000 0000 		.long	keypress
 4189 013e 04        		.uleb128 0x4
 4190 013f 0000 00A4 		.long	0xa4
 4191 0143 0000 0154 		.long	0x154
 4192 0147 03        		.uleb128 0x3
 4193 0148 0000 0067 		.long	0x67
 4194 014c 01        		.byte	0x1
 4195 014d 03        		.uleb128 0x3
 4196 014e 0000 0067 		.long	0x67
 4197 0152 09        		.byte	0x9
 4198 0153 00        		.byte	0
 4199 0154 02        		.uleb128 0x2
 4200 0155 0000 0000 		.long	.LASF19
 4201 0159 94        		.byte	0x94
 4202 015a 06        		.byte	0x6
 4203 015b 0000 013E 		.long	0x13e
 4204 015f 05        		.uleb128 0x5
 4205 0160 03        		.byte	0x3
 4206 0161 0000 0000 		.long	last_keybuf
 4207 0165 04        		.uleb128 0x4
 4208 0166 0000 0096 		.long	0x96
 4209 016a 0000 0175 		.long	0x175
 4210 016e 03        		.uleb128 0x3
 4211 016f 0000 0067 		.long	0x67
 4212 0173 01        		.byte	0x1
 4213 0174 00        		.byte	0
 4214 0175 02        		.uleb128 0x2
 4215 0176 0000 0000 		.long	.LASF20
 4216 017a 95        		.byte	0x95
 4217 017b 05        		.byte	0x5
 4218 017c 0000 0165 		.long	0x165
 4219 0180 05        		.uleb128 0x5
 4220 0181 03        		.byte	0x3
 4221 0182 0000 0000 		.long	last_keybuf_len
 4222 0186 02        		.uleb128 0x2
 4223 0187 0000 0000 		.long	.LASF21
 4224 018b 98        		.byte	0x98
 4225 018c 06        		.byte	0x6
 4226 018d 0000 011D 		.long	0x11d
 4227 0191 05        		.uleb128 0x5
 4228 0192 03        		.byte	0x3
 4229 0193 0000 0000 		.long	client_nickname_color
 4230 0197 02        		.uleb128 0x2
 4231 0198 0000 0000 		.long	.LASF22
 4232 019c 99        		.byte	0x99
 4233 019d 06        		.byte	0x6
 4234 019e 0000 013E 		.long	0x13e
 4235 01a2 05        		.uleb128 0x5
 4236 01a3 03        		.byte	0x3
 4237 01a4 0000 0000 		.long	client_nickname
 4238 01a8 02        		.uleb128 0x2
 4239 01a9 0000 0000 		.long	.LASF23
 4240 01ad 9A        		.byte	0x9a
 4241 01ae 06        		.byte	0x6


 4242 01af 0000 00DF 		.long	0xdf
 4243 01b3 05        		.uleb128 0x5
 4244 01b4 03        		.byte	0x3
 4245 01b5 0000 0000 		.long	client_nickname_set
 4246 01b9 02        		.uleb128 0x2
 4247 01ba 0000 0000 		.long	.LASF24
 4248 01be 9D        		.byte	0x9d
 4249 01bf 05        		.byte	0x5
 4250 01c0 0000 0165 		.long	0x165
 4251 01c4 05        		.uleb128 0x5
 4252 01c5 03        		.byte	0x3
 4253 01c6 0000 0000 		.long	term_input_col
 4254 01ca 04        		.uleb128 0x4
 4255 01cb 0000 00A4 		.long	0xa4
 4256 01cf 0000 01E0 		.long	0x1e0
 4257 01d3 03        		.uleb128 0x3
 4258 01d4 0000 0067 		.long	0x67
 4259 01d8 01        		.byte	0x1
 4260 01d9 03        		.uleb128 0x3
 4261 01da 0000 0067 		.long	0x67
 4262 01de 63        		.byte	0x63
 4263 01df 00        		.byte	0
 4264 01e0 02        		.uleb128 0x2
 4265 01e1 0000 0000 		.long	.LASF25
 4266 01e5 A0        		.byte	0xa0
 4267 01e6 06        		.byte	0x6
 4268 01e7 0000 01CA 		.long	0x1ca
 4269 01eb 05        		.uleb128 0x5
 4270 01ec 03        		.byte	0x3
 4271 01ed 0000 0000 		.long	msg_buf
 4272 01f1 04        		.uleb128 0x4
 4273 01f2 0000 008F 		.long	0x8f
 4274 01f6 0000 0201 		.long	0x201
 4275 01fa 03        		.uleb128 0x3
 4276 01fb 0000 0067 		.long	0x67
 4277 01ff 01        		.byte	0x1
 4278 0200 00        		.byte	0
 4279 0201 02        		.uleb128 0x2
 4280 0202 0000 0000 		.long	.LASF26
 4281 0206 A1        		.byte	0xa1
 4282 0207 0E        		.byte	0xe
 4283 0208 0000 01F1 		.long	0x1f1
 4284 020c 05        		.uleb128 0x5
 4285 020d 03        		.byte	0x3
 4286 020e 0000 0000 		.long	msg_buf_len
 4287 0212 02        		.uleb128 0x2
 4288 0213 0000 0000 		.long	.LASF27
 4289 0217 A2        		.byte	0xa2
 4290 0218 06        		.byte	0x6
 4291 0219 0000 01CA 		.long	0x1ca
 4292 021d 05        		.uleb128 0x5
 4293 021e 03        		.byte	0x3
 4294 021f 0000 0000 		.long	cmd_buf
 4295 0223 02        		.uleb128 0x2
 4296 0224 0000 0000 		.long	.LASF28
 4297 0228 A3        		.byte	0xa3
 4298 0229 0E        		.byte	0xe


 4299 022a 0000 01F1 		.long	0x1f1
 4300 022e 05        		.uleb128 0x5
 4301 022f 03        		.byte	0x3
 4302 0230 0000 0000 		.long	cmd_buf_len
 4303 0234 04        		.uleb128 0x4
 4304 0235 0000 00A4 		.long	0xa4
 4305 0239 0000 0244 		.long	0x244
 4306 023d 03        		.uleb128 0x3
 4307 023e 0000 0067 		.long	0x67
 4308 0242 63        		.byte	0x63
 4309 0243 00        		.byte	0
 4310 0244 02        		.uleb128 0x2
 4311 0245 0000 0000 		.long	.LASF29
 4312 0249 A4        		.byte	0xa4
 4313 024a 06        		.byte	0x6
 4314 024b 0000 0234 		.long	0x234
 4315 024f 05        		.uleb128 0x5
 4316 0250 03        		.byte	0x3
 4317 0251 0000 0000 		.long	printf_buf
 4318 0255 02        		.uleb128 0x2
 4319 0256 0000 0000 		.long	.LASF30
 4320 025a A7        		.byte	0xa7
 4321 025b 05        		.byte	0x5
 4322 025c 0000 0165 		.long	0x165
 4323 0260 05        		.uleb128 0x5
 4324 0261 03        		.byte	0x3
 4325 0262 0000 0000 		.long	tip_num
 4326 0266 02        		.uleb128 0x2
 4327 0267 0000 0000 		.long	.LASF31
 4328 026b AA        		.byte	0xaa
 4329 026c 0E        		.byte	0xe
 4330 026d 0000 008F 		.long	0x8f
 4331 0271 05        		.uleb128 0x5
 4332 0272 03        		.byte	0x3
 4333 0273 0000 0000 		.long	screen_height
 4334 0277 02        		.uleb128 0x2
 4335 0278 0000 0000 		.long	.LASF32
 4336 027c AB        		.byte	0xab
 4337 027d 0E        		.byte	0xe
 4338 027e 0000 008F 		.long	0x8f
 4339 0282 05        		.uleb128 0x5
 4340 0283 03        		.byte	0x3
 4341 0284 0000 0000 		.long	screen_width
 4342 0288 02        		.uleb128 0x2
 4343 0289 0000 0000 		.long	.LASF33
 4344 028d AC        		.byte	0xac
 4345 028e 0E        		.byte	0xe
 4346 028f 0000 008F 		.long	0x8f
 4347 0293 05        		.uleb128 0x5
 4348 0294 03        		.byte	0x3
 4349 0295 0000 0000 		.long	chat_row
 4350 0299 04        		.uleb128 0x4
 4351 029a 0000 00AB 		.long	0xab
 4352 029e 0000 02A9 		.long	0x2a9
 4353 02a2 03        		.uleb128 0x3
 4354 02a3 0000 0067 		.long	0x67
 4355 02a7 03        		.byte	0x3


 4356 02a8 00        		.byte	0
 4357 02a9 08        		.uleb128 0x8
 4358 02aa 0000 0299 		.long	0x299
 4359 02ae 02        		.uleb128 0x2
 4360 02af 0000 0000 		.long	.LASF34
 4361 02b3 AF        		.byte	0xaf
 4362 02b4 0C        		.byte	0xc
 4363 02b5 0000 02A9 		.long	0x2a9
 4364 02b9 05        		.uleb128 0x5
 4365 02ba 03        		.byte	0x3
 4366 02bb 0000 0000 		.long	term_backspace
 4367 02bf 04        		.uleb128 0x4
 4368 02c0 0000 00AB 		.long	0xab
 4369 02c4 0000 02CF 		.long	0x2cf
 4370 02c8 03        		.uleb128 0x3
 4371 02c9 0000 0067 		.long	0x67
 4372 02cd 06        		.byte	0x6
 4373 02ce 00        		.byte	0
 4374 02cf 08        		.uleb128 0x8
 4375 02d0 0000 02BF 		.long	0x2bf
 4376 02d4 02        		.uleb128 0x2
 4377 02d5 0000 0000 		.long	.LASF35
 4378 02d9 B0        		.byte	0xb0
 4379 02da 0C        		.byte	0xc
 4380 02db 0000 02CF 		.long	0x2cf
 4381 02df 05        		.uleb128 0x5
 4382 02e0 03        		.byte	0x3
 4383 02e1 0000 0000 		.long	term_line10
 4384 02e5 04        		.uleb128 0x4
 4385 02e6 0000 00AB 		.long	0xab
 4386 02ea 0000 02F5 		.long	0x2f5
 4387 02ee 03        		.uleb128 0x3
 4388 02ef 0000 0067 		.long	0x67
 4389 02f3 0C        		.byte	0xc
 4390 02f4 00        		.byte	0
 4391 02f5 08        		.uleb128 0x8
 4392 02f6 0000 02E5 		.long	0x2e5
 4393 02fa 02        		.uleb128 0x2
 4394 02fb 0000 0000 		.long	.LASF36
 4395 02ff B3        		.byte	0xb3
 4396 0300 0C        		.byte	0xc
 4397 0301 0000 02F5 		.long	0x2f5
 4398 0305 05        		.uleb128 0x5
 4399 0306 03        		.byte	0x3
 4400 0307 0000 0000 		.long	msg_input_prompt
 4401 030b 04        		.uleb128 0x4
 4402 030c 0000 00AB 		.long	0xab
 4403 0310 0000 031B 		.long	0x31b
 4404 0314 03        		.uleb128 0x3
 4405 0315 0000 0067 		.long	0x67
 4406 0319 09        		.byte	0x9
 4407 031a 00        		.byte	0
 4408 031b 08        		.uleb128 0x8
 4409 031c 0000 030B 		.long	0x30b
 4410 0320 02        		.uleb128 0x2
 4411 0321 0000 0000 		.long	.LASF37
 4412 0325 B4        		.byte	0xb4


 4413 0326 0C        		.byte	0xc
 4414 0327 0000 031B 		.long	0x31b
 4415 032b 05        		.uleb128 0x5
 4416 032c 03        		.byte	0x3
 4417 032d 0000 0000 		.long	command_prompt
 4418 0331 04        		.uleb128 0x4
 4419 0332 0000 00AB 		.long	0xab
 4420 0336 0000 0347 		.long	0x347
 4421 033a 03        		.uleb128 0x3
 4422 033b 0000 0067 		.long	0x67
 4423 033f 03        		.byte	0x3
 4424 0340 03        		.uleb128 0x3
 4425 0341 0000 0067 		.long	0x67
 4426 0345 63        		.byte	0x63
 4427 0346 00        		.byte	0
 4428 0347 08        		.uleb128 0x8
 4429 0348 0000 0331 		.long	0x331
 4430 034c 02        		.uleb128 0x2
 4431 034d 0000 0000 		.long	.LASF38
 4432 0351 B7        		.byte	0xb7
 4433 0352 0C        		.byte	0xc
 4434 0353 0000 0347 		.long	0x347
 4435 0357 05        		.uleb128 0x5
 4436 0358 03        		.byte	0x3
 4437 0359 0000 0000 		.long	tip_list
 4438 035d 04        		.uleb128 0x4
 4439 035e 0000 00AB 		.long	0xab
 4440 0362 0000 036D 		.long	0x36d
 4441 0366 03        		.uleb128 0x3
 4442 0367 0000 0067 		.long	0x67
 4443 036b 92        		.byte	0x92
 4444 036c 00        		.byte	0
 4445 036d 08        		.uleb128 0x8
 4446 036e 0000 035D 		.long	0x35d
 4447 0372 02        		.uleb128 0x2
 4448 0373 0000 0000 		.long	.LASF39
 4449 0377 BF        		.byte	0xbf
 4450 0378 0C        		.byte	0xc
 4451 0379 0000 036D 		.long	0x36d
 4452 037d 05        		.uleb128 0x5
 4453 037e 03        		.byte	0x3
 4454 037f 0000 0000 		.long	help_text
 4455 0383 0E        		.uleb128 0xe
 4456 0384 0000 0000 		.long	.LASF40
 4457 0388 41        		.byte	0x41
 4458 0389 0000 038F 		.long	0x38f
 4459 038d 07        		.uleb128 0x7
 4460 038e 00        		.byte	0
 4461 038f 1D        		.uleb128 0x1d
 4462 0390 0000 0000 		.long	.LASF46
 4463 0394 04        		.byte	0x4
 4464 0395 40        		.byte	0x40
 4465 0396 06        		.byte	0x6
 4466 0397 0000 03A1 		.long	0x3a1
 4467 039b 05        		.uleb128 0x5
 4468 039c 0000 009D 		.long	0x9d
 4469 03a0 00        		.byte	0


 4470 03a1 0E        		.uleb128 0xe
 4471 03a2 0000 0000 		.long	.LASF41
 4472 03a6 3F        		.byte	0x3f
 4473 03a7 0000 03AD 		.long	0x3ad
 4474 03ab 07        		.uleb128 0x7
 4475 03ac 00        		.byte	0
 4476 03ad 0E        		.uleb128 0xe
 4477 03ae 0000 0000 		.long	.LASF42
 4478 03b2 3E        		.byte	0x3e
 4479 03b3 0000 03B9 		.long	0x3b9
 4480 03b7 07        		.uleb128 0x7
 4481 03b8 00        		.byte	0
 4482 03b9 0A        		.uleb128 0xa
 4483 03ba 0000 0000 		.long	.LASF43
 4484 03be 05        		.byte	0x5
 4485 03bf 2B        		.byte	0x2b
 4486 03c0 06        		.byte	0x6
 4487 03c1 0000 0096 		.long	0x96
 4488 03c5 0000 03D9 		.long	0x3d9
 4489 03c9 05        		.uleb128 0x5
 4490 03ca 0000 00B0 		.long	0xb0
 4491 03ce 05        		.uleb128 0x5
 4492 03cf 0000 00B0 		.long	0xb0
 4493 03d3 05        		.uleb128 0x5
 4494 03d4 0000 007C 		.long	0x7c
 4495 03d8 00        		.byte	0
 4496 03d9 0A        		.uleb128 0xa
 4497 03da 0000 0000 		.long	.LASF44
 4498 03de 05        		.byte	0x5
 4499 03df 24        		.byte	0x24
 4500 03e0 06        		.byte	0x6
 4501 03e1 0000 0096 		.long	0x96
 4502 03e5 0000 03F4 		.long	0x3f4
 4503 03e9 05        		.uleb128 0x5
 4504 03ea 0000 00B0 		.long	0xb0
 4505 03ee 05        		.uleb128 0x5
 4506 03ef 0000 00B0 		.long	0xb0
 4507 03f3 00        		.byte	0
 4508 03f4 0A        		.uleb128 0xa
 4509 03f5 0000 0000 		.long	.LASF45
 4510 03f9 04        		.byte	0x4
 4511 03fa 43        		.byte	0x43
 4512 03fb 05        		.byte	0x5
 4513 03fc 0000 0096 		.long	0x96
 4514 0400 0000 040A 		.long	0x40a
 4515 0404 05        		.uleb128 0x5
 4516 0405 0000 00EF 		.long	0xef
 4517 0409 00        		.byte	0
 4518 040a 1E        		.uleb128 0x1e
 4519 040b 0000 0000 		.long	.LASF67
 4520 040f 07        		.byte	0x7
 4521 0410 90        		.byte	0x90
 4522 0411 05        		.byte	0x5
 4523 0412 0000 0096 		.long	0x96
 4524 0416 14        		.uleb128 0x14
 4525 0417 5600      		.string	"V"
 4526 0419 23        		.byte	0x23


 4527 041a 0000 0424 		.long	0x424
 4528 041e 05        		.uleb128 0x5
 4529 041f 0000 0096 		.long	0x96
 4530 0423 00        		.byte	0
 4531 0424 14        		.uleb128 0x14
 4532 0425 5000      		.string	"P"
 4533 0427 22        		.byte	0x22
 4534 0428 0000 0432 		.long	0x432
 4535 042c 05        		.uleb128 0x5
 4536 042d 0000 0096 		.long	0x96
 4537 0431 00        		.byte	0
 4538 0432 09        		.uleb128 0x9
 4539 0433 0000 0000 		.long	.LASF47
 4540 0437 0000 0096 		.long	0x96
 4541 043b 0000 0441 		.long	0x441
 4542 043f 07        		.uleb128 0x7
 4543 0440 00        		.byte	0
 4544 0441 0A        		.uleb128 0xa
 4545 0442 0000 0000 		.long	.LASF48
 4546 0446 05        		.byte	0x5
 4547 0447 29        		.byte	0x29
 4548 0448 09        		.byte	0x9
 4549 0449 0000 007C 		.long	0x7c
 4550 044d 0000 0457 		.long	0x457
 4551 0451 05        		.uleb128 0x5
 4552 0452 0000 00B0 		.long	0xb0
 4553 0456 00        		.byte	0
 4554 0457 0A        		.uleb128 0xa
 4555 0458 0000 0000 		.long	.LASF49
 4556 045c 06        		.byte	0x6
 4557 045d D8        		.byte	0xd8
 4558 045e 05        		.byte	0x5
 4559 045f 0000 0096 		.long	0x96
 4560 0463 0000 0477 		.long	0x477
 4561 0467 05        		.uleb128 0x5
 4562 0468 0000 009F 		.long	0x9f
 4563 046c 05        		.uleb128 0x5
 4564 046d 0000 00B0 		.long	0xb0
 4565 0471 05        		.uleb128 0x5
 4566 0472 0000 009D 		.long	0x9d
 4567 0476 00        		.byte	0
 4568 0477 0C        		.uleb128 0xc
 4569 0478 0000 0000 		.long	.LASF50
 4570 047c 0284      		.word	0x284
 4571 047e 0000 0000 		.long	.LFB8
 4572 0482 0000 003E 		.long	.LFE8-.LFB8
 4573 0486 01        		.uleb128 0x1
 4574 0487 9C        		.byte	0x9c
 4575 0488 0000 04CC 		.long	0x4cc
 4576 048c 01        		.uleb128 0x1
 4577 048d 0000 0000 		.long	.LVL183
 4578 0491 0000 03AD 		.long	0x3ad
 4579 0495 01        		.uleb128 0x1
 4580 0496 0000 0000 		.long	.LVL184
 4581 049a 0000 03A1 		.long	0x3a1
 4582 049e 01        		.uleb128 0x1
 4583 049f 0000 0000 		.long	.LVL185


 4584 04a3 0000 04CC 		.long	0x4cc
 4585 04a7 01        		.uleb128 0x1
 4586 04a8 0000 0000 		.long	.LVL186
 4587 04ac 0000 038F 		.long	0x38f
 4588 04b0 01        		.uleb128 0x1
 4589 04b1 0000 0000 		.long	.LVL187
 4590 04b5 0000 038F 		.long	0x38f
 4591 04b9 01        		.uleb128 0x1
 4592 04ba 0000 0000 		.long	.LVL188
 4593 04be 0000 038F 		.long	0x38f
 4594 04c2 1F        		.uleb128 0x1f
 4595 04c3 0000 0000 		.long	.LVL189
 4596 04c7 0000 0383 		.long	0x383
 4597 04cb 00        		.byte	0
 4598 04cc 0C        		.uleb128 0xc
 4599 04cd 0000 0000 		.long	.LASF51
 4600 04d1 0235      		.word	0x235
 4601 04d3 0000 0000 		.long	.LFB7
 4602 04d7 0000 0464 		.long	.LFE7-.LFB7
 4603 04db 01        		.uleb128 0x1
 4604 04dc 9C        		.byte	0x9c
 4605 04dd 0000 0626 		.long	0x626
 4606 04e1 01        		.uleb128 0x1
 4607 04e2 0000 0000 		.long	.LVL147
 4608 04e6 0000 0BAD 		.long	0xbad
 4609 04ea 01        		.uleb128 0x1
 4610 04eb 0000 0000 		.long	.LVL148
 4611 04ef 0000 0BAD 		.long	0xbad
 4612 04f3 01        		.uleb128 0x1
 4613 04f4 0000 0000 		.long	.LVL149
 4614 04f8 0000 0BAD 		.long	0xbad
 4615 04fc 01        		.uleb128 0x1
 4616 04fd 0000 0000 		.long	.LVL150
 4617 0501 0000 0BAD 		.long	0xbad
 4618 0505 01        		.uleb128 0x1
 4619 0506 0000 0000 		.long	.LVL151
 4620 050a 0000 0BAD 		.long	0xbad
 4621 050e 01        		.uleb128 0x1
 4622 050f 0000 0000 		.long	.LVL152
 4623 0513 0000 0BAD 		.long	0xbad
 4624 0517 01        		.uleb128 0x1
 4625 0518 0000 0000 		.long	.LVL153
 4626 051c 0000 0BAD 		.long	0xbad
 4627 0520 01        		.uleb128 0x1
 4628 0521 0000 0000 		.long	.LVL154
 4629 0525 0000 0BAD 		.long	0xbad
 4630 0529 01        		.uleb128 0x1
 4631 052a 0000 0000 		.long	.LVL155
 4632 052e 0000 0BAD 		.long	0xbad
 4633 0532 01        		.uleb128 0x1
 4634 0533 0000 0000 		.long	.LVL156
 4635 0537 0000 0BAD 		.long	0xbad
 4636 053b 01        		.uleb128 0x1
 4637 053c 0000 0000 		.long	.LVL157
 4638 0540 0000 0BAD 		.long	0xbad
 4639 0544 01        		.uleb128 0x1
 4640 0545 0000 0000 		.long	.LVL158


 4641 0549 0000 0BAD 		.long	0xbad
 4642 054d 01        		.uleb128 0x1
 4643 054e 0000 0000 		.long	.LVL159
 4644 0552 0000 0BAD 		.long	0xbad
 4645 0556 01        		.uleb128 0x1
 4646 0557 0000 0000 		.long	.LVL160
 4647 055b 0000 0BAD 		.long	0xbad
 4648 055f 01        		.uleb128 0x1
 4649 0560 0000 0000 		.long	.LVL161
 4650 0564 0000 0BAD 		.long	0xbad
 4651 0568 01        		.uleb128 0x1
 4652 0569 0000 0000 		.long	.LVL162
 4653 056d 0000 0BAD 		.long	0xbad
 4654 0571 01        		.uleb128 0x1
 4655 0572 0000 0000 		.long	.LVL163
 4656 0576 0000 0BAD 		.long	0xbad
 4657 057a 01        		.uleb128 0x1
 4658 057b 0000 0000 		.long	.LVL164
 4659 057f 0000 0BAD 		.long	0xbad
 4660 0583 01        		.uleb128 0x1
 4661 0584 0000 0000 		.long	.LVL165
 4662 0588 0000 0BAD 		.long	0xbad
 4663 058c 01        		.uleb128 0x1
 4664 058d 0000 0000 		.long	.LVL166
 4665 0591 0000 0BAD 		.long	0xbad
 4666 0595 01        		.uleb128 0x1
 4667 0596 0000 0000 		.long	.LVL167
 4668 059a 0000 0BAD 		.long	0xbad
 4669 059e 01        		.uleb128 0x1
 4670 059f 0000 0000 		.long	.LVL168
 4671 05a3 0000 0BAD 		.long	0xbad
 4672 05a7 01        		.uleb128 0x1
 4673 05a8 0000 0000 		.long	.LVL169
 4674 05ac 0000 0BAD 		.long	0xbad
 4675 05b0 01        		.uleb128 0x1
 4676 05b1 0000 0000 		.long	.LVL170
 4677 05b5 0000 0BAD 		.long	0xbad
 4678 05b9 01        		.uleb128 0x1
 4679 05ba 0000 0000 		.long	.LVL171
 4680 05be 0000 0BAD 		.long	0xbad
 4681 05c2 01        		.uleb128 0x1
 4682 05c3 0000 0000 		.long	.LVL172
 4683 05c7 0000 0BAD 		.long	0xbad
 4684 05cb 01        		.uleb128 0x1
 4685 05cc 0000 0000 		.long	.LVL173
 4686 05d0 0000 0BAD 		.long	0xbad
 4687 05d4 01        		.uleb128 0x1
 4688 05d5 0000 0000 		.long	.LVL174
 4689 05d9 0000 0BAD 		.long	0xbad
 4690 05dd 01        		.uleb128 0x1
 4691 05de 0000 0000 		.long	.LVL175
 4692 05e2 0000 0BAD 		.long	0xbad
 4693 05e6 01        		.uleb128 0x1
 4694 05e7 0000 0000 		.long	.LVL176
 4695 05eb 0000 0BAD 		.long	0xbad
 4696 05ef 01        		.uleb128 0x1
 4697 05f0 0000 0000 		.long	.LVL177


 4698 05f4 0000 0BAD 		.long	0xbad
 4699 05f8 01        		.uleb128 0x1
 4700 05f9 0000 0000 		.long	.LVL178
 4701 05fd 0000 0BAD 		.long	0xbad
 4702 0601 01        		.uleb128 0x1
 4703 0602 0000 0000 		.long	.LVL179
 4704 0606 0000 0BAD 		.long	0xbad
 4705 060a 01        		.uleb128 0x1
 4706 060b 0000 0000 		.long	.LVL180
 4707 060f 0000 0BAD 		.long	0xbad
 4708 0613 01        		.uleb128 0x1
 4709 0614 0000 0000 		.long	.LVL181
 4710 0618 0000 0BAD 		.long	0xbad
 4711 061c 01        		.uleb128 0x1
 4712 061d 0000 0000 		.long	.LVL182
 4713 0621 0000 0BAD 		.long	0xbad
 4714 0625 00        		.byte	0
 4715 0626 0C        		.uleb128 0xc
 4716 0627 0000 0000 		.long	.LASF52
 4717 062b 0193      		.word	0x193
 4718 062d 0000 0000 		.long	.LFB6
 4719 0631 0000 0B94 		.long	.LFE6-.LFB6
 4720 0635 01        		.uleb128 0x1
 4721 0636 9C        		.byte	0x9c
 4722 0637 0000 08EF 		.long	0x8ef
 4723 063b 0F        		.uleb128 0xf
 4724 063c 0000 0000 		.long	.LASF53
 4725 0640 0195      		.word	0x195
 4726 0642 0A        		.byte	0xa
 4727 0643 0000 00DF 		.long	0xdf
 4728 0647 02        		.uleb128 0x2
 4729 0648 91        		.byte	0x91
 4730 0649 78        		.sleb128 -8
 4731 064a 0F        		.uleb128 0xf
 4732 064b 0000 0000 		.long	.LASF54
 4733 064f 0196      		.word	0x196
 4734 0651 0A        		.byte	0xa
 4735 0652 0000 00DF 		.long	0xdf
 4736 0656 02        		.uleb128 0x2
 4737 0657 91        		.byte	0x91
 4738 0658 7A        		.sleb128 -6
 4739 0659 20        		.uleb128 0x20
 4740 065a 0000 0000 		.long	.LASF61
 4741 065e 01        		.byte	0x1
 4742 065f 0197      		.word	0x197
 4743 0661 09        		.byte	0x9
 4744 0662 0000 0096 		.long	0x96
 4745 0666 0B        		.uleb128 0xb
 4746 0667 0000 0000 		.long	.LBB5
 4747 066b 0000 004E 		.long	.LBE5-.LBB5
 4748 066f 0000 068C 		.long	0x68c
 4749 0673 09        		.uleb128 0x9
 4750 0674 0000 0000 		.long	.LASF47
 4751 0678 0000 0096 		.long	0x96
 4752 067c 0000 0682 		.long	0x682
 4753 0680 07        		.uleb128 0x7
 4754 0681 00        		.byte	0


 4755 0682 01        		.uleb128 0x1
 4756 0683 0000 0000 		.long	.LVL97
 4757 0687 0000 0432 		.long	0x432
 4758 068b 00        		.byte	0
 4759 068c 15        		.uleb128 0x15
 4760 068d 0000 0000 		.long	.LLRL10
 4761 0691 0000 0786 		.long	0x786
 4762 0695 09        		.uleb128 0x9
 4763 0696 0000 0000 		.long	.LASF47
 4764 069a 0000 0096 		.long	0x96
 4765 069e 0000 06A4 		.long	0x6a4
 4766 06a2 07        		.uleb128 0x7
 4767 06a3 00        		.byte	0
 4768 06a4 01        		.uleb128 0x1
 4769 06a5 0000 0000 		.long	.LVL114
 4770 06a9 0000 0BAD 		.long	0xbad
 4771 06ad 01        		.uleb128 0x1
 4772 06ae 0000 0000 		.long	.LVL115
 4773 06b2 0000 0BAD 		.long	0xbad
 4774 06b6 01        		.uleb128 0x1
 4775 06b7 0000 0000 		.long	.LVL116
 4776 06bb 0000 0BAD 		.long	0xbad
 4777 06bf 01        		.uleb128 0x1
 4778 06c0 0000 0000 		.long	.LVL117
 4779 06c4 0000 0C78 		.long	0xc78
 4780 06c8 01        		.uleb128 0x1
 4781 06c9 0000 0000 		.long	.LVL118
 4782 06cd 0000 0432 		.long	0x432
 4783 06d1 01        		.uleb128 0x1
 4784 06d2 0000 0000 		.long	.LVL119
 4785 06d6 0000 0432 		.long	0x432
 4786 06da 01        		.uleb128 0x1
 4787 06db 0000 0000 		.long	.LVL120
 4788 06df 0000 0BAD 		.long	0xbad
 4789 06e3 01        		.uleb128 0x1
 4790 06e4 0000 0000 		.long	.LVL121
 4791 06e8 0000 0432 		.long	0x432
 4792 06ec 01        		.uleb128 0x1
 4793 06ed 0000 0000 		.long	.LVL122
 4794 06f1 0000 0432 		.long	0x432
 4795 06f5 01        		.uleb128 0x1
 4796 06f6 0000 0000 		.long	.LVL123
 4797 06fa 0000 0BAD 		.long	0xbad
 4798 06fe 01        		.uleb128 0x1
 4799 06ff 0000 0000 		.long	.LVL124
 4800 0703 0000 0BAD 		.long	0xbad
 4801 0707 01        		.uleb128 0x1
 4802 0708 0000 0000 		.long	.LVL125
 4803 070c 0000 0BAD 		.long	0xbad
 4804 0710 01        		.uleb128 0x1
 4805 0711 0000 0000 		.long	.LVL126
 4806 0715 0000 0BAD 		.long	0xbad
 4807 0719 01        		.uleb128 0x1
 4808 071a 0000 0000 		.long	.LVL127
 4809 071e 0000 0BAD 		.long	0xbad
 4810 0722 01        		.uleb128 0x1
 4811 0723 0000 0000 		.long	.LVL128


 4812 0727 0000 0BAD 		.long	0xbad
 4813 072b 01        		.uleb128 0x1
 4814 072c 0000 0000 		.long	.LVL129
 4815 0730 0000 0BAD 		.long	0xbad
 4816 0734 01        		.uleb128 0x1
 4817 0735 0000 0000 		.long	.LVL130
 4818 0739 0000 0BAD 		.long	0xbad
 4819 073d 01        		.uleb128 0x1
 4820 073e 0000 0000 		.long	.LVL134
 4821 0742 0000 0BAD 		.long	0xbad
 4822 0746 01        		.uleb128 0x1
 4823 0747 0000 0000 		.long	.LVL135
 4824 074b 0000 0BAD 		.long	0xbad
 4825 074f 01        		.uleb128 0x1
 4826 0750 0000 0000 		.long	.LVL136
 4827 0754 0000 0BAD 		.long	0xbad
 4828 0758 01        		.uleb128 0x1
 4829 0759 0000 0000 		.long	.LVL137
 4830 075d 0000 0BAD 		.long	0xbad
 4831 0761 01        		.uleb128 0x1
 4832 0762 0000 0000 		.long	.LVL138
 4833 0766 0000 0BAD 		.long	0xbad
 4834 076a 01        		.uleb128 0x1
 4835 076b 0000 0000 		.long	.LVL139
 4836 076f 0000 0BAD 		.long	0xbad
 4837 0773 01        		.uleb128 0x1
 4838 0774 0000 0000 		.long	.LVL140
 4839 0778 0000 0BAD 		.long	0xbad
 4840 077c 01        		.uleb128 0x1
 4841 077d 0000 0000 		.long	.LVL141
 4842 0781 0000 0BAD 		.long	0xbad
 4843 0785 00        		.byte	0
 4844 0786 0B        		.uleb128 0xb
 4845 0787 0000 0000 		.long	.LBB7
 4846 078b 0000 0156 		.long	.LBE7-.LBB7
 4847 078f 0000 07D9 		.long	0x7d9
 4848 0793 09        		.uleb128 0x9
 4849 0794 0000 0000 		.long	.LASF47
 4850 0798 0000 0096 		.long	0x96
 4851 079c 0000 07A2 		.long	0x7a2
 4852 07a0 07        		.uleb128 0x7
 4853 07a1 00        		.byte	0
 4854 07a2 01        		.uleb128 0x1
 4855 07a3 0000 0000 		.long	.LVL107
 4856 07a7 0000 0432 		.long	0x432
 4857 07ab 01        		.uleb128 0x1
 4858 07ac 0000 0000 		.long	.LVL108
 4859 07b0 0000 0BAD 		.long	0xbad
 4860 07b4 01        		.uleb128 0x1
 4861 07b5 0000 0000 		.long	.LVL109
 4862 07b9 0000 0BAD 		.long	0xbad
 4863 07bd 01        		.uleb128 0x1
 4864 07be 0000 0000 		.long	.LVL110
 4865 07c2 0000 0BAD 		.long	0xbad
 4866 07c6 01        		.uleb128 0x1
 4867 07c7 0000 0000 		.long	.LVL111
 4868 07cb 0000 0BAD 		.long	0xbad


 4869 07cf 01        		.uleb128 0x1
 4870 07d0 0000 0000 		.long	.LVL112
 4871 07d4 0000 0BAD 		.long	0xbad
 4872 07d8 00        		.byte	0
 4873 07d9 15        		.uleb128 0x15
 4874 07da 0000 0000 		.long	.LLRL9
 4875 07de 0000 0804 		.long	0x804
 4876 07e2 09        		.uleb128 0x9
 4877 07e3 0000 0000 		.long	.LASF47
 4878 07e7 0000 0096 		.long	0x96
 4879 07eb 0000 07F1 		.long	0x7f1
 4880 07ef 07        		.uleb128 0x7
 4881 07f0 00        		.byte	0
 4882 07f1 01        		.uleb128 0x1
 4883 07f2 0000 0000 		.long	.LVL106
 4884 07f6 0000 0432 		.long	0x432
 4885 07fa 01        		.uleb128 0x1
 4886 07fb 0000 0000 		.long	.LVL113
 4887 07ff 0000 0432 		.long	0x432
 4888 0803 00        		.byte	0
 4889 0804 01        		.uleb128 0x1
 4890 0805 0000 0000 		.long	.LVL87
 4891 0809 0000 0424 		.long	0x424
 4892 080d 01        		.uleb128 0x1
 4893 080e 0000 0000 		.long	.LVL88
 4894 0812 0000 0424 		.long	0x424
 4895 0816 01        		.uleb128 0x1
 4896 0817 0000 0000 		.long	.LVL89
 4897 081b 0000 040A 		.long	0x40a
 4898 081f 01        		.uleb128 0x1
 4899 0820 0000 0000 		.long	.LVL90
 4900 0824 0000 0416 		.long	0x416
 4901 0828 01        		.uleb128 0x1
 4902 0829 0000 0000 		.long	.LVL91
 4903 082d 0000 0416 		.long	0x416
 4904 0831 01        		.uleb128 0x1
 4905 0832 0000 0000 		.long	.LVL92
 4906 0836 0000 0424 		.long	0x424
 4907 083a 01        		.uleb128 0x1
 4908 083b 0000 0000 		.long	.LVL93
 4909 083f 0000 0424 		.long	0x424
 4910 0843 01        		.uleb128 0x1
 4911 0844 0000 0000 		.long	.LVL94
 4912 0848 0000 040A 		.long	0x40a
 4913 084c 01        		.uleb128 0x1
 4914 084d 0000 0000 		.long	.LVL95
 4915 0851 0000 03F4 		.long	0x3f4
 4916 0855 01        		.uleb128 0x1
 4917 0856 0000 0000 		.long	.LVL96
 4918 085a 0000 0BAD 		.long	0xbad
 4919 085e 01        		.uleb128 0x1
 4920 085f 0000 0000 		.long	.LVL98
 4921 0863 0000 0BAD 		.long	0xbad
 4922 0867 01        		.uleb128 0x1
 4923 0868 0000 0000 		.long	.LVL99
 4924 086c 0000 0BAD 		.long	0xbad
 4925 0870 01        		.uleb128 0x1


 4926 0871 0000 0000 		.long	.LVL100
 4927 0875 0000 0BAD 		.long	0xbad
 4928 0879 01        		.uleb128 0x1
 4929 087a 0000 0000 		.long	.LVL101
 4930 087e 0000 0BAD 		.long	0xbad
 4931 0882 01        		.uleb128 0x1
 4932 0883 0000 0000 		.long	.LVL102
 4933 0887 0000 0BAD 		.long	0xbad
 4934 088b 01        		.uleb128 0x1
 4935 088c 0000 0000 		.long	.LVL103
 4936 0890 0000 0BAD 		.long	0xbad
 4937 0894 01        		.uleb128 0x1
 4938 0895 0000 0000 		.long	.LVL104
 4939 0899 0000 0BAD 		.long	0xbad
 4940 089d 01        		.uleb128 0x1
 4941 089e 0000 0000 		.long	.LVL105
 4942 08a2 0000 0BAD 		.long	0xbad
 4943 08a6 01        		.uleb128 0x1
 4944 08a7 0000 0000 		.long	.LVL131
 4945 08ab 0000 0BAD 		.long	0xbad
 4946 08af 01        		.uleb128 0x1
 4947 08b0 0000 0000 		.long	.LVL132
 4948 08b4 0000 0BAD 		.long	0xbad
 4949 08b8 01        		.uleb128 0x1
 4950 08b9 0000 0000 		.long	.LVL133
 4951 08bd 0000 0BAD 		.long	0xbad
 4952 08c1 01        		.uleb128 0x1
 4953 08c2 0000 0000 		.long	.LVL142
 4954 08c6 0000 0BAD 		.long	0xbad
 4955 08ca 01        		.uleb128 0x1
 4956 08cb 0000 0000 		.long	.LVL143
 4957 08cf 0000 0BAD 		.long	0xbad
 4958 08d3 01        		.uleb128 0x1
 4959 08d4 0000 0000 		.long	.LVL144
 4960 08d8 0000 0BAD 		.long	0xbad
 4961 08dc 01        		.uleb128 0x1
 4962 08dd 0000 0000 		.long	.LVL145
 4963 08e1 0000 0BAD 		.long	0xbad
 4964 08e5 01        		.uleb128 0x1
 4965 08e6 0000 0000 		.long	.LVL146
 4966 08ea 0000 0BAD 		.long	0xbad
 4967 08ee 00        		.byte	0
 4968 08ef 0C        		.uleb128 0xc
 4969 08f0 0000 0000 		.long	.LASF55
 4970 08f4 0116      		.word	0x116
 4971 08f6 0000 0000 		.long	.LFB5
 4972 08fa 0000 08CA 		.long	.LFE5-.LFB5
 4973 08fe 01        		.uleb128 0x1
 4974 08ff 9C        		.byte	0x9c
 4975 0900 0000 0A88 		.long	0xa88
 4976 0904 0F        		.uleb128 0xf
 4977 0905 0000 0000 		.long	.LASF56
 4978 0909 0118      		.word	0x118
 4979 090b 09        		.byte	0x9
 4980 090c 0000 0165 		.long	0x165
 4981 0910 02        		.uleb128 0x2
 4982 0911 91        		.byte	0x91


 4983 0912 74        		.sleb128 -12
 4984 0913 21        		.uleb128 0x21
 4985 0914 0000 0000 		.long	.LASF57
 4986 0918 01        		.byte	0x1
 4987 0919 0119      		.word	0x119
 4988 091b 09        		.byte	0x9
 4989 091c 0000 0096 		.long	0x96
 4990 0920 0000 0000 		.long	.LLST8
 4991 0924 0000 0000 		.long	.LVUS8
 4992 0928 0B        		.uleb128 0xb
 4993 0929 0000 0000 		.long	.LBB4
 4994 092d 0000 0010 		.long	.LBE4-.LBB4
 4995 0931 0000 094E 		.long	0x94e
 4996 0935 09        		.uleb128 0x9
 4997 0936 0000 0000 		.long	.LASF47
 4998 093a 0000 0096 		.long	0x96
 4999 093e 0000 0944 		.long	0x944
 5000 0942 07        		.uleb128 0x7
 5001 0943 00        		.byte	0
 5002 0944 01        		.uleb128 0x1
 5003 0945 0000 0000 		.long	.LVL86
 5004 0949 0000 0432 		.long	0x432
 5005 094d 00        		.byte	0
 5006 094e 01        		.uleb128 0x1
 5007 094f 0000 0000 		.long	.LVL49
 5008 0953 0000 0424 		.long	0x424
 5009 0957 01        		.uleb128 0x1
 5010 0958 0000 0000 		.long	.LVL50
 5011 095c 0000 0424 		.long	0x424
 5012 0960 01        		.uleb128 0x1
 5013 0961 0000 0000 		.long	.LVL51
 5014 0965 0000 040A 		.long	0x40a
 5015 0969 16        		.uleb128 0x16
 5016 096a 0000 0000 		.long	.LVL52
 5017 096e 02        		.uleb128 0x2
 5018 096f 74        		.byte	0x74
 5019 0970 00        		.sleb128 0
 5020 0971 01        		.uleb128 0x1
 5021 0972 0000 0000 		.long	.LVL54
 5022 0976 0000 0416 		.long	0x416
 5023 097a 01        		.uleb128 0x1
 5024 097b 0000 0000 		.long	.LVL55
 5025 097f 0000 0416 		.long	0x416
 5026 0983 01        		.uleb128 0x1
 5027 0984 0000 0000 		.long	.LVL56
 5028 0988 0000 0424 		.long	0x424
 5029 098c 01        		.uleb128 0x1
 5030 098d 0000 0000 		.long	.LVL57
 5031 0991 0000 0424 		.long	0x424
 5032 0995 01        		.uleb128 0x1
 5033 0996 0000 0000 		.long	.LVL58
 5034 099a 0000 040A 		.long	0x40a
 5035 099e 16        		.uleb128 0x16
 5036 099f 0000 0000 		.long	.LVL59
 5037 09a3 02        		.uleb128 0x2
 5038 09a4 74        		.byte	0x74
 5039 09a5 00        		.sleb128 0


 5040 09a6 01        		.uleb128 0x1
 5041 09a7 0000 0000 		.long	.LVL61
 5042 09ab 0000 0BAD 		.long	0xbad
 5043 09af 01        		.uleb128 0x1
 5044 09b0 0000 0000 		.long	.LVL62
 5045 09b4 0000 0BAD 		.long	0xbad
 5046 09b8 01        		.uleb128 0x1
 5047 09b9 0000 0000 		.long	.LVL63
 5048 09bd 0000 0BAD 		.long	0xbad
 5049 09c1 01        		.uleb128 0x1
 5050 09c2 0000 0000 		.long	.LVL64
 5051 09c6 0000 0BAD 		.long	0xbad
 5052 09ca 01        		.uleb128 0x1
 5053 09cb 0000 0000 		.long	.LVL65
 5054 09cf 0000 0BAD 		.long	0xbad
 5055 09d3 01        		.uleb128 0x1
 5056 09d4 0000 0000 		.long	.LVL66
 5057 09d8 0000 03F4 		.long	0x3f4
 5058 09dc 01        		.uleb128 0x1
 5059 09dd 0000 0000 		.long	.LVL67
 5060 09e1 0000 0BAD 		.long	0xbad
 5061 09e5 01        		.uleb128 0x1
 5062 09e6 0000 0000 		.long	.LVL68
 5063 09ea 0000 0BAD 		.long	0xbad
 5064 09ee 01        		.uleb128 0x1
 5065 09ef 0000 0000 		.long	.LVL69
 5066 09f3 0000 0BAD 		.long	0xbad
 5067 09f7 01        		.uleb128 0x1
 5068 09f8 0000 0000 		.long	.LVL70
 5069 09fc 0000 0BAD 		.long	0xbad
 5070 0a00 01        		.uleb128 0x1
 5071 0a01 0000 0000 		.long	.LVL71
 5072 0a05 0000 0BAD 		.long	0xbad
 5073 0a09 01        		.uleb128 0x1
 5074 0a0a 0000 0000 		.long	.LVL72
 5075 0a0e 0000 0BAD 		.long	0xbad
 5076 0a12 01        		.uleb128 0x1
 5077 0a13 0000 0000 		.long	.LVL73
 5078 0a17 0000 0BAD 		.long	0xbad
 5079 0a1b 01        		.uleb128 0x1
 5080 0a1c 0000 0000 		.long	.LVL74
 5081 0a20 0000 0BAD 		.long	0xbad
 5082 0a24 01        		.uleb128 0x1
 5083 0a25 0000 0000 		.long	.LVL75
 5084 0a29 0000 0BAD 		.long	0xbad
 5085 0a2d 01        		.uleb128 0x1
 5086 0a2e 0000 0000 		.long	.LVL76
 5087 0a32 0000 0BAD 		.long	0xbad
 5088 0a36 01        		.uleb128 0x1
 5089 0a37 0000 0000 		.long	.LVL77
 5090 0a3b 0000 0BAD 		.long	0xbad
 5091 0a3f 01        		.uleb128 0x1
 5092 0a40 0000 0000 		.long	.LVL78
 5093 0a44 0000 0BAD 		.long	0xbad
 5094 0a48 01        		.uleb128 0x1
 5095 0a49 0000 0000 		.long	.LVL79
 5096 0a4d 0000 03B9 		.long	0x3b9


 5097 0a51 01        		.uleb128 0x1
 5098 0a52 0000 0000 		.long	.LVL80
 5099 0a56 0000 0BAD 		.long	0xbad
 5100 0a5a 01        		.uleb128 0x1
 5101 0a5b 0000 0000 		.long	.LVL81
 5102 0a5f 0000 0BAD 		.long	0xbad
 5103 0a63 01        		.uleb128 0x1
 5104 0a64 0000 0000 		.long	.LVL82
 5105 0a68 0000 0BAD 		.long	0xbad
 5106 0a6c 01        		.uleb128 0x1
 5107 0a6d 0000 0000 		.long	.LVL83
 5108 0a71 0000 0BAD 		.long	0xbad
 5109 0a75 01        		.uleb128 0x1
 5110 0a76 0000 0000 		.long	.LVL84
 5111 0a7a 0000 0BAD 		.long	0xbad
 5112 0a7e 01        		.uleb128 0x1
 5113 0a7f 0000 0000 		.long	.LVL85
 5114 0a83 0000 0BAD 		.long	0xbad
 5115 0a87 00        		.byte	0
 5116 0a88 22        		.uleb128 0x22
 5117 0a89 0000 0000 		.long	.LASF58
 5118 0a8d 01        		.byte	0x1
 5119 0a8e E2        		.byte	0xe2
 5120 0a8f 06        		.byte	0x6
 5121 0a90 0000 0000 		.long	.LFB4
 5122 0a94 0000 01FC 		.long	.LFE4-.LFB4
 5123 0a98 01        		.uleb128 0x1
 5124 0a99 9C        		.byte	0x9c
 5125 0a9a 0000 0BAD 		.long	0xbad
 5126 0a9e 10        		.uleb128 0x10
 5127 0a9f 6872 00   		.string	"hr"
 5128 0aa2 12        		.byte	0x12
 5129 0aa3 0000 008F 		.long	0x8f
 5130 0aa7 0000 0000 		.long	.LLST4
 5131 0aab 0000 0000 		.long	.LVUS4
 5132 0aaf 10        		.uleb128 0x10
 5133 0ab0 6D69 6E00 		.string	"min"
 5134 0ab4 1A        		.byte	0x1a
 5135 0ab5 0000 008F 		.long	0x8f
 5136 0ab9 0000 0000 		.long	.LLST5
 5137 0abd 0000 0000 		.long	.LVUS5
 5138 0ac1 10        		.uleb128 0x10
 5139 0ac2 7365 6300 		.string	"sec"
 5140 0ac6 23        		.byte	0x23
 5141 0ac7 0000 008F 		.long	0x8f
 5142 0acb 0000 0000 		.long	.LLST6
 5143 0acf 0000 0000 		.long	.LVUS6
 5144 0ad3 17        		.uleb128 0x17
 5145 0ad4 0000 0000 		.long	.LASF59
 5146 0ad8 E5        		.byte	0xe5
 5147 0ad9 2C        		.byte	0x2c
 5148 0ada 0000 008F 		.long	0x8f
 5149 0ade 0000 0000 		.long	.LLST7
 5150 0ae2 0000 0000 		.long	.LVUS7
 5151 0ae6 01        		.uleb128 0x1
 5152 0ae7 0000 0000 		.long	.LVL18
 5153 0aeb 0000 0424 		.long	0x424


 5154 0aef 01        		.uleb128 0x1
 5155 0af0 0000 0000 		.long	.LVL19
 5156 0af4 0000 0424 		.long	0x424
 5157 0af8 01        		.uleb128 0x1
 5158 0af9 0000 0000 		.long	.LVL22
 5159 0afd 0000 0BAD 		.long	0xbad
 5160 0b01 01        		.uleb128 0x1
 5161 0b02 0000 0000 		.long	.LVL23
 5162 0b06 0000 0BAD 		.long	0xbad
 5163 0b0a 01        		.uleb128 0x1
 5164 0b0b 0000 0000 		.long	.LVL24
 5165 0b0f 0000 0BAD 		.long	0xbad
 5166 0b13 01        		.uleb128 0x1
 5167 0b14 0000 0000 		.long	.LVL25
 5168 0b18 0000 0BAD 		.long	0xbad
 5169 0b1c 01        		.uleb128 0x1
 5170 0b1d 0000 0000 		.long	.LVL26
 5171 0b21 0000 0BAD 		.long	0xbad
 5172 0b25 01        		.uleb128 0x1
 5173 0b26 0000 0000 		.long	.LVL27
 5174 0b2a 0000 0BAD 		.long	0xbad
 5175 0b2e 01        		.uleb128 0x1
 5176 0b2f 0000 0000 		.long	.LVL29
 5177 0b33 0000 0416 		.long	0x416
 5178 0b37 01        		.uleb128 0x1
 5179 0b38 0000 0000 		.long	.LVL30
 5180 0b3c 0000 0416 		.long	0x416
 5181 0b40 01        		.uleb128 0x1
 5182 0b41 0000 0000 		.long	.LVL34
 5183 0b45 0000 0BAD 		.long	0xbad
 5184 0b49 01        		.uleb128 0x1
 5185 0b4a 0000 0000 		.long	.LVL35
 5186 0b4e 0000 0BAD 		.long	0xbad
 5187 0b52 01        		.uleb128 0x1
 5188 0b53 0000 0000 		.long	.LVL36
 5189 0b57 0000 0BAD 		.long	0xbad
 5190 0b5b 01        		.uleb128 0x1
 5191 0b5c 0000 0000 		.long	.LVL37
 5192 0b60 0000 0BAD 		.long	0xbad
 5193 0b64 01        		.uleb128 0x1
 5194 0b65 0000 0000 		.long	.LVL38
 5195 0b69 0000 0BAD 		.long	0xbad
 5196 0b6d 01        		.uleb128 0x1
 5197 0b6e 0000 0000 		.long	.LVL39
 5198 0b72 0000 0BAD 		.long	0xbad
 5199 0b76 01        		.uleb128 0x1
 5200 0b77 0000 0000 		.long	.LVL43
 5201 0b7b 0000 0BAD 		.long	0xbad
 5202 0b7f 01        		.uleb128 0x1
 5203 0b80 0000 0000 		.long	.LVL44
 5204 0b84 0000 0BAD 		.long	0xbad
 5205 0b88 01        		.uleb128 0x1
 5206 0b89 0000 0000 		.long	.LVL45
 5207 0b8d 0000 0BAD 		.long	0xbad
 5208 0b91 01        		.uleb128 0x1
 5209 0b92 0000 0000 		.long	.LVL46
 5210 0b96 0000 0BAD 		.long	0xbad


 5211 0b9a 01        		.uleb128 0x1
 5212 0b9b 0000 0000 		.long	.LVL47
 5213 0b9f 0000 0BAD 		.long	0xbad
 5214 0ba3 01        		.uleb128 0x1
 5215 0ba4 0000 0000 		.long	.LVL48
 5216 0ba8 0000 0BAD 		.long	0xbad
 5217 0bac 00        		.byte	0
 5218 0bad 23        		.uleb128 0x23
 5219 0bae 0000 0000 		.long	.LASF68
 5220 0bb2 01        		.byte	0x1
 5221 0bb3 C6        		.byte	0xc6
 5222 0bb4 06        		.byte	0x6
 5223 0bb5 0000 0000 		.long	.LFB3
 5224 0bb9 0000 0084 		.long	.LFE3-.LFB3
 5225 0bbd 01        		.uleb128 0x1
 5226 0bbe 9C        		.byte	0x9c
 5227 0bbf 0000 0C78 		.long	0xc78
 5228 0bc3 11        		.uleb128 0x11
 5229 0bc4 6368 3000 		.string	"ch0"
 5230 0bc8 1D        		.byte	0x1d
 5231 0bc9 0000 00F6 		.long	0xf6
 5232 0bcd 0000 0000 		.long	.LLST0
 5233 0bd1 0000 0000 		.long	.LVUS0
 5234 0bd5 11        		.uleb128 0x11
 5235 0bd6 6368 3100 		.string	"ch1"
 5236 0bda 2D        		.byte	0x2d
 5237 0bdb 0000 00F6 		.long	0xf6
 5238 0bdf 0000 0000 		.long	.LLST1
 5239 0be3 0000 0000 		.long	.LVUS1
 5240 0be7 11        		.uleb128 0x11
 5241 0be8 666D 7400 		.string	"fmt"
 5242 0bec 3E        		.byte	0x3e
 5243 0bed 0000 00B0 		.long	0xb0
 5244 0bf1 0000 0000 		.long	.LLST2
 5245 0bf5 0000 0000 		.long	.LVUS2
 5246 0bf9 07        		.uleb128 0x7
 5247 0bfa 17        		.uleb128 0x17
 5248 0bfb 0000 0000 		.long	.LASF60
 5249 0bff C9        		.byte	0xc9
 5250 0c00 09        		.byte	0x9
 5251 0c01 0000 0096 		.long	0x96
 5252 0c05 0000 0000 		.long	.LLST3
 5253 0c09 0000 0000 		.long	.LVUS3
 5254 0c0d 24        		.uleb128 0x24
 5255 0c0e 0000 0000 		.long	.LASF62
 5256 0c12 01        		.byte	0x1
 5257 0c13 CC        		.byte	0xcc
 5258 0c14 0D        		.byte	0xd
 5259 0c15 0000 0038 		.long	0x38
 5260 0c19 0B        		.uleb128 0xb
 5261 0c1a 0000 0000 		.long	.LBB3
 5262 0c1e 0000 0016 		.long	.LBE3-.LBB3
 5263 0c22 0000 0C3F 		.long	0xc3f
 5264 0c26 09        		.uleb128 0x9
 5265 0c27 0000 0000 		.long	.LASF47
 5266 0c2b 0000 0096 		.long	0x96
 5267 0c2f 0000 0C35 		.long	0xc35


 5268 0c33 07        		.uleb128 0x7
 5269 0c34 00        		.byte	0
 5270 0c35 01        		.uleb128 0x1
 5271 0c36 0000 0000 		.long	.LVL15
 5272 0c3a 0000 0432 		.long	0x432
 5273 0c3e 00        		.byte	0
 5274 0c3f 0B        		.uleb128 0xb
 5275 0c40 0000 0000 		.long	.LBB2
 5276 0c44 0000 0016 		.long	.LBE2-.LBB2
 5277 0c48 0000 0C65 		.long	0xc65
 5278 0c4c 09        		.uleb128 0x9
 5279 0c4d 0000 0000 		.long	.LASF47
 5280 0c51 0000 0096 		.long	0x96
 5281 0c55 0000 0C5B 		.long	0xc5b
 5282 0c59 07        		.uleb128 0x7
 5283 0c5a 00        		.byte	0
 5284 0c5b 01        		.uleb128 0x1
 5285 0c5c 0000 0000 		.long	.LVL11
 5286 0c60 0000 0432 		.long	0x432
 5287 0c64 00        		.byte	0
 5288 0c65 01        		.uleb128 0x1
 5289 0c66 0000 0000 		.long	.LVL4
 5290 0c6a 0000 0457 		.long	0x457
 5291 0c6e 01        		.uleb128 0x1
 5292 0c6f 0000 0000 		.long	.LVL5
 5293 0c73 0000 0441 		.long	0x441
 5294 0c77 00        		.byte	0
 5295 0c78 25        		.uleb128 0x25
 5296 0c79 0000 0000 		.long	.LASF69
 5297 0c7d 0000 0000 		.long	.LASF70
 5298 0c81 08        		.byte	0x8
 5299 0c82 00        		.byte	0
 5300 0c83 00        		.byte	0
 5301               		.section	.debug_abbrev,"",@progbits
 5302               	.Ldebug_abbrev0:
 5303 0000 01        		.uleb128 0x1
 5304 0001 48        		.uleb128 0x48
 5305 0002 00        		.byte	0
 5306 0003 7D        		.uleb128 0x7d
 5307 0004 01        		.uleb128 0x1
 5308 0005 7F        		.uleb128 0x7f
 5309 0006 13        		.uleb128 0x13
 5310 0007 00        		.byte	0
 5311 0008 00        		.byte	0
 5312 0009 02        		.uleb128 0x2
 5313 000a 34        		.uleb128 0x34
 5314 000b 00        		.byte	0
 5315 000c 03        		.uleb128 0x3
 5316 000d 0E        		.uleb128 0xe
 5317 000e 3A        		.uleb128 0x3a
 5318 000f 21        		.uleb128 0x21
 5319 0010 01        		.sleb128 1
 5320 0011 3B        		.uleb128 0x3b
 5321 0012 0B        		.uleb128 0xb
 5322 0013 39        		.uleb128 0x39
 5323 0014 0B        		.uleb128 0xb
 5324 0015 49        		.uleb128 0x49


 5325 0016 13        		.uleb128 0x13
 5326 0017 3F        		.uleb128 0x3f
 5327 0018 19        		.uleb128 0x19
 5328 0019 02        		.uleb128 0x2
 5329 001a 18        		.uleb128 0x18
 5330 001b 00        		.byte	0
 5331 001c 00        		.byte	0
 5332 001d 03        		.uleb128 0x3
 5333 001e 21        		.uleb128 0x21
 5334 001f 00        		.byte	0
 5335 0020 49        		.uleb128 0x49
 5336 0021 13        		.uleb128 0x13
 5337 0022 2F        		.uleb128 0x2f
 5338 0023 0B        		.uleb128 0xb
 5339 0024 00        		.byte	0
 5340 0025 00        		.byte	0
 5341 0026 04        		.uleb128 0x4
 5342 0027 01        		.uleb128 0x1
 5343 0028 01        		.byte	0x1
 5344 0029 49        		.uleb128 0x49
 5345 002a 13        		.uleb128 0x13
 5346 002b 01        		.uleb128 0x1
 5347 002c 13        		.uleb128 0x13
 5348 002d 00        		.byte	0
 5349 002e 00        		.byte	0
 5350 002f 05        		.uleb128 0x5
 5351 0030 05        		.uleb128 0x5
 5352 0031 00        		.byte	0
 5353 0032 49        		.uleb128 0x49
 5354 0033 13        		.uleb128 0x13
 5355 0034 00        		.byte	0
 5356 0035 00        		.byte	0
 5357 0036 06        		.uleb128 0x6
 5358 0037 24        		.uleb128 0x24
 5359 0038 00        		.byte	0
 5360 0039 0B        		.uleb128 0xb
 5361 003a 0B        		.uleb128 0xb
 5362 003b 3E        		.uleb128 0x3e
 5363 003c 0B        		.uleb128 0xb
 5364 003d 03        		.uleb128 0x3
 5365 003e 0E        		.uleb128 0xe
 5366 003f 00        		.byte	0
 5367 0040 00        		.byte	0
 5368 0041 07        		.uleb128 0x7
 5369 0042 18        		.uleb128 0x18
 5370 0043 00        		.byte	0
 5371 0044 00        		.byte	0
 5372 0045 00        		.byte	0
 5373 0046 08        		.uleb128 0x8
 5374 0047 26        		.uleb128 0x26
 5375 0048 00        		.byte	0
 5376 0049 49        		.uleb128 0x49
 5377 004a 13        		.uleb128 0x13
 5378 004b 00        		.byte	0
 5379 004c 00        		.byte	0
 5380 004d 09        		.uleb128 0x9
 5381 004e 2E        		.uleb128 0x2e


 5382 004f 01        		.byte	0x1
 5383 0050 3F        		.uleb128 0x3f
 5384 0051 19        		.uleb128 0x19
 5385 0052 03        		.uleb128 0x3
 5386 0053 0E        		.uleb128 0xe
 5387 0054 3A        		.uleb128 0x3a
 5388 0055 21        		.uleb128 0x21
 5389 0056 01        		.sleb128 1
 5390 0057 3B        		.uleb128 0x3b
 5391 0058 21        		.uleb128 0x21
 5392 0059 D701      		.sleb128 215
 5393 005b 39        		.uleb128 0x39
 5394 005c 21        		.uleb128 0x21
 5395 005d 09        		.sleb128 9
 5396 005e 49        		.uleb128 0x49
 5397 005f 13        		.uleb128 0x13
 5398 0060 3C        		.uleb128 0x3c
 5399 0061 19        		.uleb128 0x19
 5400 0062 01        		.uleb128 0x1
 5401 0063 13        		.uleb128 0x13
 5402 0064 00        		.byte	0
 5403 0065 00        		.byte	0
 5404 0066 0A        		.uleb128 0xa
 5405 0067 2E        		.uleb128 0x2e
 5406 0068 01        		.byte	0x1
 5407 0069 3F        		.uleb128 0x3f
 5408 006a 19        		.uleb128 0x19
 5409 006b 03        		.uleb128 0x3
 5410 006c 0E        		.uleb128 0xe
 5411 006d 3A        		.uleb128 0x3a
 5412 006e 0B        		.uleb128 0xb
 5413 006f 3B        		.uleb128 0x3b
 5414 0070 0B        		.uleb128 0xb
 5415 0071 39        		.uleb128 0x39
 5416 0072 0B        		.uleb128 0xb
 5417 0073 27        		.uleb128 0x27
 5418 0074 19        		.uleb128 0x19
 5419 0075 49        		.uleb128 0x49
 5420 0076 13        		.uleb128 0x13
 5421 0077 3C        		.uleb128 0x3c
 5422 0078 19        		.uleb128 0x19
 5423 0079 01        		.uleb128 0x1
 5424 007a 13        		.uleb128 0x13
 5425 007b 00        		.byte	0
 5426 007c 00        		.byte	0
 5427 007d 0B        		.uleb128 0xb
 5428 007e 0B        		.uleb128 0xb
 5429 007f 01        		.byte	0x1
 5430 0080 11        		.uleb128 0x11
 5431 0081 01        		.uleb128 0x1
 5432 0082 12        		.uleb128 0x12
 5433 0083 06        		.uleb128 0x6
 5434 0084 01        		.uleb128 0x1
 5435 0085 13        		.uleb128 0x13
 5436 0086 00        		.byte	0
 5437 0087 00        		.byte	0
 5438 0088 0C        		.uleb128 0xc


 5439 0089 2E        		.uleb128 0x2e
 5440 008a 01        		.byte	0x1
 5441 008b 3F        		.uleb128 0x3f
 5442 008c 19        		.uleb128 0x19
 5443 008d 03        		.uleb128 0x3
 5444 008e 0E        		.uleb128 0xe
 5445 008f 3A        		.uleb128 0x3a
 5446 0090 21        		.uleb128 0x21
 5447 0091 01        		.sleb128 1
 5448 0092 3B        		.uleb128 0x3b
 5449 0093 05        		.uleb128 0x5
 5450 0094 39        		.uleb128 0x39
 5451 0095 21        		.uleb128 0x21
 5452 0096 06        		.sleb128 6
 5453 0097 11        		.uleb128 0x11
 5454 0098 01        		.uleb128 0x1
 5455 0099 12        		.uleb128 0x12
 5456 009a 06        		.uleb128 0x6
 5457 009b 40        		.uleb128 0x40
 5458 009c 18        		.uleb128 0x18
 5459 009d 7A        		.uleb128 0x7a
 5460 009e 19        		.uleb128 0x19
 5461 009f 01        		.uleb128 0x1
 5462 00a0 13        		.uleb128 0x13
 5463 00a1 00        		.byte	0
 5464 00a2 00        		.byte	0
 5465 00a3 0D        		.uleb128 0xd
 5466 00a4 16        		.uleb128 0x16
 5467 00a5 00        		.byte	0
 5468 00a6 03        		.uleb128 0x3
 5469 00a7 0E        		.uleb128 0xe
 5470 00a8 3A        		.uleb128 0x3a
 5471 00a9 0B        		.uleb128 0xb
 5472 00aa 3B        		.uleb128 0x3b
 5473 00ab 0B        		.uleb128 0xb
 5474 00ac 39        		.uleb128 0x39
 5475 00ad 0B        		.uleb128 0xb
 5476 00ae 49        		.uleb128 0x49
 5477 00af 13        		.uleb128 0x13
 5478 00b0 00        		.byte	0
 5479 00b1 00        		.byte	0
 5480 00b2 0E        		.uleb128 0xe
 5481 00b3 2E        		.uleb128 0x2e
 5482 00b4 01        		.byte	0x1
 5483 00b5 3F        		.uleb128 0x3f
 5484 00b6 19        		.uleb128 0x19
 5485 00b7 03        		.uleb128 0x3
 5486 00b8 0E        		.uleb128 0xe
 5487 00b9 3A        		.uleb128 0x3a
 5488 00ba 21        		.uleb128 0x21
 5489 00bb 04        		.sleb128 4
 5490 00bc 3B        		.uleb128 0x3b
 5491 00bd 0B        		.uleb128 0xb
 5492 00be 39        		.uleb128 0x39
 5493 00bf 21        		.uleb128 0x21
 5494 00c0 06        		.sleb128 6
 5495 00c1 3C        		.uleb128 0x3c


 5496 00c2 19        		.uleb128 0x19
 5497 00c3 01        		.uleb128 0x1
 5498 00c4 13        		.uleb128 0x13
 5499 00c5 00        		.byte	0
 5500 00c6 00        		.byte	0
 5501 00c7 0F        		.uleb128 0xf
 5502 00c8 34        		.uleb128 0x34
 5503 00c9 00        		.byte	0
 5504 00ca 03        		.uleb128 0x3
 5505 00cb 0E        		.uleb128 0xe
 5506 00cc 3A        		.uleb128 0x3a
 5507 00cd 21        		.uleb128 0x21
 5508 00ce 01        		.sleb128 1
 5509 00cf 3B        		.uleb128 0x3b
 5510 00d0 05        		.uleb128 0x5
 5511 00d1 39        		.uleb128 0x39
 5512 00d2 0B        		.uleb128 0xb
 5513 00d3 49        		.uleb128 0x49
 5514 00d4 13        		.uleb128 0x13
 5515 00d5 02        		.uleb128 0x2
 5516 00d6 18        		.uleb128 0x18
 5517 00d7 00        		.byte	0
 5518 00d8 00        		.byte	0
 5519 00d9 10        		.uleb128 0x10
 5520 00da 34        		.uleb128 0x34
 5521 00db 00        		.byte	0
 5522 00dc 03        		.uleb128 0x3
 5523 00dd 08        		.uleb128 0x8
 5524 00de 3A        		.uleb128 0x3a
 5525 00df 21        		.uleb128 0x21
 5526 00e0 01        		.sleb128 1
 5527 00e1 3B        		.uleb128 0x3b
 5528 00e2 21        		.uleb128 0x21
 5529 00e3 E501      		.sleb128 229
 5530 00e5 39        		.uleb128 0x39
 5531 00e6 0B        		.uleb128 0xb
 5532 00e7 49        		.uleb128 0x49
 5533 00e8 13        		.uleb128 0x13
 5534 00e9 02        		.uleb128 0x2
 5535 00ea 17        		.uleb128 0x17
 5536 00eb B742      		.uleb128 0x2137
 5537 00ed 17        		.uleb128 0x17
 5538 00ee 00        		.byte	0
 5539 00ef 00        		.byte	0
 5540 00f0 11        		.uleb128 0x11
 5541 00f1 05        		.uleb128 0x5
 5542 00f2 00        		.byte	0
 5543 00f3 03        		.uleb128 0x3
 5544 00f4 08        		.uleb128 0x8
 5545 00f5 3A        		.uleb128 0x3a
 5546 00f6 21        		.uleb128 0x21
 5547 00f7 01        		.sleb128 1
 5548 00f8 3B        		.uleb128 0x3b
 5549 00f9 21        		.uleb128 0x21
 5550 00fa C601      		.sleb128 198
 5551 00fc 39        		.uleb128 0x39
 5552 00fd 0B        		.uleb128 0xb


 5553 00fe 49        		.uleb128 0x49
 5554 00ff 13        		.uleb128 0x13
 5555 0100 02        		.uleb128 0x2
 5556 0101 17        		.uleb128 0x17
 5557 0102 B742      		.uleb128 0x2137
 5558 0104 17        		.uleb128 0x17
 5559 0105 00        		.byte	0
 5560 0106 00        		.byte	0
 5561 0107 12        		.uleb128 0x12
 5562 0108 0F        		.uleb128 0xf
 5563 0109 00        		.byte	0
 5564 010a 0B        		.uleb128 0xb
 5565 010b 21        		.uleb128 0x21
 5566 010c 04        		.sleb128 4
 5567 010d 49        		.uleb128 0x49
 5568 010e 13        		.uleb128 0x13
 5569 010f 00        		.byte	0
 5570 0110 00        		.byte	0
 5571 0111 13        		.uleb128 0x13
 5572 0112 34        		.uleb128 0x34
 5573 0113 00        		.byte	0
 5574 0114 03        		.uleb128 0x3
 5575 0115 08        		.uleb128 0x8
 5576 0116 3A        		.uleb128 0x3a
 5577 0117 21        		.uleb128 0x21
 5578 0118 01        		.sleb128 1
 5579 0119 3B        		.uleb128 0x3b
 5580 011a 0B        		.uleb128 0xb
 5581 011b 39        		.uleb128 0x39
 5582 011c 0B        		.uleb128 0xb
 5583 011d 49        		.uleb128 0x49
 5584 011e 13        		.uleb128 0x13
 5585 011f 3F        		.uleb128 0x3f
 5586 0120 19        		.uleb128 0x19
 5587 0121 02        		.uleb128 0x2
 5588 0122 18        		.uleb128 0x18
 5589 0123 00        		.byte	0
 5590 0124 00        		.byte	0
 5591 0125 14        		.uleb128 0x14
 5592 0126 2E        		.uleb128 0x2e
 5593 0127 01        		.byte	0x1
 5594 0128 3F        		.uleb128 0x3f
 5595 0129 19        		.uleb128 0x19
 5596 012a 03        		.uleb128 0x3
 5597 012b 08        		.uleb128 0x8
 5598 012c 3A        		.uleb128 0x3a
 5599 012d 21        		.uleb128 0x21
 5600 012e 04        		.sleb128 4
 5601 012f 3B        		.uleb128 0x3b
 5602 0130 0B        		.uleb128 0xb
 5603 0131 39        		.uleb128 0x39
 5604 0132 21        		.uleb128 0x21
 5605 0133 0D        		.sleb128 13
 5606 0134 27        		.uleb128 0x27
 5607 0135 19        		.uleb128 0x19
 5608 0136 3C        		.uleb128 0x3c
 5609 0137 19        		.uleb128 0x19


 5610 0138 01        		.uleb128 0x1
 5611 0139 13        		.uleb128 0x13
 5612 013a 00        		.byte	0
 5613 013b 00        		.byte	0
 5614 013c 15        		.uleb128 0x15
 5615 013d 0B        		.uleb128 0xb
 5616 013e 01        		.byte	0x1
 5617 013f 55        		.uleb128 0x55
 5618 0140 17        		.uleb128 0x17
 5619 0141 01        		.uleb128 0x1
 5620 0142 13        		.uleb128 0x13
 5621 0143 00        		.byte	0
 5622 0144 00        		.byte	0
 5623 0145 16        		.uleb128 0x16
 5624 0146 48        		.uleb128 0x48
 5625 0147 00        		.byte	0
 5626 0148 7D        		.uleb128 0x7d
 5627 0149 01        		.uleb128 0x1
 5628 014a 8301      		.uleb128 0x83
 5629 014c 18        		.uleb128 0x18
 5630 014d 00        		.byte	0
 5631 014e 00        		.byte	0
 5632 014f 17        		.uleb128 0x17
 5633 0150 34        		.uleb128 0x34
 5634 0151 00        		.byte	0
 5635 0152 03        		.uleb128 0x3
 5636 0153 0E        		.uleb128 0xe
 5637 0154 3A        		.uleb128 0x3a
 5638 0155 21        		.uleb128 0x21
 5639 0156 01        		.sleb128 1
 5640 0157 3B        		.uleb128 0x3b
 5641 0158 0B        		.uleb128 0xb
 5642 0159 39        		.uleb128 0x39
 5643 015a 0B        		.uleb128 0xb
 5644 015b 49        		.uleb128 0x49
 5645 015c 13        		.uleb128 0x13
 5646 015d 02        		.uleb128 0x2
 5647 015e 17        		.uleb128 0x17
 5648 015f B742      		.uleb128 0x2137
 5649 0161 17        		.uleb128 0x17
 5650 0162 00        		.byte	0
 5651 0163 00        		.byte	0
 5652 0164 18        		.uleb128 0x18
 5653 0165 11        		.uleb128 0x11
 5654 0166 01        		.byte	0x1
 5655 0167 25        		.uleb128 0x25
 5656 0168 0E        		.uleb128 0xe
 5657 0169 13        		.uleb128 0x13
 5658 016a 0B        		.uleb128 0xb
 5659 016b 03        		.uleb128 0x3
 5660 016c 0E        		.uleb128 0xe
 5661 016d 1B        		.uleb128 0x1b
 5662 016e 0E        		.uleb128 0xe
 5663 016f 55        		.uleb128 0x55
 5664 0170 17        		.uleb128 0x17
 5665 0171 11        		.uleb128 0x11
 5666 0172 01        		.uleb128 0x1


 5667 0173 10        		.uleb128 0x10
 5668 0174 17        		.uleb128 0x17
 5669 0175 00        		.byte	0
 5670 0176 00        		.byte	0
 5671 0177 19        		.uleb128 0x19
 5672 0178 0F        		.uleb128 0xf
 5673 0179 00        		.byte	0
 5674 017a 0B        		.uleb128 0xb
 5675 017b 0B        		.uleb128 0xb
 5676 017c 03        		.uleb128 0x3
 5677 017d 0E        		.uleb128 0xe
 5678 017e 00        		.byte	0
 5679 017f 00        		.byte	0
 5680 0180 1A        		.uleb128 0x1a
 5681 0181 24        		.uleb128 0x24
 5682 0182 00        		.byte	0
 5683 0183 0B        		.uleb128 0xb
 5684 0184 0B        		.uleb128 0xb
 5685 0185 3E        		.uleb128 0x3e
 5686 0186 0B        		.uleb128 0xb
 5687 0187 03        		.uleb128 0x3
 5688 0188 08        		.uleb128 0x8
 5689 0189 00        		.byte	0
 5690 018a 00        		.byte	0
 5691 018b 1B        		.uleb128 0x1b
 5692 018c 0F        		.uleb128 0xf
 5693 018d 00        		.byte	0
 5694 018e 0B        		.uleb128 0xb
 5695 018f 0B        		.uleb128 0xb
 5696 0190 00        		.byte	0
 5697 0191 00        		.byte	0
 5698 0192 1C        		.uleb128 0x1c
 5699 0193 34        		.uleb128 0x34
 5700 0194 00        		.byte	0
 5701 0195 03        		.uleb128 0x3
 5702 0196 0E        		.uleb128 0xe
 5703 0197 3A        		.uleb128 0x3a
 5704 0198 0B        		.uleb128 0xb
 5705 0199 3B        		.uleb128 0x3b
 5706 019a 0B        		.uleb128 0xb
 5707 019b 39        		.uleb128 0x39
 5708 019c 0B        		.uleb128 0xb
 5709 019d 49        		.uleb128 0x49
 5710 019e 13        		.uleb128 0x13
 5711 019f 3F        		.uleb128 0x3f
 5712 01a0 19        		.uleb128 0x19
 5713 01a1 3C        		.uleb128 0x3c
 5714 01a2 19        		.uleb128 0x19
 5715 01a3 00        		.byte	0
 5716 01a4 00        		.byte	0
 5717 01a5 1D        		.uleb128 0x1d
 5718 01a6 2E        		.uleb128 0x2e
 5719 01a7 01        		.byte	0x1
 5720 01a8 3F        		.uleb128 0x3f
 5721 01a9 19        		.uleb128 0x19
 5722 01aa 03        		.uleb128 0x3
 5723 01ab 0E        		.uleb128 0xe


 5724 01ac 3A        		.uleb128 0x3a
 5725 01ad 0B        		.uleb128 0xb
 5726 01ae 3B        		.uleb128 0x3b
 5727 01af 0B        		.uleb128 0xb
 5728 01b0 39        		.uleb128 0x39
 5729 01b1 0B        		.uleb128 0xb
 5730 01b2 27        		.uleb128 0x27
 5731 01b3 19        		.uleb128 0x19
 5732 01b4 3C        		.uleb128 0x3c
 5733 01b5 19        		.uleb128 0x19
 5734 01b6 01        		.uleb128 0x1
 5735 01b7 13        		.uleb128 0x13
 5736 01b8 00        		.byte	0
 5737 01b9 00        		.byte	0
 5738 01ba 1E        		.uleb128 0x1e
 5739 01bb 2E        		.uleb128 0x2e
 5740 01bc 00        		.byte	0
 5741 01bd 3F        		.uleb128 0x3f
 5742 01be 19        		.uleb128 0x19
 5743 01bf 03        		.uleb128 0x3
 5744 01c0 0E        		.uleb128 0xe
 5745 01c1 3A        		.uleb128 0x3a
 5746 01c2 0B        		.uleb128 0xb
 5747 01c3 3B        		.uleb128 0x3b
 5748 01c4 0B        		.uleb128 0xb
 5749 01c5 39        		.uleb128 0x39
 5750 01c6 0B        		.uleb128 0xb
 5751 01c7 27        		.uleb128 0x27
 5752 01c8 19        		.uleb128 0x19
 5753 01c9 49        		.uleb128 0x49
 5754 01ca 13        		.uleb128 0x13
 5755 01cb 3C        		.uleb128 0x3c
 5756 01cc 19        		.uleb128 0x19
 5757 01cd 00        		.byte	0
 5758 01ce 00        		.byte	0
 5759 01cf 1F        		.uleb128 0x1f
 5760 01d0 48        		.uleb128 0x48
 5761 01d1 00        		.byte	0
 5762 01d2 7D        		.uleb128 0x7d
 5763 01d3 01        		.uleb128 0x1
 5764 01d4 8201      		.uleb128 0x82
 5765 01d6 19        		.uleb128 0x19
 5766 01d7 7F        		.uleb128 0x7f
 5767 01d8 13        		.uleb128 0x13
 5768 01d9 00        		.byte	0
 5769 01da 00        		.byte	0
 5770 01db 20        		.uleb128 0x20
 5771 01dc 34        		.uleb128 0x34
 5772 01dd 00        		.byte	0
 5773 01de 03        		.uleb128 0x3
 5774 01df 0E        		.uleb128 0xe
 5775 01e0 3A        		.uleb128 0x3a
 5776 01e1 0B        		.uleb128 0xb
 5777 01e2 3B        		.uleb128 0x3b
 5778 01e3 05        		.uleb128 0x5
 5779 01e4 39        		.uleb128 0x39
 5780 01e5 0B        		.uleb128 0xb


 5781 01e6 49        		.uleb128 0x49
 5782 01e7 13        		.uleb128 0x13
 5783 01e8 00        		.byte	0
 5784 01e9 00        		.byte	0
 5785 01ea 21        		.uleb128 0x21
 5786 01eb 34        		.uleb128 0x34
 5787 01ec 00        		.byte	0
 5788 01ed 03        		.uleb128 0x3
 5789 01ee 0E        		.uleb128 0xe
 5790 01ef 3A        		.uleb128 0x3a
 5791 01f0 0B        		.uleb128 0xb
 5792 01f1 3B        		.uleb128 0x3b
 5793 01f2 05        		.uleb128 0x5
 5794 01f3 39        		.uleb128 0x39
 5795 01f4 0B        		.uleb128 0xb
 5796 01f5 49        		.uleb128 0x49
 5797 01f6 13        		.uleb128 0x13
 5798 01f7 02        		.uleb128 0x2
 5799 01f8 17        		.uleb128 0x17
 5800 01f9 B742      		.uleb128 0x2137
 5801 01fb 17        		.uleb128 0x17
 5802 01fc 00        		.byte	0
 5803 01fd 00        		.byte	0
 5804 01fe 22        		.uleb128 0x22
 5805 01ff 2E        		.uleb128 0x2e
 5806 0200 01        		.byte	0x1
 5807 0201 3F        		.uleb128 0x3f
 5808 0202 19        		.uleb128 0x19
 5809 0203 03        		.uleb128 0x3
 5810 0204 0E        		.uleb128 0xe
 5811 0205 3A        		.uleb128 0x3a
 5812 0206 0B        		.uleb128 0xb
 5813 0207 3B        		.uleb128 0x3b
 5814 0208 0B        		.uleb128 0xb
 5815 0209 39        		.uleb128 0x39
 5816 020a 0B        		.uleb128 0xb
 5817 020b 11        		.uleb128 0x11
 5818 020c 01        		.uleb128 0x1
 5819 020d 12        		.uleb128 0x12
 5820 020e 06        		.uleb128 0x6
 5821 020f 40        		.uleb128 0x40
 5822 0210 18        		.uleb128 0x18
 5823 0211 7C        		.uleb128 0x7c
 5824 0212 19        		.uleb128 0x19
 5825 0213 01        		.uleb128 0x1
 5826 0214 13        		.uleb128 0x13
 5827 0215 00        		.byte	0
 5828 0216 00        		.byte	0
 5829 0217 23        		.uleb128 0x23
 5830 0218 2E        		.uleb128 0x2e
 5831 0219 01        		.byte	0x1
 5832 021a 3F        		.uleb128 0x3f
 5833 021b 19        		.uleb128 0x19
 5834 021c 03        		.uleb128 0x3
 5835 021d 0E        		.uleb128 0xe
 5836 021e 3A        		.uleb128 0x3a
 5837 021f 0B        		.uleb128 0xb


 5838 0220 3B        		.uleb128 0x3b
 5839 0221 0B        		.uleb128 0xb
 5840 0222 39        		.uleb128 0x39
 5841 0223 0B        		.uleb128 0xb
 5842 0224 27        		.uleb128 0x27
 5843 0225 19        		.uleb128 0x19
 5844 0226 11        		.uleb128 0x11
 5845 0227 01        		.uleb128 0x1
 5846 0228 12        		.uleb128 0x12
 5847 0229 06        		.uleb128 0x6
 5848 022a 40        		.uleb128 0x40
 5849 022b 18        		.uleb128 0x18
 5850 022c 7A        		.uleb128 0x7a
 5851 022d 19        		.uleb128 0x19
 5852 022e 01        		.uleb128 0x1
 5853 022f 13        		.uleb128 0x13
 5854 0230 00        		.byte	0
 5855 0231 00        		.byte	0
 5856 0232 24        		.uleb128 0x24
 5857 0233 34        		.uleb128 0x34
 5858 0234 00        		.byte	0
 5859 0235 03        		.uleb128 0x3
 5860 0236 0E        		.uleb128 0xe
 5861 0237 3A        		.uleb128 0x3a
 5862 0238 0B        		.uleb128 0xb
 5863 0239 3B        		.uleb128 0x3b
 5864 023a 0B        		.uleb128 0xb
 5865 023b 39        		.uleb128 0x39
 5866 023c 0B        		.uleb128 0xb
 5867 023d 49        		.uleb128 0x49
 5868 023e 13        		.uleb128 0x13
 5869 023f 00        		.byte	0
 5870 0240 00        		.byte	0
 5871 0241 25        		.uleb128 0x25
 5872 0242 2E        		.uleb128 0x2e
 5873 0243 00        		.byte	0
 5874 0244 3F        		.uleb128 0x3f
 5875 0245 19        		.uleb128 0x19
 5876 0246 3C        		.uleb128 0x3c
 5877 0247 19        		.uleb128 0x19
 5878 0248 6E        		.uleb128 0x6e
 5879 0249 0E        		.uleb128 0xe
 5880 024a 03        		.uleb128 0x3
 5881 024b 0E        		.uleb128 0xe
 5882 024c 3A        		.uleb128 0x3a
 5883 024d 0B        		.uleb128 0xb
 5884 024e 3B        		.uleb128 0x3b
 5885 024f 0B        		.uleb128 0xb
 5886 0250 00        		.byte	0
 5887 0251 00        		.byte	0
 5888 0252 00        		.byte	0
 5889               		.section	.debug_loclists,"",@progbits
 5890 0000 0000 01AD 		.long	.Ldebug_loc3-.Ldebug_loc2
 5891               	.Ldebug_loc2:
 5892 0004 0005      		.word	0x5
 5893 0006 04        		.byte	0x4
 5894 0007 00        		.byte	0


 5895 0008 0000 0000 		.long	0
 5896               	.Ldebug_loc0:
 5897               	.LVUS8:
 5898 000c 00        		.uleb128 .LVU89
 5899 000d 00        		.uleb128 .LVU95
 5900 000e 00        		.uleb128 .LVU117
 5901 000f 00        		.uleb128 .LVU123
 5902               	.LLST8:
 5903 0010 06        		.byte	0x6
 5904 0011 0000 0000 		.long	.LVL52
 5905 0015 04        		.byte	0x4
 5906 0016 00        		.uleb128 .LVL52-.LVL52
 5907 0017 14        		.uleb128 .LVL53-.LVL52
 5908 0018 01        		.uleb128 0x1
 5909 0019 50        		.byte	0x50
 5910 001a 04        		.byte	0x4
 5911 001b 6C        		.uleb128 .LVL59-.LVL52
 5912 001c 8201      		.uleb128 .LVL60-.LVL52
 5913 001e 01        		.uleb128 0x1
 5914 001f 50        		.byte	0x50
 5915 0020 00        		.byte	0
 5916               	.LVUS4:
 5917 0021 01        		.uleb128 .LVU28
 5918 0022 00        		.uleb128 .LVU32
 5919 0023 00        		.uleb128 .LVU32
 5920 0024 00        		.uleb128 0
 5921               	.LLST4:
 5922 0025 06        		.byte	0x6
 5923 0026 0000 0000 		.long	.LVL16
 5924 002a 04        		.byte	0x4
 5925 002b 00        		.uleb128 .LVL16-.LVL16
 5926 002c 1E        		.uleb128 .LVL17-.LVL16
 5927 002d 02        		.uleb128 0x2
 5928 002e 30        		.byte	0x30
 5929 002f 9F        		.byte	0x9f
 5930 0030 04        		.byte	0x4
 5931 0031 1E        		.uleb128 .LVL17-.LVL16
 5932 0032 F803      		.uleb128 .LFE4-.LVL16
 5933 0034 01        		.uleb128 0x1
 5934 0035 56        		.byte	0x56
 5935 0036 00        		.byte	0
 5936               	.LVUS5:
 5937 0037 01        		.uleb128 .LVU28
 5938 0038 00        		.uleb128 .LVU32
 5939 0039 00        		.uleb128 .LVU32
 5940 003a 01        		.uleb128 .LVU69
 5941 003b 01        		.uleb128 .LVU69
 5942 003c 00        		.uleb128 .LVU73
 5943 003d 00        		.uleb128 .LVU73
 5944 003e 00        		.uleb128 0
 5945               	.LLST5:
 5946 003f 06        		.byte	0x6
 5947 0040 0000 0000 		.long	.LVL16
 5948 0044 04        		.byte	0x4
 5949 0045 00        		.uleb128 .LVL16-.LVL16
 5950 0046 1E        		.uleb128 .LVL17-.LVL16
 5951 0047 02        		.uleb128 0x2


 5952 0048 30        		.byte	0x30
 5953 0049 9F        		.byte	0x9f
 5954 004a 04        		.byte	0x4
 5955 004b 1E        		.uleb128 .LVL17-.LVL16
 5956 004c EE02      		.uleb128 .LVL40-.LVL16
 5957 004e 01        		.uleb128 0x1
 5958 004f 55        		.byte	0x55
 5959 0050 04        		.byte	0x4
 5960 0051 EE02      		.uleb128 .LVL40-.LVL16
 5961 0053 F402      		.uleb128 .LVL42-.LVL16
 5962 0055 02        		.uleb128 0x2
 5963 0056 30        		.byte	0x30
 5964 0057 9F        		.byte	0x9f
 5965 0058 04        		.byte	0x4
 5966 0059 F402      		.uleb128 .LVL42-.LVL16
 5967 005b F803      		.uleb128 .LFE4-.LVL16
 5968 005d 01        		.uleb128 0x1
 5969 005e 52        		.byte	0x52
 5970 005f 00        		.byte	0
 5971               	.LVUS6:
 5972 0060 01        		.uleb128 .LVU28
 5973 0061 00        		.uleb128 .LVU32
 5974 0062 00        		.uleb128 .LVU32
 5975 0063 01        		.uleb128 .LVU56
 5976 0064 01        		.uleb128 .LVU56
 5977 0065 00        		.uleb128 .LVU61
 5978 0066 00        		.uleb128 .LVU61
 5979 0067 00        		.uleb128 .LVU68
 5980 0068 00        		.uleb128 .LVU68
 5981 0069 00        		.uleb128 .LVU73
 5982 006a 00        		.uleb128 .LVU73
 5983 006b 00        		.uleb128 0
 5984               	.LLST6:
 5985 006c 06        		.byte	0x6
 5986 006d 0000 0000 		.long	.LVL16
 5987 0071 04        		.byte	0x4
 5988 0072 00        		.uleb128 .LVL16-.LVL16
 5989 0073 1E        		.uleb128 .LVL17-.LVL16
 5990 0074 02        		.uleb128 0x2
 5991 0075 30        		.byte	0x30
 5992 0076 9F        		.byte	0x9f
 5993 0077 04        		.byte	0x4
 5994 0078 1E        		.uleb128 .LVL17-.LVL16
 5995 0079 E001      		.uleb128 .LVL31-.LVL16
 5996 007b 01        		.uleb128 0x1
 5997 007c 52        		.byte	0x52
 5998 007d 04        		.byte	0x4
 5999 007e E001      		.uleb128 .LVL31-.LVL16
 6000 0080 EA01      		.uleb128 .LVL33-.LVL16
 6001 0082 02        		.uleb128 0x2
 6002 0083 30        		.byte	0x30
 6003 0084 9F        		.byte	0x9f
 6004 0085 04        		.byte	0x4
 6005 0086 EA01      		.uleb128 .LVL33-.LVL16
 6006 0088 EE02      		.uleb128 .LVL40-.LVL16
 6007 008a 01        		.uleb128 0x1
 6008 008b 52        		.byte	0x52


 6009 008c 04        		.byte	0x4
 6010 008d EE02      		.uleb128 .LVL40-.LVL16
 6011 008f F402      		.uleb128 .LVL42-.LVL16
 6012 0091 02        		.uleb128 0x2
 6013 0092 30        		.byte	0x30
 6014 0093 9F        		.byte	0x9f
 6015 0094 04        		.byte	0x4
 6016 0095 F402      		.uleb128 .LVL42-.LVL16
 6017 0097 F803      		.uleb128 .LFE4-.LVL16
 6018 0099 01        		.uleb128 0x1
 6019 009a 52        		.byte	0x52
 6020 009b 00        		.byte	0
 6021               	.LVUS7:
 6022 009c 01        		.uleb128 .LVU28
 6023 009d 00        		.uleb128 .LVU32
 6024 009e 00        		.uleb128 .LVU32
 6025 009f 01        		.uleb128 .LVU42
 6026 00a0 01        		.uleb128 .LVU42
 6027 00a1 00        		.uleb128 .LVU51
 6028 00a2 00        		.uleb128 .LVU51
 6029 00a3 00        		.uleb128 .LVU55
 6030 00a4 00        		.uleb128 .LVU55
 6031 00a5 00        		.uleb128 0
 6032               	.LLST7:
 6033 00a6 06        		.byte	0x6
 6034 00a7 0000 0000 		.long	.LVL16
 6035 00ab 04        		.byte	0x4
 6036 00ac 00        		.uleb128 .LVL16-.LVL16
 6037 00ad 1E        		.uleb128 .LVL17-.LVL16
 6038 00ae 02        		.uleb128 0x2
 6039 00af 30        		.byte	0x30
 6040 00b0 9F        		.byte	0x9f
 6041 00b1 04        		.byte	0x4
 6042 00b2 1E        		.uleb128 .LVL17-.LVL16
 6043 00b3 48        		.uleb128 .LVL21-.LVL16
 6044 00b4 01        		.uleb128 0x1
 6045 00b5 54        		.byte	0x54
 6046 00b6 04        		.byte	0x4
 6047 00b7 48        		.uleb128 .LVL21-.LVL16
 6048 00b8 D001      		.uleb128 .LVL28-.LVL16
 6049 00ba 01        		.uleb128 0x1
 6050 00bb 53        		.byte	0x53
 6051 00bc 04        		.byte	0x4
 6052 00bd D001      		.uleb128 .LVL28-.LVL16
 6053 00bf E001      		.uleb128 .LVL31-.LVL16
 6054 00c1 01        		.uleb128 0x1
 6055 00c2 54        		.byte	0x54
 6056 00c3 04        		.byte	0x4
 6057 00c4 E001      		.uleb128 .LVL31-.LVL16
 6058 00c6 F803      		.uleb128 .LFE4-.LVL16
 6059 00c8 01        		.uleb128 0x1
 6060 00c9 53        		.byte	0x53
 6061 00ca 00        		.byte	0
 6062               	.LVUS0:
 6063 00cb 00        		.uleb128 0
 6064 00cc 00        		.uleb128 .LVU2
 6065 00cd 00        		.uleb128 .LVU2


 6066 00ce 00        		.uleb128 .LVU3
 6067 00cf 00        		.uleb128 .LVU3
 6068 00d0 00        		.uleb128 .LVU16
 6069 00d1 00        		.uleb128 .LVU16
 6070 00d2 00        		.uleb128 .LVU17
 6071 00d3 00        		.uleb128 .LVU17
 6072 00d4 00        		.uleb128 .LVU21
 6073 00d5 00        		.uleb128 .LVU21
 6074 00d6 00        		.uleb128 .LVU22
 6075 00d7 00        		.uleb128 .LVU22
 6076 00d8 00        		.uleb128 0
 6077               	.LLST0:
 6078 00d9 06        		.byte	0x6
 6079 00da 0000 0000 		.long	.LVL0
 6080 00de 04        		.byte	0x4
 6081 00df 00        		.uleb128 .LVL0-.LVL0
 6082 00e0 04        		.uleb128 .LVL1-.LVL0
 6083 00e1 02        		.uleb128 0x2
 6084 00e2 91        		.byte	0x91
 6085 00e3 03        		.sleb128 3
 6086 00e4 04        		.byte	0x4
 6087 00e5 04        		.uleb128 .LVL1-.LVL0
 6088 00e6 08        		.uleb128 .LVL2-.LVL0
 6089 00e7 02        		.uleb128 0x2
 6090 00e8 7F        		.byte	0x7f
 6091 00e9 0B        		.sleb128 11
 6092 00ea 04        		.byte	0x4
 6093 00eb 08        		.uleb128 .LVL2-.LVL0
 6094 00ec 46        		.uleb128 .LVL9-.LVL0
 6095 00ed 02        		.uleb128 0x2
 6096 00ee 7E        		.byte	0x7e
 6097 00ef 0B        		.sleb128 11
 6098 00f0 04        		.byte	0x4
 6099 00f1 46        		.uleb128 .LVL9-.LVL0
 6100 00f2 48        		.uleb128 .LVL10-.LVL0
 6101 00f3 02        		.uleb128 0x2
 6102 00f4 7F        		.byte	0x7f
 6103 00f5 07        		.sleb128 7
 6104 00f6 04        		.byte	0x4
 6105 00f7 48        		.uleb128 .LVL10-.LVL0
 6106 00f8 66        		.uleb128 .LVL13-.LVL0
 6107 00f9 02        		.uleb128 0x2
 6108 00fa 7E        		.byte	0x7e
 6109 00fb 0B        		.sleb128 11
 6110 00fc 04        		.byte	0x4
 6111 00fd 66        		.uleb128 .LVL13-.LVL0
 6112 00fe 68        		.uleb128 .LVL14-.LVL0
 6113 00ff 02        		.uleb128 0x2
 6114 0100 7F        		.byte	0x7f
 6115 0101 07        		.sleb128 7
 6116 0102 04        		.byte	0x4
 6117 0103 68        		.uleb128 .LVL14-.LVL0
 6118 0104 8401      		.uleb128 .LFE3-.LVL0
 6119 0106 02        		.uleb128 0x2
 6120 0107 7E        		.byte	0x7e
 6121 0108 0B        		.sleb128 11
 6122 0109 00        		.byte	0


 6123               	.LVUS1:
 6124 010a 00        		.uleb128 0
 6125 010b 00        		.uleb128 .LVU2
 6126 010c 00        		.uleb128 .LVU2
 6127 010d 00        		.uleb128 .LVU3
 6128 010e 00        		.uleb128 .LVU3
 6129 010f 00        		.uleb128 .LVU16
 6130 0110 00        		.uleb128 .LVU16
 6131 0111 00        		.uleb128 .LVU17
 6132 0112 00        		.uleb128 .LVU17
 6133 0113 00        		.uleb128 .LVU21
 6134 0114 00        		.uleb128 .LVU21
 6135 0115 00        		.uleb128 .LVU22
 6136 0116 00        		.uleb128 .LVU22
 6137 0117 00        		.uleb128 0
 6138               	.LLST1:
 6139 0118 06        		.byte	0x6
 6140 0119 0000 0000 		.long	.LVL0
 6141 011d 04        		.byte	0x4
 6142 011e 00        		.uleb128 .LVL0-.LVL0
 6143 011f 04        		.uleb128 .LVL1-.LVL0
 6144 0120 02        		.uleb128 0x2
 6145 0121 91        		.byte	0x91
 6146 0122 07        		.sleb128 7
 6147 0123 04        		.byte	0x4
 6148 0124 04        		.uleb128 .LVL1-.LVL0
 6149 0125 08        		.uleb128 .LVL2-.LVL0
 6150 0126 02        		.uleb128 0x2
 6151 0127 7F        		.byte	0x7f
 6152 0128 0F        		.sleb128 15
 6153 0129 04        		.byte	0x4
 6154 012a 08        		.uleb128 .LVL2-.LVL0
 6155 012b 46        		.uleb128 .LVL9-.LVL0
 6156 012c 02        		.uleb128 0x2
 6157 012d 7E        		.byte	0x7e
 6158 012e 0F        		.sleb128 15
 6159 012f 04        		.byte	0x4
 6160 0130 46        		.uleb128 .LVL9-.LVL0
 6161 0131 48        		.uleb128 .LVL10-.LVL0
 6162 0132 02        		.uleb128 0x2
 6163 0133 7F        		.byte	0x7f
 6164 0134 0B        		.sleb128 11
 6165 0135 04        		.byte	0x4
 6166 0136 48        		.uleb128 .LVL10-.LVL0
 6167 0137 66        		.uleb128 .LVL13-.LVL0
 6168 0138 02        		.uleb128 0x2
 6169 0139 7E        		.byte	0x7e
 6170 013a 0F        		.sleb128 15
 6171 013b 04        		.byte	0x4
 6172 013c 66        		.uleb128 .LVL13-.LVL0
 6173 013d 68        		.uleb128 .LVL14-.LVL0
 6174 013e 02        		.uleb128 0x2
 6175 013f 7F        		.byte	0x7f
 6176 0140 0B        		.sleb128 11
 6177 0141 04        		.byte	0x4
 6178 0142 68        		.uleb128 .LVL14-.LVL0
 6179 0143 8401      		.uleb128 .LFE3-.LVL0


 6180 0145 02        		.uleb128 0x2
 6181 0146 7E        		.byte	0x7e
 6182 0147 0F        		.sleb128 15
 6183 0148 00        		.byte	0
 6184               	.LVUS2:
 6185 0149 00        		.uleb128 0
 6186 014a 00        		.uleb128 .LVU2
 6187 014b 00        		.uleb128 .LVU2
 6188 014c 00        		.uleb128 .LVU3
 6189 014d 00        		.uleb128 .LVU3
 6190 014e 00        		.uleb128 .LVU16
 6191 014f 00        		.uleb128 .LVU16
 6192 0150 00        		.uleb128 .LVU17
 6193 0151 00        		.uleb128 .LVU17
 6194 0152 00        		.uleb128 .LVU21
 6195 0153 00        		.uleb128 .LVU21
 6196 0154 00        		.uleb128 .LVU22
 6197 0155 00        		.uleb128 .LVU22
 6198 0156 00        		.uleb128 0
 6199               	.LLST2:
 6200 0157 06        		.byte	0x6
 6201 0158 0000 0000 		.long	.LVL0
 6202 015c 04        		.byte	0x4
 6203 015d 00        		.uleb128 .LVL0-.LVL0
 6204 015e 04        		.uleb128 .LVL1-.LVL0
 6205 015f 02        		.uleb128 0x2
 6206 0160 91        		.byte	0x91
 6207 0161 08        		.sleb128 8
 6208 0162 04        		.byte	0x4
 6209 0163 04        		.uleb128 .LVL1-.LVL0
 6210 0164 08        		.uleb128 .LVL2-.LVL0
 6211 0165 02        		.uleb128 0x2
 6212 0166 7F        		.byte	0x7f
 6213 0167 10        		.sleb128 16
 6214 0168 04        		.byte	0x4
 6215 0169 08        		.uleb128 .LVL2-.LVL0
 6216 016a 46        		.uleb128 .LVL9-.LVL0
 6217 016b 02        		.uleb128 0x2
 6218 016c 7E        		.byte	0x7e
 6219 016d 10        		.sleb128 16
 6220 016e 04        		.byte	0x4
 6221 016f 46        		.uleb128 .LVL9-.LVL0
 6222 0170 48        		.uleb128 .LVL10-.LVL0
 6223 0171 02        		.uleb128 0x2
 6224 0172 7F        		.byte	0x7f
 6225 0173 0C        		.sleb128 12
 6226 0174 04        		.byte	0x4
 6227 0175 48        		.uleb128 .LVL10-.LVL0
 6228 0176 66        		.uleb128 .LVL13-.LVL0
 6229 0177 02        		.uleb128 0x2
 6230 0178 7E        		.byte	0x7e
 6231 0179 10        		.sleb128 16
 6232 017a 04        		.byte	0x4
 6233 017b 66        		.uleb128 .LVL13-.LVL0
 6234 017c 68        		.uleb128 .LVL14-.LVL0
 6235 017d 02        		.uleb128 0x2
 6236 017e 7F        		.byte	0x7f


 6237 017f 0C        		.sleb128 12
 6238 0180 04        		.byte	0x4
 6239 0181 68        		.uleb128 .LVL14-.LVL0
 6240 0182 8401      		.uleb128 .LFE3-.LVL0
 6241 0184 02        		.uleb128 0x2
 6242 0185 7E        		.byte	0x7e
 6243 0186 10        		.sleb128 16
 6244 0187 00        		.byte	0
 6245               	.LVUS3:
 6246 0188 00        		.uleb128 .LVU10
 6247 0189 00        		.uleb128 .LVU14
 6248 018a 00        		.uleb128 .LVU14
 6249 018b 00        		.uleb128 .LVU15
 6250 018c 00        		.uleb128 .LVU17
 6251 018d 00        		.uleb128 .LVU20
 6252 018e 00        		.uleb128 .LVU22
 6253 018f 00        		.uleb128 .LVU23
 6254 0190 00        		.uleb128 .LVU23
 6255 0191 00        		.uleb128 0
 6256               	.LLST3:
 6257 0192 06        		.byte	0x6
 6258 0193 0000 0000 		.long	.LVL6
 6259 0197 04        		.byte	0x4
 6260 0198 00        		.uleb128 .LVL6-.LVL6
 6261 0199 0C        		.uleb128 .LVL7-.LVL6
 6262 019a 01        		.uleb128 0x1
 6263 019b 50        		.byte	0x50
 6264 019c 04        		.byte	0x4
 6265 019d 0C        		.uleb128 .LVL7-.LVL6
 6266 019e 12        		.uleb128 .LVL8-.LVL6
 6267 019f 01        		.uleb128 0x1
 6268 01a0 52        		.byte	0x52
 6269 01a1 04        		.byte	0x4
 6270 01a2 16        		.uleb128 .LVL10-.LVL6
 6271 01a3 32        		.uleb128 .LVL12-.LVL6
 6272 01a4 01        		.uleb128 0x1
 6273 01a5 52        		.byte	0x52
 6274 01a6 04        		.byte	0x4
 6275 01a7 36        		.uleb128 .LVL14-.LVL6
 6276 01a8 47        		.uleb128 .LVL15-1-.LVL6
 6277 01a9 01        		.uleb128 0x1
 6278 01aa 50        		.byte	0x50
 6279 01ab 04        		.byte	0x4
 6280 01ac 47        		.uleb128 .LVL15-1-.LVL6
 6281 01ad 52        		.uleb128 .LFE3-.LVL6
 6282 01ae 01        		.uleb128 0x1
 6283 01af 52        		.byte	0x52
 6284 01b0 00        		.byte	0
 6285               	.Ldebug_loc3:
 6286               		.section	.debug_aranges,"",@progbits
 6287 0000 0000 0024 		.long	0x24
 6288 0004 0002      		.word	0x2
 6289 0006 0000 0000 		.long	.Ldebug_info0
 6290 000a 04        		.byte	0x4
 6291 000b 00        		.byte	0
 6292 000c 0000      		.word	0
 6293 000e 0000      		.word	0


 6294 0010 0000 0000 		.long	.Ltext0
 6295 0014 0000 1B42 		.long	.Letext0-.Ltext0
 6296 0018 0000 0000 		.long	.LFB8
 6297 001c 0000 003E 		.long	.LFE8-.LFB8
 6298 0020 0000 0000 		.long	0
 6299 0024 0000 0000 		.long	0
 6300               		.section	.debug_rnglists,"",@progbits
 6301               	.Ldebug_ranges0:
 6302 0000 0000 0038 		.long	.Ldebug_ranges3-.Ldebug_ranges2
 6303               	.Ldebug_ranges2:
 6304 0004 0005      		.word	0x5
 6305 0006 04        		.byte	0x4
 6306 0007 00        		.byte	0
 6307 0008 0000 0000 		.long	0
 6308               	.LLRL9:
 6309 000c 05        		.byte	0x5
 6310 000d 0000 0000 		.long	.LBB6
 6311 0011 04        		.byte	0x4
 6312 0012 00        		.uleb128 .LBB6-.LBB6
 6313 0013 10        		.uleb128 .LBE6-.LBB6
 6314 0014 04        		.byte	0x4
 6315 0015 F803      		.uleb128 .LBB8-.LBB6
 6316 0017 8804      		.uleb128 .LBE8-.LBB6
 6317 0019 00        		.byte	0
 6318               	.LLRL10:
 6319 001a 05        		.byte	0x5
 6320 001b 0000 0000 		.long	.LBB9
 6321 001f 04        		.byte	0x4
 6322 0020 00        		.uleb128 .LBB9-.LBB9
 6323 0021 E005      		.uleb128 .LBE9-.LBB9
 6324 0023 04        		.byte	0x4
 6325 0024 E006      		.uleb128 .LBB10-.LBB9
 6326 0026 9207      		.uleb128 .LBE10-.LBB9
 6327 0028 04        		.byte	0x4
 6328 0029 9A07      		.uleb128 .LBB11-.LBB9
 6329 002b C609      		.uleb128 .LBE11-.LBB9
 6330 002d 00        		.byte	0
 6331               	.LLRL11:
 6332 002e 07        		.byte	0x7
 6333 002f 0000 0000 		.long	.Ltext0
 6334 0033 C236      		.uleb128 .Letext0-.Ltext0
 6335 0035 07        		.byte	0x7
 6336 0036 0000 0000 		.long	.LFB8
 6337 003a 3E        		.uleb128 .LFE8-.LFB8
 6338 003b 00        		.byte	0
 6339               	.Ldebug_ranges3:
 6340               		.section	.debug_line,"",@progbits
 6341               	.Ldebug_line0:
 6342 0000 0000 09A5 		.section	.debug_str,"MS",@progbits,1
 6342      0003 0000 
 6342      00B9 0201 
 6342      FB0E 0D00 
 6342      0101 0101 
 6343               	.LASF32:
 6344 0000 7363 7265 		.string	"screen_width"
 6344      656E 5F77 
 6344      6964 7468 


 6344      00
 6345               	.LASF44:
 6346 000d 7374 7263 		.string	"strcmp"
 6346      6D70 00
 6347               	.LASF10:
 6348 0014 7369 7A65 		.string	"size_t"
 6348      5F74 00
 6349               	.LASF47:
 6350 001b 7772 6974 		.string	"write"
 6350      6500 
 6351               	.LASF1:
 6352 0021 7661 5F6C 		.string	"va_list"
 6352      6973 7400 
 6353               	.LASF23:
 6354 0029 636C 6965 		.string	"client_nickname_set"
 6354      6E74 5F6E 
 6354      6963 6B6E 
 6354      616D 655F 
 6354      7365 7400 
 6355               	.LASF30:
 6356 003d 7469 705F 		.string	"tip_num"
 6356      6E75 6D00 
 6357               	.LASF59:
 6358 0045 6C61 7374 		.string	"last_runtime"
 6358      5F72 756E 
 6358      7469 6D65 
 6358      00
 6359               	.LASF46:
 6360 0052 7365 745F 		.string	"set_task"
 6360      7461 736B 
 6360      00
 6361               	.LASF70:
 6362 005b 5F5F 6275 		.string	"__builtin_memset"
 6362      696C 7469 
 6362      6E5F 6D65 
 6362      6D73 6574 
 6362      00
 6363               	.LASF9:
 6364 006c 6C6F 6E67 		.string	"long long unsigned int"
 6364      206C 6F6E 
 6364      6720 756E 
 6364      7369 676E 
 6364      6564 2069 
 6365               	.LASF42:
 6366 0083 696E 6974 		.string	"init_kernel"
 6366      5F6B 6572 
 6366      6E65 6C00 
 6367               	.LASF25:
 6368 008f 6D73 675F 		.string	"msg_buf"
 6368      6275 6600 
 6369               	.LASF34:
 6370 0097 7465 726D 		.string	"term_backspace"
 6370      5F62 6163 
 6370      6B73 7061 
 6370      6365 00
 6371               	.LASF26:
 6372 00a6 6D73 675F 		.string	"msg_buf_len"


 6372      6275 665F 
 6372      6C65 6E00 
 6373               	.LASF39:
 6374 00b2 6865 6C70 		.string	"help_text"
 6374      5F74 6578 
 6374      7400 
 6375               	.LASF8:
 6376 00bc 6C6F 6E67 		.string	"long long int"
 6376      206C 6F6E 
 6376      6720 696E 
 6376      7400 
 6377               	.LASF2:
 6378 00ca 7369 676E 		.string	"signed char"
 6378      6564 2063 
 6378      6861 7200 
 6379               	.LASF21:
 6380 00d6 636C 6965 		.string	"client_nickname_color"
 6380      6E74 5F6E 
 6380      6963 6B6E 
 6380      616D 655F 
 6380      636F 6C6F 
 6381               	.LASF64:
 6382 00ec 7465 7374 		.string	"test3.c"
 6382      332E 6300 
 6383               	.LASF6:
 6384 00f4 6C6F 6E67 		.string	"long int"
 6384      2069 6E74 
 6384      00
 6385               	.LASF66:
 6386 00fd 5F5F 6275 		.string	"__builtin_va_list"
 6386      696C 7469 
 6386      6E5F 7661 
 6386      5F6C 6973 
 6386      7400 
 6387               	.LASF68:
 6388 010f 6661 7374 		.string	"fast_printf"
 6388      5F70 7269 
 6388      6E74 6600 
 6389               	.LASF51:
 6390 011b 696E 6974 		.string	"init_ui"
 6390      5F75 6900 
 6391               	.LASF12:
 6392 0123 756E 7369 		.string	"unsigned int"
 6392      676E 6564 
 6392      2069 6E74 
 6392      00
 6393               	.LASF48:
 6394 0130 7374 726C 		.string	"strlen"
 6394      656E 00
 6395               	.LASF7:
 6396 0137 6C6F 6E67 		.string	"long unsigned int"
 6396      2075 6E73 
 6396      6967 6E65 
 6396      6420 696E 
 6396      7400 
 6397               	.LASF67:
 6398 0149 7261 6E64 		.string	"rand"


 6398      00
 6399               	.LASF29:
 6400 014e 7072 696E 		.string	"printf_buf"
 6400      7466 5F62 
 6400      7566 00
 6401               	.LASF5:
 6402 0159 7368 6F72 		.string	"short unsigned int"
 6402      7420 756E 
 6402      7369 676E 
 6402      6564 2069 
 6402      6E74 00
 6403               	.LASF27:
 6404 016c 636D 645F 		.string	"cmd_buf"
 6404      6275 6600 
 6405               	.LASF31:
 6406 0174 7363 7265 		.string	"screen_height"
 6406      656E 5F68 
 6406      6569 6768 
 6406      7400 
 6407               	.LASF20:
 6408 0182 6C61 7374 		.string	"last_keybuf_len"
 6408      5F6B 6579 
 6408      6275 665F 
 6408      6C65 6E00 
 6409               	.LASF61:
 6410 0192 736F 6D65 		.string	"some_num1"
 6410      5F6E 756D 
 6410      3100 
 6411               	.LASF57:
 6412 019c 736F 6D65 		.string	"some_num2"
 6412      5F6E 756D 
 6412      3200 
 6413               	.LASF45:
 6414 01a6 696E 6B65 		.string	"inkey"
 6414      7900 
 6415               	.LASF0:
 6416 01ac 5F5F 676E 		.string	"__gnuc_va_list"
 6416      7563 5F76 
 6416      615F 6C69 
 6416      7374 00
 6417               	.LASF17:
 6418 01bb 696E 6170 		.string	"inappcom"
 6418      7063 6F6D 
 6418      00
 6419               	.LASF28:
 6420 01c4 636D 645F 		.string	"cmd_buf_len"
 6420      6275 665F 
 6420      6C65 6E00 
 6421               	.LASF58:
 6422 01d0 7275 6E74 		.string	"runtime_clock"
 6422      696D 655F 
 6422      636C 6F63 
 6422      6B00 
 6423               	.LASF56:
 6424 01de 6C61 7374 		.string	"last_tip_changed"
 6424      5F74 6970 
 6424      5F63 6861 


 6424      6E67 6564 
 6424      00
 6425               	.LASF18:
 6426 01ef 6B65 7970 		.string	"keypress"
 6426      7265 7373 
 6426      00
 6427               	.LASF63:
 6428 01f8 474E 5520 		.string	"GNU C17 11.4.0 -mcpu=68000 -msoft-float -g -O2 -fomit-frame-pointer"
 6428      4331 3720 
 6428      3131 2E34 
 6428      2E30 202D 
 6428      6D63 7075 
 6429               	.LASF40:
 6430 023c 6265 6769 		.string	"begin_sch"
 6430      6E5F 7363 
 6430      6800 
 6431               	.LASF15:
 6432 0246 5F42 6F6F 		.string	"_Bool"
 6432      6C00 
 6433               	.LASF52:
 6434 024c 6D61 696E 		.string	"main_app"
 6434      5F61 7070 
 6434      00
 6435               	.LASF3:
 6436 0255 756E 7369 		.string	"unsigned char"
 6436      676E 6564 
 6436      2063 6861 
 6436      7200 
 6437               	.LASF43:
 6438 0263 7374 726E 		.string	"strncmp"
 6438      636D 7000 
 6439               	.LASF4:
 6440 026b 7368 6F72 		.string	"short int"
 6440      7420 696E 
 6440      7400 
 6441               	.LASF33:
 6442 0275 6368 6174 		.string	"chat_row"
 6442      5F72 6F77 
 6442      00
 6443               	.LASF24:
 6444 027e 7465 726D 		.string	"term_input_col"
 6444      5F69 6E70 
 6444      7574 5F63 
 6444      6F6C 00
 6445               	.LASF16:
 6446 028d 696E 5F61 		.string	"in_alt_screen"
 6446      6C74 5F73 
 6446      6372 6565 
 6446      6E00 
 6447               	.LASF55:
 6448 029b 636F 6D6D 		.string	"command_bar"
 6448      616E 645F 
 6448      6261 7200 
 6449               	.LASF41:
 6450 02a7 696E 6974 		.string	"init_io"
 6450      5F69 6F00 
 6451               	.LASF11:


 6452 02af 6C6F 6E67 		.string	"long double"
 6452      2064 6F75 
 6452      626C 6500 
 6453               	.LASF13:
 6454 02bb 6368 6172 		.string	"char"
 6454      00
 6455               	.LASF22:
 6456 02c0 636C 6965 		.string	"client_nickname"
 6456      6E74 5F6E 
 6456      6963 6B6E 
 6456      616D 6500 
 6457               	.LASF53:
 6458 02d0 7761 726E 		.string	"warn_length"
 6458      5F6C 656E 
 6458      6774 6800 
 6459               	.LASF38:
 6460 02dc 7469 705F 		.string	"tip_list"
 6460      6C69 7374 
 6460      00
 6461               	.LASF60:
 6462 02e5 7072 696E 		.string	"printf_buf_len"
 6462      7466 5F62 
 6462      7566 5F6C 
 6462      656E 00
 6463               	.LASF49:
 6464 02f4 7673 7072 		.string	"vsprintf"
 6464      696E 7466 
 6464      00
 6465               	.LASF36:
 6466 02fd 6D73 675F 		.string	"msg_input_prompt"
 6466      696E 7075 
 6466      745F 7072 
 6466      6F6D 7074 
 6466      00
 6467               	.LASF62:
 6468 030e 6172 6773 		.string	"args"
 6468      00
 6469               	.LASF69:
 6470 0313 6D65 6D73 		.string	"memset"
 6470      6574 00
 6471               	.LASF37:
 6472 031a 636F 6D6D 		.string	"command_prompt"
 6472      616E 645F 
 6472      7072 6F6D 
 6472      7074 00
 6473               	.LASF35:
 6474 0329 7465 726D 		.string	"term_line10"
 6474      5F6C 696E 
 6474      6531 3000 
 6475               	.LASF65:
 6476 0335 2F68 6F6D 		.string	"/home/students/5443962251"
 6476      652F 7374 
 6476      7564 656E 
 6476      7473 2F35 
 6476      3434 3339 
 6477               	.LASF54:
 6478 034f 7761 726E 		.string	"warn_empty"


 6478      5F65 6D70 
 6478      7479 00
 6479               	.LASF50:
 6480 035a 6D61 696E 		.string	"main"
 6480      00
 6481               	.LASF19:
 6482 035f 6C61 7374 		.string	"last_keybuf"
 6482      5F6B 6579 
 6482      6275 6600 
 6483               	.LASF14:
 6484 036b 7275 6E74 		.string	"runtime"
 6484      696D 6500 
 6485               		.ident	"GCC: (GNU) 11.4.0"


